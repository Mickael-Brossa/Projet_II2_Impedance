
Mini_Projet_Brossa_Z.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024a0  08010688  08010688  00020688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b28  08012b28  000300bc  2**0
                  CONTENTS
  4 .ARM          00000008  08012b28  08012b28  00022b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b30  08012b30  000300bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b30  08012b30  00022b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b34  08012b34  00022b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08012b38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f80  200000bc  08012bf4  000300bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000503c  08012bf4  0003503c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034486  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007107  00000000  00000000  00064572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027c0  00000000  00000000  0006b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002498  00000000  00000000  0006de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030dcf  00000000  00000000  000702d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033f53  00000000  00000000  000a10a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001184ff  00000000  00000000  000d4ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ed4f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae60  00000000  00000000  001ed54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801066c 	.word	0x0801066c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c0 	.word	0x200000c0
 800020c:	0801066c 	.word	0x0801066c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <MX_ADC1_Init+0xa0>)
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f7e:	f004 ffe9 	bl	8005f54 <HAL_ADC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f88:	f002 fd32 	bl	80039f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f9e:	f005 f983 	bl	80062a8 <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fa8:	f002 fd22 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000d8 	.word	0x200000d8
 8000fb8:	40012000 	.word	0x40012000
 8000fbc:	0f000001 	.word	0x0f000001

08000fc0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_ADC3_Init+0x98>)
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <MX_ADC3_Init+0x9c>)
 8000fd6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_ADC3_Init+0x98>)
 8000fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fde:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_ADC3_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_ADC3_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_ADC3_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_ADC3_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_ADC3_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_ADC3_Init+0x98>)
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <MX_ADC3_Init+0xa0>)
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_ADC3_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_ADC3_Init+0x98>)
 800100e:	2201      	movs	r2, #1
 8001010:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_ADC3_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_ADC3_Init+0x98>)
 800101c:	2201      	movs	r2, #1
 800101e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_ADC3_Init+0x98>)
 8001022:	f004 ff97 	bl	8005f54 <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800102c:	f002 fce0 	bl	80039f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001030:	2306      	movs	r3, #6
 8001032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001034:	2301      	movs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_ADC3_Init+0x98>)
 8001042:	f005 f931 	bl	80062a8 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800104c:	f002 fcd0 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000120 	.word	0x20000120
 800105c:	40012200 	.word	0x40012200
 8001060:	0f000001 	.word	0x0f000001

08001064 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a2a      	ldr	r2, [pc, #168]	; (800112c <HAL_ADC_MspInit+0xc8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d124      	bne.n	80010d0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a29      	ldr	r2, [pc, #164]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b27      	ldr	r3, [pc, #156]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b24      	ldr	r3, [pc, #144]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a23      	ldr	r2, [pc, #140]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ba:	2303      	movs	r3, #3
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	481a      	ldr	r0, [pc, #104]	; (8001134 <HAL_ADC_MspInit+0xd0>)
 80010ca:	f006 fe9d 	bl	8007e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80010ce:	e029      	b.n	8001124 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <HAL_ADC_MspInit+0xd4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d124      	bne.n	8001124 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 80010e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 80010f8:	f043 0320 	orr.w	r3, r3, #32
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_ADC_MspInit+0xcc>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0320 	and.w	r3, r3, #32
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800110a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001110:	2303      	movs	r3, #3
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <HAL_ADC_MspInit+0xd8>)
 8001120:	f006 fe72 	bl	8007e08 <HAL_GPIO_Init>
}
 8001124:	bf00      	nop
 8001126:	3730      	adds	r7, #48	; 0x30
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40012000 	.word	0x40012000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000
 8001138:	40012200 	.word	0x40012200
 800113c:	40021400 	.word	0x40021400

08001140 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_DAC_Init+0x4c>)
 8001150:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <MX_DAC_Init+0x50>)
 8001152:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_DAC_Init+0x4c>)
 8001156:	f005 fbd9 	bl	800690c <HAL_DAC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001160:	f002 fc46 	bl	80039f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001164:	2314      	movs	r3, #20
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <MX_DAC_Init+0x4c>)
 8001174:	f005 fd82 	bl	8006c7c <HAL_DAC_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800117e:	f002 fc37 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000168 	.word	0x20000168
 8001190:	40007400 	.word	0x40007400

08001194 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a31      	ldr	r2, [pc, #196]	; (8001278 <HAL_DAC_MspInit+0xe4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d15c      	bne.n	8001270 <HAL_DAC_MspInit+0xdc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011b6:	4b31      	ldr	r3, [pc, #196]	; (800127c <HAL_DAC_MspInit+0xe8>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a30      	ldr	r2, [pc, #192]	; (800127c <HAL_DAC_MspInit+0xe8>)
 80011bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b2e      	ldr	r3, [pc, #184]	; (800127c <HAL_DAC_MspInit+0xe8>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b2b      	ldr	r3, [pc, #172]	; (800127c <HAL_DAC_MspInit+0xe8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a2a      	ldr	r2, [pc, #168]	; (800127c <HAL_DAC_MspInit+0xe8>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <HAL_DAC_MspInit+0xe8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011e6:	2310      	movs	r3, #16
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ea:	2303      	movs	r3, #3
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4821      	ldr	r0, [pc, #132]	; (8001280 <HAL_DAC_MspInit+0xec>)
 80011fa:	f006 fe05 	bl	8007e08 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <HAL_DAC_MspInit+0xf4>)
 8001202:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 8001206:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800120a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 800120e:	2240      	movs	r2, #64	; 0x40
 8001210:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 800121a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 8001222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001226:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 800122a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 8001232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001236:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001244:	480f      	ldr	r0, [pc, #60]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 8001246:	f005 fdfd 	bl	8006e44 <HAL_DMA_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8001250:	f002 fbce 	bl	80039f0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_DAC_MspInit+0xf0>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	210f      	movs	r1, #15
 8001264:	2036      	movs	r0, #54	; 0x36
 8001266:	f005 fb27 	bl	80068b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800126a:	2036      	movs	r0, #54	; 0x36
 800126c:	f005 fb40 	bl	80068f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	; 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40007400 	.word	0x40007400
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000
 8001284:	2000017c 	.word	0x2000017c
 8001288:	40026088 	.word	0x40026088

0800128c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_DMA_Init+0x38>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <MX_DMA_Init+0x38>)
 8001298:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_DMA_Init+0x38>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2105      	movs	r1, #5
 80012ae:	2010      	movs	r0, #16
 80012b0:	f005 fb02 	bl	80068b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012b4:	2010      	movs	r0, #16
 80012b6:	f005 fb1b 	bl	80068f0 <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_DMA2D_Init+0x5c>)
 80012ce:	4a16      	ldr	r2, [pc, #88]	; (8001328 <MX_DMA2D_Init+0x60>)
 80012d0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_DMA2D_Init+0x5c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_DMA2D_Init+0x5c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_DMA2D_Init+0x5c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_DMA2D_Init+0x5c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_DMA2D_Init+0x5c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_DMA2D_Init+0x5c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_DMA2D_Init+0x5c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <MX_DMA2D_Init+0x5c>)
 80012fe:	f006 f9e7 	bl	80076d0 <HAL_DMA2D_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001308:	f002 fb72 	bl	80039f0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800130c:	2101      	movs	r1, #1
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_DMA2D_Init+0x5c>)
 8001310:	f006 fc4c 	bl	8007bac <HAL_DMA2D_ConfigLayer>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800131a:	f002 fb69 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200001dc 	.word	0x200001dc
 8001328:	4002b000 	.word	0x4002b000

0800132c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <HAL_DMA2D_MspInit+0x44>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d113      	bne.n	8001366 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_DMA2D_MspInit+0x48>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <HAL_DMA2D_MspInit+0x48>)
 8001344:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_DMA2D_MspInit+0x48>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2105      	movs	r1, #5
 800135a:	205a      	movs	r0, #90	; 0x5a
 800135c:	f005 faac 	bl	80068b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001360:	205a      	movs	r0, #90	; 0x5a
 8001362:	f005 fac5 	bl	80068f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	4002b000 	.word	0x4002b000
 8001374:	40023800 	.word	0x40023800

08001378 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_FMC_Init+0x98>)
 8001392:	4a20      	ldr	r2, [pc, #128]	; (8001414 <MX_FMC_Init+0x9c>)
 8001394:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <MX_FMC_Init+0x98>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800139c:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <MX_FMC_Init+0x98>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <MX_FMC_Init+0x98>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <MX_FMC_Init+0x98>)
 80013aa:	2210      	movs	r2, #16
 80013ac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_FMC_Init+0x98>)
 80013b0:	2240      	movs	r2, #64	; 0x40
 80013b2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_FMC_Init+0x98>)
 80013b6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80013ba:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_FMC_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_FMC_Init+0x98>)
 80013c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013c8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_FMC_Init+0x98>)
 80013cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_FMC_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80013dc:	2307      	movs	r3, #7
 80013de:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80013e4:	2307      	movs	r3, #7
 80013e6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80013e8:	2303      	movs	r3, #3
 80013ea:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_FMC_Init+0x98>)
 80013fa:	f009 fe79 	bl	800b0f0 <HAL_SDRAM_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001404:	f002 faf4 	bl	80039f0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001408:	bf00      	nop
 800140a:	3720      	adds	r7, #32
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000021c 	.word	0x2000021c
 8001414:	a0000140 	.word	0xa0000140

08001418 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800142c:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_FMC_MspInit+0x100>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d16d      	bne.n	8001510 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001434:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_FMC_MspInit+0x100>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <HAL_FMC_MspInit+0x104>)
 800143c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143e:	4a37      	ldr	r2, [pc, #220]	; (800151c <HAL_FMC_MspInit+0x104>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6393      	str	r3, [r2, #56]	; 0x38
 8001446:	4b35      	ldr	r3, [pc, #212]	; (800151c <HAL_FMC_MspInit+0x104>)
 8001448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001452:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001456:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001464:	230c      	movs	r3, #12
 8001466:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	482c      	ldr	r0, [pc, #176]	; (8001520 <HAL_FMC_MspInit+0x108>)
 800146e:	f006 fccb 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001472:	f248 1333 	movw	r3, #33075	; 0x8133
 8001476:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001484:	230c      	movs	r3, #12
 8001486:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4825      	ldr	r0, [pc, #148]	; (8001524 <HAL_FMC_MspInit+0x10c>)
 800148e:	f006 fcbb 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001492:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001496:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014a4:	230c      	movs	r3, #12
 80014a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	481e      	ldr	r0, [pc, #120]	; (8001528 <HAL_FMC_MspInit+0x110>)
 80014ae:	f006 fcab 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80014b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80014b6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014c4:	230c      	movs	r3, #12
 80014c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4817      	ldr	r0, [pc, #92]	; (800152c <HAL_FMC_MspInit+0x114>)
 80014ce:	f006 fc9b 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80014d2:	2328      	movs	r3, #40	; 0x28
 80014d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e2:	230c      	movs	r3, #12
 80014e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4811      	ldr	r0, [pc, #68]	; (8001530 <HAL_FMC_MspInit+0x118>)
 80014ec:	f006 fc8c 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80014f0:	2308      	movs	r3, #8
 80014f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001500:	230c      	movs	r3, #12
 8001502:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4619      	mov	r1, r3
 8001508:	480a      	ldr	r0, [pc, #40]	; (8001534 <HAL_FMC_MspInit+0x11c>)
 800150a:	f006 fc7d 	bl	8007e08 <HAL_GPIO_Init>
 800150e:	e000      	b.n	8001512 <HAL_FMC_MspInit+0xfa>
    return;
 8001510:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000250 	.word	0x20000250
 800151c:	40023800 	.word	0x40023800
 8001520:	40021000 	.word	0x40021000
 8001524:	40021800 	.word	0x40021800
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40021400 	.word	0x40021400
 8001530:	40021c00 	.word	0x40021c00
 8001534:	40020800 	.word	0x40020800

08001538 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001540:	f7ff ff6a 	bl	8001418 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <vApplicationGetIdleTaskMemory+0x2c>)
 800155c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	4a06      	ldr	r2, [pc, #24]	; (800157c <vApplicationGetIdleTaskMemory+0x30>)
 8001562:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200007ec 	.word	0x200007ec
 800157c:	200008a0 	.word	0x200008a0

08001580 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b0cc      	sub	sp, #304	; 0x130
 8001584:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
	  int i;
	  for(i=0; i<45;i++)	{
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800158c:	e0ea      	b.n	8001764 <MX_FREERTOS_Init+0x1e4>
		  sinus12bit_360[i] = 2048 + 1024*sin(i*3.14159/180);
 800158e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001592:	f7fe ffdf 	bl	8000554 <__aeabi_i2d>
 8001596:	a3d4      	add	r3, pc, #848	; (adr r3, 80018e8 <MX_FREERTOS_Init+0x368>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff f844 	bl	8000628 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	4bd0      	ldr	r3, [pc, #832]	; (80018f0 <MX_FREERTOS_Init+0x370>)
 80015ae:	f7ff f965 	bl	800087c <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	ec43 2b17 	vmov	d7, r2, r3
 80015ba:	eeb0 0a47 	vmov.f32	s0, s14
 80015be:	eef0 0a67 	vmov.f32	s1, s15
 80015c2:	f00d ff29 	bl	800f418 <sin>
 80015c6:	ec51 0b10 	vmov	r0, r1, d0
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4bc9      	ldr	r3, [pc, #804]	; (80018f4 <MX_FREERTOS_Init+0x374>)
 80015d0:	f7ff f82a 	bl	8000628 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4bc5      	ldr	r3, [pc, #788]	; (80018f8 <MX_FREERTOS_Init+0x378>)
 80015e2:	f7fe fe6b 	bl	80002bc <__adddf3>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff faf3 	bl	8000bd8 <__aeabi_d2uiz>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b299      	uxth	r1, r3
 80015f6:	4ac1      	ldr	r2, [pc, #772]	; (80018fc <MX_FREERTOS_Init+0x37c>)
 80015f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  sinus12bit_180[i] = 2048 + 1024*sin(i*3.14159/90);
 8001600:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001604:	f7fe ffa6 	bl	8000554 <__aeabi_i2d>
 8001608:	a3b7      	add	r3, pc, #732	; (adr r3, 80018e8 <MX_FREERTOS_Init+0x368>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7ff f80b 	bl	8000628 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4bb8      	ldr	r3, [pc, #736]	; (8001900 <MX_FREERTOS_Init+0x380>)
 8001620:	f7ff f92c 	bl	800087c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	ec43 2b17 	vmov	d7, r2, r3
 800162c:	eeb0 0a47 	vmov.f32	s0, s14
 8001630:	eef0 0a67 	vmov.f32	s1, s15
 8001634:	f00d fef0 	bl	800f418 <sin>
 8001638:	ec51 0b10 	vmov	r0, r1, d0
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4bac      	ldr	r3, [pc, #688]	; (80018f4 <MX_FREERTOS_Init+0x374>)
 8001642:	f7fe fff1 	bl	8000628 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4ba9      	ldr	r3, [pc, #676]	; (80018f8 <MX_FREERTOS_Init+0x378>)
 8001654:	f7fe fe32 	bl	80002bc <__adddf3>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff faba 	bl	8000bd8 <__aeabi_d2uiz>
 8001664:	4603      	mov	r3, r0
 8001666:	b299      	uxth	r1, r3
 8001668:	4aa6      	ldr	r2, [pc, #664]	; (8001904 <MX_FREERTOS_Init+0x384>)
 800166a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800166e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  sinus12bit_90[i] = 2048 + 1024*sin(i*3.14159/45);
 8001672:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001676:	f7fe ff6d 	bl	8000554 <__aeabi_i2d>
 800167a:	a39b      	add	r3, pc, #620	; (adr r3, 80018e8 <MX_FREERTOS_Init+0x368>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe ffd2 	bl	8000628 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b9d      	ldr	r3, [pc, #628]	; (8001908 <MX_FREERTOS_Init+0x388>)
 8001692:	f7ff f8f3 	bl	800087c <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	ec43 2b17 	vmov	d7, r2, r3
 800169e:	eeb0 0a47 	vmov.f32	s0, s14
 80016a2:	eef0 0a67 	vmov.f32	s1, s15
 80016a6:	f00d feb7 	bl	800f418 <sin>
 80016aa:	ec51 0b10 	vmov	r0, r1, d0
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b90      	ldr	r3, [pc, #576]	; (80018f4 <MX_FREERTOS_Init+0x374>)
 80016b4:	f7fe ffb8 	bl	8000628 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <MX_FREERTOS_Init+0x378>)
 80016c6:	f7fe fdf9 	bl	80002bc <__adddf3>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff fa81 	bl	8000bd8 <__aeabi_d2uiz>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b299      	uxth	r1, r3
 80016da:	4a8c      	ldr	r2, [pc, #560]	; (800190c <MX_FREERTOS_Init+0x38c>)
 80016dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  sinus12bit_45[i] = 2048 + 1024*sin(2*i*3.14159/45);
 80016e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff32 	bl	8000554 <__aeabi_i2d>
 80016f0:	a37d      	add	r3, pc, #500	; (adr r3, 80018e8 <MX_FREERTOS_Init+0x368>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7fe ff97 	bl	8000628 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b80      	ldr	r3, [pc, #512]	; (8001908 <MX_FREERTOS_Init+0x388>)
 8001708:	f7ff f8b8 	bl	800087c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	ec43 2b17 	vmov	d7, r2, r3
 8001714:	eeb0 0a47 	vmov.f32	s0, s14
 8001718:	eef0 0a67 	vmov.f32	s1, s15
 800171c:	f00d fe7c 	bl	800f418 <sin>
 8001720:	ec51 0b10 	vmov	r0, r1, d0
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b72      	ldr	r3, [pc, #456]	; (80018f4 <MX_FREERTOS_Init+0x374>)
 800172a:	f7fe ff7d 	bl	8000628 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	4b6f      	ldr	r3, [pc, #444]	; (80018f8 <MX_FREERTOS_Init+0x378>)
 800173c:	f7fe fdbe 	bl	80002bc <__adddf3>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff fa46 	bl	8000bd8 <__aeabi_d2uiz>
 800174c:	4603      	mov	r3, r0
 800174e:	b299      	uxth	r1, r3
 8001750:	4a6f      	ldr	r2, [pc, #444]	; (8001910 <MX_FREERTOS_Init+0x390>)
 8001752:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001756:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(i=0; i<45;i++)	{
 800175a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800175e:	3301      	adds	r3, #1
 8001760:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001764:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001768:	2b2c      	cmp	r3, #44	; 0x2c
 800176a:	f77f af10 	ble.w	800158e <MX_FREERTOS_Init+0xe>
	  }
	  for(i=45; i<90;i++)	{
 800176e:	232d      	movs	r3, #45	; 0x2d
 8001770:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001774:	e0af      	b.n	80018d6 <MX_FREERTOS_Init+0x356>
		  sinus12bit_360[i] = 2048 + 1024*sin(i*3.14159/180);
 8001776:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800177a:	f7fe feeb 	bl	8000554 <__aeabi_i2d>
 800177e:	a35a      	add	r3, pc, #360	; (adr r3, 80018e8 <MX_FREERTOS_Init+0x368>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe ff50 	bl	8000628 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	4b56      	ldr	r3, [pc, #344]	; (80018f0 <MX_FREERTOS_Init+0x370>)
 8001796:	f7ff f871 	bl	800087c <__aeabi_ddiv>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	ec43 2b17 	vmov	d7, r2, r3
 80017a2:	eeb0 0a47 	vmov.f32	s0, s14
 80017a6:	eef0 0a67 	vmov.f32	s1, s15
 80017aa:	f00d fe35 	bl	800f418 <sin>
 80017ae:	ec51 0b10 	vmov	r0, r1, d0
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <MX_FREERTOS_Init+0x374>)
 80017b8:	f7fe ff36 	bl	8000628 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <MX_FREERTOS_Init+0x378>)
 80017ca:	f7fe fd77 	bl	80002bc <__adddf3>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9ff 	bl	8000bd8 <__aeabi_d2uiz>
 80017da:	4603      	mov	r3, r0
 80017dc:	b299      	uxth	r1, r3
 80017de:	4a47      	ldr	r2, [pc, #284]	; (80018fc <MX_FREERTOS_Init+0x37c>)
 80017e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  sinus12bit_180[i] = 2048 + 1024*sin(i*3.14159/90);
 80017e8:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80017ec:	f7fe feb2 	bl	8000554 <__aeabi_i2d>
 80017f0:	a33d      	add	r3, pc, #244	; (adr r3, 80018e8 <MX_FREERTOS_Init+0x368>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7fe ff17 	bl	8000628 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <MX_FREERTOS_Init+0x380>)
 8001808:	f7ff f838 	bl	800087c <__aeabi_ddiv>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	ec43 2b17 	vmov	d7, r2, r3
 8001814:	eeb0 0a47 	vmov.f32	s0, s14
 8001818:	eef0 0a67 	vmov.f32	s1, s15
 800181c:	f00d fdfc 	bl	800f418 <sin>
 8001820:	ec51 0b10 	vmov	r0, r1, d0
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <MX_FREERTOS_Init+0x374>)
 800182a:	f7fe fefd 	bl	8000628 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <MX_FREERTOS_Init+0x378>)
 800183c:	f7fe fd3e 	bl	80002bc <__adddf3>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f9c6 	bl	8000bd8 <__aeabi_d2uiz>
 800184c:	4603      	mov	r3, r0
 800184e:	b299      	uxth	r1, r3
 8001850:	4a2c      	ldr	r2, [pc, #176]	; (8001904 <MX_FREERTOS_Init+0x384>)
 8001852:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001856:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  sinus12bit_90[i] = 2048 + 1024*sin(i*3.14159/45);
 800185a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800185e:	f7fe fe79 	bl	8000554 <__aeabi_i2d>
 8001862:	a321      	add	r3, pc, #132	; (adr r3, 80018e8 <MX_FREERTOS_Init+0x368>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fede 	bl	8000628 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <MX_FREERTOS_Init+0x388>)
 800187a:	f7fe ffff 	bl	800087c <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	ec43 2b17 	vmov	d7, r2, r3
 8001886:	eeb0 0a47 	vmov.f32	s0, s14
 800188a:	eef0 0a67 	vmov.f32	s1, s15
 800188e:	f00d fdc3 	bl	800f418 <sin>
 8001892:	ec51 0b10 	vmov	r0, r1, d0
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_FREERTOS_Init+0x374>)
 800189c:	f7fe fec4 	bl	8000628 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_FREERTOS_Init+0x378>)
 80018ae:	f7fe fd05 	bl	80002bc <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f98d 	bl	8000bd8 <__aeabi_d2uiz>
 80018be:	4603      	mov	r3, r0
 80018c0:	b299      	uxth	r1, r3
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <MX_FREERTOS_Init+0x38c>)
 80018c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(i=45; i<90;i++)	{
 80018cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018d0:	3301      	adds	r3, #1
 80018d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018da:	2b59      	cmp	r3, #89	; 0x59
 80018dc:	f77f af4b 	ble.w	8001776 <MX_FREERTOS_Init+0x1f6>
	    }
	  for(i=90; i<180;i++)	{
 80018e0:	235a      	movs	r3, #90	; 0x5a
 80018e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018e6:	e08c      	b.n	8001a02 <MX_FREERTOS_Init+0x482>
 80018e8:	f01b866e 	.word	0xf01b866e
 80018ec:	400921f9 	.word	0x400921f9
 80018f0:	40668000 	.word	0x40668000
 80018f4:	40900000 	.word	0x40900000
 80018f8:	40a00000 	.word	0x40a00000
 80018fc:	20000270 	.word	0x20000270
 8001900:	40568000 	.word	0x40568000
 8001904:	20000540 	.word	0x20000540
 8001908:	40468000 	.word	0x40468000
 800190c:	200006a8 	.word	0x200006a8
 8001910:	2000075c 	.word	0x2000075c
		  sinus12bit_360[i] = 2048 + 1024*sin(i*3.14159/180);
 8001914:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001918:	f7fe fe1c 	bl	8000554 <__aeabi_i2d>
 800191c:	a33e      	add	r3, pc, #248	; (adr r3, 8001a18 <MX_FREERTOS_Init+0x498>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fe81 	bl	8000628 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <MX_FREERTOS_Init+0x4a0>)
 8001934:	f7fe ffa2 	bl	800087c <__aeabi_ddiv>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	ec43 2b17 	vmov	d7, r2, r3
 8001940:	eeb0 0a47 	vmov.f32	s0, s14
 8001944:	eef0 0a67 	vmov.f32	s1, s15
 8001948:	f00d fd66 	bl	800f418 <sin>
 800194c:	ec51 0b10 	vmov	r0, r1, d0
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <MX_FREERTOS_Init+0x4a4>)
 8001956:	f7fe fe67 	bl	8000628 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <MX_FREERTOS_Init+0x4a8>)
 8001968:	f7fe fca8 	bl	80002bc <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f930 	bl	8000bd8 <__aeabi_d2uiz>
 8001978:	4603      	mov	r3, r0
 800197a:	b299      	uxth	r1, r3
 800197c:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <MX_FREERTOS_Init+0x4ac>)
 800197e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001982:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  sinus12bit_180[i] = 2048 + 1024*sin(i*3.14159/90);
 8001986:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800198a:	f7fe fde3 	bl	8000554 <__aeabi_i2d>
 800198e:	a322      	add	r3, pc, #136	; (adr r3, 8001a18 <MX_FREERTOS_Init+0x498>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fe48 	bl	8000628 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <MX_FREERTOS_Init+0x4b0>)
 80019a6:	f7fe ff69 	bl	800087c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	ec43 2b17 	vmov	d7, r2, r3
 80019b2:	eeb0 0a47 	vmov.f32	s0, s14
 80019b6:	eef0 0a67 	vmov.f32	s1, s15
 80019ba:	f00d fd2d 	bl	800f418 <sin>
 80019be:	ec51 0b10 	vmov	r0, r1, d0
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_FREERTOS_Init+0x4a4>)
 80019c8:	f7fe fe2e 	bl	8000628 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_FREERTOS_Init+0x4a8>)
 80019da:	f7fe fc6f 	bl	80002bc <__adddf3>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f8f7 	bl	8000bd8 <__aeabi_d2uiz>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b299      	uxth	r1, r3
 80019ee:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <MX_FREERTOS_Init+0x4b4>)
 80019f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(i=90; i<180;i++)	{
 80019f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019fc:	3301      	adds	r3, #1
 80019fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a06:	2bb3      	cmp	r3, #179	; 0xb3
 8001a08:	dd84      	ble.n	8001914 <MX_FREERTOS_Init+0x394>
	    }
	  for(i=180; i<360;i++)	{
 8001a0a:	23b4      	movs	r3, #180	; 0xb4
 8001a0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a10:	e050      	b.n	8001ab4 <MX_FREERTOS_Init+0x534>
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	f01b866e 	.word	0xf01b866e
 8001a1c:	400921f9 	.word	0x400921f9
 8001a20:	40668000 	.word	0x40668000
 8001a24:	40900000 	.word	0x40900000
 8001a28:	40a00000 	.word	0x40a00000
 8001a2c:	20000270 	.word	0x20000270
 8001a30:	40568000 	.word	0x40568000
 8001a34:	20000540 	.word	0x20000540
		  sinus12bit_360[i] = 2048 + 1024*sin(i*3.14159/180);
 8001a38:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001a3c:	f7fe fd8a 	bl	8000554 <__aeabi_i2d>
 8001a40:	a3c3      	add	r3, pc, #780	; (adr r3, 8001d50 <MX_FREERTOS_Init+0x7d0>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe fdef 	bl	8000628 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4ba0      	ldr	r3, [pc, #640]	; (8001cd8 <MX_FREERTOS_Init+0x758>)
 8001a58:	f7fe ff10 	bl	800087c <__aeabi_ddiv>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	ec43 2b17 	vmov	d7, r2, r3
 8001a64:	eeb0 0a47 	vmov.f32	s0, s14
 8001a68:	eef0 0a67 	vmov.f32	s1, s15
 8001a6c:	f00d fcd4 	bl	800f418 <sin>
 8001a70:	ec51 0b10 	vmov	r0, r1, d0
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b98      	ldr	r3, [pc, #608]	; (8001cdc <MX_FREERTOS_Init+0x75c>)
 8001a7a:	f7fe fdd5 	bl	8000628 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	4b95      	ldr	r3, [pc, #596]	; (8001ce0 <MX_FREERTOS_Init+0x760>)
 8001a8c:	f7fe fc16 	bl	80002bc <__adddf3>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff f89e 	bl	8000bd8 <__aeabi_d2uiz>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b299      	uxth	r1, r3
 8001aa0:	4a90      	ldr	r2, [pc, #576]	; (8001ce4 <MX_FREERTOS_Init+0x764>)
 8001aa2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(i=180; i<360;i++)	{
 8001aaa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ab4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ab8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001abc:	dbbc      	blt.n	8001a38 <MX_FREERTOS_Init+0x4b8>
	    }

	  if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sinus12bit_360, 360,
 8001abe:	2300      	movs	r3, #0
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001ac6:	4a87      	ldr	r2, [pc, #540]	; (8001ce4 <MX_FREERTOS_Init+0x764>)
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4887      	ldr	r0, [pc, #540]	; (8001ce8 <MX_FREERTOS_Init+0x768>)
 8001acc:	f004 ff40 	bl	8006950 <HAL_DAC_Start_DMA>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_FREERTOS_Init+0x55a>
			  DAC_ALIGN_12B_R) != HAL_OK) {
		  Error_Handler();
 8001ad6:	f001 ff8b 	bl	80039f0 <Error_Handler>
	  }

	  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK) {
 8001ada:	4884      	ldr	r0, [pc, #528]	; (8001cec <MX_FREERTOS_Init+0x76c>)
 8001adc:	f009 fc9c 	bl	800b418 <HAL_TIM_Base_Start_IT>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_FREERTOS_Init+0x56a>
		  Error_Handler();
 8001ae6:	f001 ff83 	bl	80039f0 <Error_Handler>
	  }

	  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af0:	487f      	ldr	r0, [pc, #508]	; (8001cf0 <MX_FREERTOS_Init+0x770>)
 8001af2:	f006 fc41 	bl	8008378 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2120      	movs	r1, #32
 8001afa:	487e      	ldr	r0, [pc, #504]	; (8001cf4 <MX_FREERTOS_Init+0x774>)
 8001afc:	f006 fc3c 	bl	8008378 <HAL_GPIO_WritePin>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Send_aff_vcc1 */
  osMessageQDef(Send_aff_vcc1, 2, uint16_t);
 8001b00:	4b7d      	ldr	r3, [pc, #500]	; (8001cf8 <MX_FREERTOS_Init+0x778>)
 8001b02:	f507 748a 	add.w	r4, r7, #276	; 0x114
 8001b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Send_aff_vcc1Handle = osMessageCreate(osMessageQ(Send_aff_vcc1), NULL);
 8001b0c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f00a fec3 	bl	800c89e <osMessageCreate>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4a78      	ldr	r2, [pc, #480]	; (8001cfc <MX_FREERTOS_Init+0x77c>)
 8001b1c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Send_aff_vcc2 */
  osMessageQDef(Send_aff_vcc2, 2, uint16_t);
 8001b1e:	4b76      	ldr	r3, [pc, #472]	; (8001cf8 <MX_FREERTOS_Init+0x778>)
 8001b20:	f507 7482 	add.w	r4, r7, #260	; 0x104
 8001b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Send_aff_vcc2Handle = osMessageCreate(osMessageQ(Send_aff_vcc2), NULL);
 8001b2a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f00a feb4 	bl	800c89e <osMessageCreate>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a71      	ldr	r2, [pc, #452]	; (8001d00 <MX_FREERTOS_Init+0x780>)
 8001b3a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_freq */
  osMessageQDef(Queue_freq, 2, uint16_t);
 8001b3c:	4b6e      	ldr	r3, [pc, #440]	; (8001cf8 <MX_FREERTOS_Init+0x778>)
 8001b3e:	f107 04f4 	add.w	r4, r7, #244	; 0xf4
 8001b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_freqHandle = osMessageCreate(osMessageQ(Queue_freq), NULL);
 8001b48:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00a fea5 	bl	800c89e <osMessageCreate>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4a6b      	ldr	r2, [pc, #428]	; (8001d04 <MX_FREERTOS_Init+0x784>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_res */
  osMessageQDef(Queue_res, 2, uint16_t);
 8001b5a:	4b67      	ldr	r3, [pc, #412]	; (8001cf8 <MX_FREERTOS_Init+0x778>)
 8001b5c:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8001b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_resHandle = osMessageCreate(osMessageQ(Queue_res), NULL);
 8001b66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00a fe96 	bl	800c89e <osMessageCreate>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4a64      	ldr	r2, [pc, #400]	; (8001d08 <MX_FREERTOS_Init+0x788>)
 8001b76:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_cond_est */
  osMessageQDef(Queue_cond_est, 2, uint32_t);
 8001b78:	4b64      	ldr	r3, [pc, #400]	; (8001d0c <MX_FREERTOS_Init+0x78c>)
 8001b7a:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 8001b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_cond_estHandle = osMessageCreate(osMessageQ(Queue_cond_est), NULL);
 8001b84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f00a fe87 	bl	800c89e <osMessageCreate>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a5f      	ldr	r2, [pc, #380]	; (8001d10 <MX_FREERTOS_Init+0x790>)
 8001b94:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_res_est */
  osMessageQDef(Queue_res_est, 2, uint32_t);
 8001b96:	4b5d      	ldr	r3, [pc, #372]	; (8001d0c <MX_FREERTOS_Init+0x78c>)
 8001b98:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_res_estHandle = osMessageCreate(osMessageQ(Queue_res_est), NULL);
 8001ba2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f00a fe78 	bl	800c89e <osMessageCreate>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <MX_FREERTOS_Init+0x794>)
 8001bb2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001bb4:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <MX_FREERTOS_Init+0x798>)
 8001bb6:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001bba:	461d      	mov	r5, r3
 8001bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001bc8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00a fe05 	bl	800c7de <osThreadCreate>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4a51      	ldr	r2, [pc, #324]	; (8001d1c <MX_FREERTOS_Init+0x79c>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* definition and creation of affichage */
  osThreadDef(affichage, Show_Value, osPriorityNormal, 0, 1024);
 8001bda:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <MX_FREERTOS_Init+0x7a0>)
 8001bdc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001be0:	461d      	mov	r5, r3
 8001be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  affichageHandle = osThreadCreate(osThread(affichage), NULL);
 8001bee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00a fdf2 	bl	800c7de <osThreadCreate>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <MX_FREERTOS_Init+0x7a4>)
 8001bfe:	6013      	str	r3, [r2, #0]

  /* definition and creation of Mesure_crete_1 */
  osThreadDef(Mesure_crete_1, Mesure_crete_crete_1, osPriorityNormal, 0, 128);
 8001c00:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <MX_FREERTOS_Init+0x7a8>)
 8001c02:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001c06:	461d      	mov	r5, r3
 8001c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Mesure_crete_1Handle = osThreadCreate(osThread(Mesure_crete_1), NULL);
 8001c14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f00a fddf 	bl	800c7de <osThreadCreate>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4a42      	ldr	r2, [pc, #264]	; (8001d2c <MX_FREERTOS_Init+0x7ac>)
 8001c24:	6013      	str	r3, [r2, #0]

  /* definition and creation of Choix_res_cond */
  osThreadDef(Choix_res_cond, Choix_mesure, osPriorityNormal, 0, 128);
 8001c26:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <MX_FREERTOS_Init+0x7b0>)
 8001c28:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Choix_res_condHandle = osThreadCreate(osThread(Choix_res_cond), NULL);
 8001c3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f00a fdcc 	bl	800c7de <osThreadCreate>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <MX_FREERTOS_Init+0x7b4>)
 8001c4a:	6013      	str	r3, [r2, #0]

  /* definition and creation of modif_freq_res */
  osThreadDef(modif_freq_res, Modif_freq_res, osPriorityNormal, 0, 128);
 8001c4c:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <MX_FREERTOS_Init+0x7b8>)
 8001c4e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001c52:	461d      	mov	r5, r3
 8001c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  modif_freq_resHandle = osThreadCreate(osThread(modif_freq_res), NULL);
 8001c60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00a fdb9 	bl	800c7de <osThreadCreate>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a33      	ldr	r2, [pc, #204]	; (8001d3c <MX_FREERTOS_Init+0x7bc>)
 8001c70:	6013      	str	r3, [r2, #0]

  /* definition and creation of ges_freq_res */
  osThreadDef(ges_freq_res, Ges_freq_res, osPriorityNormal, 0, 128);
 8001c72:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c7a:	4a31      	ldr	r2, [pc, #196]	; (8001d40 <MX_FREERTOS_Init+0x7c0>)
 8001c7c:	461c      	mov	r4, r3
 8001c7e:	4615      	mov	r5, r2
 8001c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ges_freq_resHandle = osThreadCreate(osThread(ges_freq_res), NULL);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f00a fda3 	bl	800c7de <osThreadCreate>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4a2a      	ldr	r2, [pc, #168]	; (8001d44 <MX_FREERTOS_Init+0x7c4>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* definition and creation of calcul_val */
  osThreadDef(calcul_val, Calcul_val, osPriorityNormal, 0, 128);
 8001c9e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ca2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ca6:	4a28      	ldr	r2, [pc, #160]	; (8001d48 <MX_FREERTOS_Init+0x7c8>)
 8001ca8:	461c      	mov	r4, r3
 8001caa:	4615      	mov	r5, r2
 8001cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  calcul_valHandle = osThreadCreate(osThread(calcul_val), NULL);
 8001cb8:	463b      	mov	r3, r7
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f00a fd8e 	bl	800c7de <osThreadCreate>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a21      	ldr	r2, [pc, #132]	; (8001d4c <MX_FREERTOS_Init+0x7cc>)
 8001cc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001cc8:	bf00      	nop
 8001cca:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	40668000 	.word	0x40668000
 8001cdc:	40900000 	.word	0x40900000
 8001ce0:	40a00000 	.word	0x40a00000
 8001ce4:	20000270 	.word	0x20000270
 8001ce8:	20000168 	.word	0x20000168
 8001cec:	200010ac 	.word	0x200010ac
 8001cf0:	40021c00 	.word	0x40021c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	080106ec 	.word	0x080106ec
 8001cfc:	200007d4 	.word	0x200007d4
 8001d00:	200007d8 	.word	0x200007d8
 8001d04:	200007dc 	.word	0x200007dc
 8001d08:	200007e0 	.word	0x200007e0
 8001d0c:	080106fc 	.word	0x080106fc
 8001d10:	200007e4 	.word	0x200007e4
 8001d14:	200007e8 	.word	0x200007e8
 8001d18:	0801070c 	.word	0x0801070c
 8001d1c:	200007b8 	.word	0x200007b8
 8001d20:	08010728 	.word	0x08010728
 8001d24:	200007bc 	.word	0x200007bc
 8001d28:	08010744 	.word	0x08010744
 8001d2c:	200007c0 	.word	0x200007c0
 8001d30:	08010760 	.word	0x08010760
 8001d34:	200007c4 	.word	0x200007c4
 8001d38:	0801077c 	.word	0x0801077c
 8001d3c:	200007c8 	.word	0x200007c8
 8001d40:	08010798 	.word	0x08010798
 8001d44:	200007cc 	.word	0x200007cc
 8001d48:	080107b4 	.word	0x080107b4
 8001d4c:	200007d0 	.word	0x200007d0
 8001d50:	f01b866e 	.word	0xf01b866e
 8001d54:	400921f9 	.word	0x400921f9

08001d58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d64:	f00a fd87 	bl	800c876 <osDelay>
 8001d68:	e7fa      	b.n	8001d60 <StartDefaultTask+0x8>
	...

08001d6c <Show_Value>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Show_Value */
void Show_Value(void const * argument)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b094      	sub	sp, #80	; 0x50
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Show_Value */
  char text[50]={};
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	f107 0318 	add.w	r3, r7, #24
 8001d7c:	222e      	movs	r2, #46	; 0x2e
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00c fe79 	bl	800ea78 <memset>
  TickType_t xLastWakeTime = xTaskGetTickCount();
 8001d86:	f00b fe37 	bl	800d9f8 <xTaskGetTickCount>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	613b      	str	r3, [r7, #16]
  const TickType_t xPeriodMs = 300;
 8001d8e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001d92:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t res_est;
  uint32_t cond_est;
  int wait=0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Infinite loop */
  for(;;)
  {
	  if (type_mesure) {
 8001d98:	4b82      	ldr	r3, [pc, #520]	; (8001fa4 <Show_Value+0x238>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00c      	beq.n	8001dba <Show_Value+0x4e>
		  sprintf(text," Mesure Condensateur");
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4980      	ldr	r1, [pc, #512]	; (8001fa8 <Show_Value+0x23c>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f00c ff7c 	bl	800eca4 <siprintf>
		  BSP_LCD_DisplayStringAtLine(2,(uint8_t*) text);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	2002      	movs	r0, #2
 8001db4:	f002 fc3a 	bl	800462c <BSP_LCD_DisplayStringAtLine>
 8001db8:	e00b      	b.n	8001dd2 <Show_Value+0x66>
	  }
	  else {
		  sprintf(text," Mesure Resistance  ");
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	497b      	ldr	r1, [pc, #492]	; (8001fac <Show_Value+0x240>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f00c ff6f 	bl	800eca4 <siprintf>
		  BSP_LCD_DisplayStringAtLine(2,(uint8_t*) text);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f002 fc2d 	bl	800462c <BSP_LCD_DisplayStringAtLine>
	  }

	  if(xQueueReceive(Send_aff_vcc1Handle,&tension_mes,0)) {
 8001dd2:	4b77      	ldr	r3, [pc, #476]	; (8001fb0 <Show_Value+0x244>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4976      	ldr	r1, [pc, #472]	; (8001fb4 <Show_Value+0x248>)
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f00b f890 	bl	800cf00 <xQueueReceive>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00e      	beq.n	8001e04 <Show_Value+0x98>
		  sprintf(text," Tension crete bras = %04u mV",tension_mes);
 8001de6:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <Show_Value+0x248>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4971      	ldr	r1, [pc, #452]	; (8001fb8 <Show_Value+0x24c>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f00c ff56 	bl	800eca4 <siprintf>
		  BSP_LCD_DisplayStringAtLine(4,(uint8_t*) text);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	2004      	movs	r0, #4
 8001e00:	f002 fc14 	bl	800462c <BSP_LCD_DisplayStringAtLine>
	  }


	  if (stat_mesure==0) {
 8001e04:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <Show_Value+0x250>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d13e      	bne.n	8001e8a <Show_Value+0x11e>
		  if(xQueueReceive(Queue_res_estHandle,&res_est,50)) {
 8001e0c:	4b6c      	ldr	r3, [pc, #432]	; (8001fc0 <Show_Value+0x254>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f107 010c 	add.w	r1, r7, #12
 8001e14:	2232      	movs	r2, #50	; 0x32
 8001e16:	4618      	mov	r0, r3
 8001e18:	f00b f872 	bl	800cf00 <xQueueReceive>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00c      	beq.n	8001e3c <Show_Value+0xd0>
			  sprintf(text," Possible resistance estimee = %012lu Ohm",res_est);
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4966      	ldr	r1, [pc, #408]	; (8001fc4 <Show_Value+0x258>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f00c ff3a 	bl	800eca4 <siprintf>
			  BSP_LCD_DisplayStringAtLine(8,(uint8_t*) text);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	2008      	movs	r0, #8
 8001e38:	f002 fbf8 	bl	800462c <BSP_LCD_DisplayStringAtLine>
		  }
		  if(xQueueReceive(Queue_cond_estHandle,&cond_est,50)) {
 8001e3c:	4b62      	ldr	r3, [pc, #392]	; (8001fc8 <Show_Value+0x25c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f107 0108 	add.w	r1, r7, #8
 8001e44:	2232      	movs	r2, #50	; 0x32
 8001e46:	4618      	mov	r0, r3
 8001e48:	f00b f85a 	bl	800cf00 <xQueueReceive>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <Show_Value+0x100>
			  sprintf(text," Possible condensateur estimee = %012lu pF",cond_est);
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	495c      	ldr	r1, [pc, #368]	; (8001fcc <Show_Value+0x260>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f00c ff22 	bl	800eca4 <siprintf>
			  BSP_LCD_DisplayStringAtLine(10,(uint8_t*) text);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	200a      	movs	r0, #10
 8001e68:	f002 fbe0 	bl	800462c <BSP_LCD_DisplayStringAtLine>
		  }
		  BSP_LCD_ClearStringLine(6);
 8001e6c:	2006      	movs	r0, #6
 8001e6e:	f002 fa6d 	bl	800434c <BSP_LCD_ClearStringLine>
		  if (type_mesure) {
 8001e72:	4b4c      	ldr	r3, [pc, #304]	; (8001fa4 <Show_Value+0x238>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <Show_Value+0x116>
			  BSP_LCD_ClearStringLine(8);
 8001e7a:	2008      	movs	r0, #8
 8001e7c:	f002 fa66 	bl	800434c <BSP_LCD_ClearStringLine>
 8001e80:	e088      	b.n	8001f94 <Show_Value+0x228>
		  }
		  else {
			  BSP_LCD_ClearStringLine(10);
 8001e82:	200a      	movs	r0, #10
 8001e84:	f002 fa62 	bl	800434c <BSP_LCD_ClearStringLine>
 8001e88:	e084      	b.n	8001f94 <Show_Value+0x228>
		  }

	  }
	  else {
		  if (out_boundarie==0) {
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <Show_Value+0x264>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d16e      	bne.n	8001f70 <Show_Value+0x204>
			  switch (wait) {
 8001e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d85c      	bhi.n	8001f52 <Show_Value+0x1e6>
 8001e98:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <Show_Value+0x134>)
 8001e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9e:	bf00      	nop
 8001ea0:	08001eb5 	.word	0x08001eb5
 8001ea4:	08001ed5 	.word	0x08001ed5
 8001ea8:	08001ef5 	.word	0x08001ef5
 8001eac:	08001f15 	.word	0x08001f15
 8001eb0:	08001f35 	.word	0x08001f35
				  case 0 :
					  sprintf(text," Transition frequence-resistance     ");
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4946      	ldr	r1, [pc, #280]	; (8001fd4 <Show_Value+0x268>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f00c fef2 	bl	800eca4 <siprintf>
					  BSP_LCD_DisplayStringAtLine(6,(uint8_t*) text);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	2006      	movs	r0, #6
 8001ec8:	f002 fbb0 	bl	800462c <BSP_LCD_DisplayStringAtLine>
					  wait++;
 8001ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ece:	3301      	adds	r3, #1
 8001ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
					  break;
 8001ed2:	e059      	b.n	8001f88 <Show_Value+0x21c>
				  case 1 :
					  sprintf(text," Transition frequence-resistance .   ");
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	493f      	ldr	r1, [pc, #252]	; (8001fd8 <Show_Value+0x26c>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00c fee2 	bl	800eca4 <siprintf>
					  BSP_LCD_DisplayStringAtLine(6,(uint8_t*) text);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	2006      	movs	r0, #6
 8001ee8:	f002 fba0 	bl	800462c <BSP_LCD_DisplayStringAtLine>
					  wait++;
 8001eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eee:	3301      	adds	r3, #1
 8001ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
					  break;
 8001ef2:	e049      	b.n	8001f88 <Show_Value+0x21c>
				  case 2 :
					  sprintf(text," Transition frequence-resistance ..  ");
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4938      	ldr	r1, [pc, #224]	; (8001fdc <Show_Value+0x270>)
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00c fed2 	bl	800eca4 <siprintf>
					  BSP_LCD_DisplayStringAtLine(6,(uint8_t*) text);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	2006      	movs	r0, #6
 8001f08:	f002 fb90 	bl	800462c <BSP_LCD_DisplayStringAtLine>
					  wait++;
 8001f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0e:	3301      	adds	r3, #1
 8001f10:	64fb      	str	r3, [r7, #76]	; 0x4c
					  break;
 8001f12:	e039      	b.n	8001f88 <Show_Value+0x21c>
				  case 3 :
					  sprintf(text," Transition frequence-resistance ... ");
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4931      	ldr	r1, [pc, #196]	; (8001fe0 <Show_Value+0x274>)
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f00c fec2 	bl	800eca4 <siprintf>
					  BSP_LCD_DisplayStringAtLine(6,(uint8_t*) text);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	2006      	movs	r0, #6
 8001f28:	f002 fb80 	bl	800462c <BSP_LCD_DisplayStringAtLine>
					  wait++;
 8001f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f2e:	3301      	adds	r3, #1
 8001f30:	64fb      	str	r3, [r7, #76]	; 0x4c
					  break;
 8001f32:	e029      	b.n	8001f88 <Show_Value+0x21c>
				  case 4 :
					  sprintf(text," Transition frequence-resistance ....");
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	492a      	ldr	r1, [pc, #168]	; (8001fe4 <Show_Value+0x278>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f00c feb2 	bl	800eca4 <siprintf>
					  BSP_LCD_DisplayStringAtLine(6,(uint8_t*) text);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	2006      	movs	r0, #6
 8001f48:	f002 fb70 	bl	800462c <BSP_LCD_DisplayStringAtLine>
					  wait = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
					  break;
 8001f50:	e01a      	b.n	8001f88 <Show_Value+0x21c>
				  default :
					  sprintf(text," Transition frequence-resistance ....");
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4923      	ldr	r1, [pc, #140]	; (8001fe4 <Show_Value+0x278>)
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00c fea3 	bl	800eca4 <siprintf>
					  BSP_LCD_DisplayStringAtLine(6,(uint8_t*) text);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	2006      	movs	r0, #6
 8001f66:	f002 fb61 	bl	800462c <BSP_LCD_DisplayStringAtLine>
					  wait = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
					  break;
 8001f6e:	e00b      	b.n	8001f88 <Show_Value+0x21c>
			  }
		  }
		  else {
			  sprintf(text," En dehors de la capacite de mesure  ");
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	491c      	ldr	r1, [pc, #112]	; (8001fe8 <Show_Value+0x27c>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f00c fe94 	bl	800eca4 <siprintf>
			  BSP_LCD_DisplayStringAtLine(6,(uint8_t*) text);
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4619      	mov	r1, r3
 8001f82:	2006      	movs	r0, #6
 8001f84:	f002 fb52 	bl	800462c <BSP_LCD_DisplayStringAtLine>
		  }
		  BSP_LCD_ClearStringLine(8);
 8001f88:	2008      	movs	r0, #8
 8001f8a:	f002 f9df 	bl	800434c <BSP_LCD_ClearStringLine>
		  BSP_LCD_ClearStringLine(10);
 8001f8e:	200a      	movs	r0, #10
 8001f90:	f002 f9dc 	bl	800434c <BSP_LCD_ClearStringLine>
	  }

	  vTaskDelayUntil(&xLastWakeTime, xPeriodMs);
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f00b fb58 	bl	800d650 <vTaskDelayUntil>
	  if (type_mesure) {
 8001fa0:	e6fa      	b.n	8001d98 <Show_Value+0x2c>
 8001fa2:	bf00      	nop
 8001fa4:	20000268 	.word	0x20000268
 8001fa8:	080107d0 	.word	0x080107d0
 8001fac:	080107e8 	.word	0x080107e8
 8001fb0:	200007d4 	.word	0x200007d4
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	08010800 	.word	0x08010800
 8001fbc:	20000264 	.word	0x20000264
 8001fc0:	200007e8 	.word	0x200007e8
 8001fc4:	08010820 	.word	0x08010820
 8001fc8:	200007e4 	.word	0x200007e4
 8001fcc:	0801084c 	.word	0x0801084c
 8001fd0:	2000026c 	.word	0x2000026c
 8001fd4:	08010878 	.word	0x08010878
 8001fd8:	080108a0 	.word	0x080108a0
 8001fdc:	080108c8 	.word	0x080108c8
 8001fe0:	080108f0 	.word	0x080108f0
 8001fe4:	08010918 	.word	0x08010918
 8001fe8:	08010940 	.word	0x08010940

08001fec <Mesure_crete_crete_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Mesure_crete_crete_1 */
void Mesure_crete_crete_1(void const * argument)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mesure_crete_crete_1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ff4:	4b21      	ldr	r3, [pc, #132]	; (800207c <Mesure_crete_crete_1+0x90>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <Mesure_crete_crete_1+0x90>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  sConfig.Channel = ADC_CHANNEL_8;
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <Mesure_crete_crete_1+0x90>)
 8002002:	2208      	movs	r2, #8
 8002004:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002006:	491d      	ldr	r1, [pc, #116]	; (800207c <Mesure_crete_crete_1+0x90>)
 8002008:	481d      	ldr	r0, [pc, #116]	; (8002080 <Mesure_crete_crete_1+0x94>)
 800200a:	f004 f94d 	bl	80062a8 <HAL_ADC_ConfigChannel>

  TickType_t xLastWakeTime = xTaskGetTickCount();
 800200e:	f00b fcf3 	bl	800d9f8 <xTaskGetTickCount>
 8002012:	4603      	mov	r3, r0
 8002014:	613b      	str	r3, [r7, #16]
  const TickType_t xPeriodMs = 100;
 8002016:	2364      	movs	r3, #100	; 0x64
 8002018:	617b      	str	r3, [r7, #20]
  uint16_t Mesure=0;
 800201a:	2300      	movs	r3, #0
 800201c:	81fb      	strh	r3, [r7, #14]


  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc3);
 800201e:	4818      	ldr	r0, [pc, #96]	; (8002080 <Mesure_crete_crete_1+0x94>)
 8002020:	f003 ffdc 	bl	8005fdc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, 100);
 8002024:	2164      	movs	r1, #100	; 0x64
 8002026:	4816      	ldr	r0, [pc, #88]	; (8002080 <Mesure_crete_crete_1+0x94>)
 8002028:	f004 f8a6 	bl	8006178 <HAL_ADC_PollForConversion>
	  Mesure = (uint16_t)HAL_ADC_GetValue(&hadc3);
 800202c:	4814      	ldr	r0, [pc, #80]	; (8002080 <Mesure_crete_crete_1+0x94>)
 800202e:	f004 f92e 	bl	800628e <HAL_ADC_GetValue>
 8002032:	4603      	mov	r3, r0
 8002034:	b29b      	uxth	r3, r3
 8002036:	81fb      	strh	r3, [r7, #14]

	  if (Mesure < (tension_max-tension_cc)*3/10) { //
 8002038:	89fb      	ldrh	r3, [r7, #14]
 800203a:	2bcc      	cmp	r3, #204	; 0xcc
 800203c:	d804      	bhi.n	8002048 <Mesure_crete_crete_1+0x5c>
		  stat_mesure = -1; // sous-regime
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <Mesure_crete_crete_1+0x98>)
 8002040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e00a      	b.n	800205e <Mesure_crete_crete_1+0x72>
	  }
	  else if (Mesure > (tension_max-tension_cc)*7/10) { //
 8002048:	89fb      	ldrh	r3, [r7, #14]
 800204a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800204e:	d303      	bcc.n	8002058 <Mesure_crete_crete_1+0x6c>
		  stat_mesure = 1; // sur-regime
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <Mesure_crete_crete_1+0x98>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e002      	b.n	800205e <Mesure_crete_crete_1+0x72>
	  }
	  else {
		  stat_mesure = 0;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <Mesure_crete_crete_1+0x98>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
	  }

	  xQueueSend(Send_aff_vcc1Handle,&Mesure,10);
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <Mesure_crete_crete_1+0x9c>)
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	f107 010e 	add.w	r1, r7, #14
 8002066:	2300      	movs	r3, #0
 8002068:	220a      	movs	r2, #10
 800206a:	f00a fe43 	bl	800ccf4 <xQueueGenericSend>

	  vTaskDelayUntil(&xLastWakeTime, xPeriodMs);
 800206e:	f107 0310 	add.w	r3, r7, #16
 8002072:	6979      	ldr	r1, [r7, #20]
 8002074:	4618      	mov	r0, r3
 8002076:	f00b faeb 	bl	800d650 <vTaskDelayUntil>
	  HAL_ADC_Start(&hadc3);
 800207a:	e7d0      	b.n	800201e <Mesure_crete_crete_1+0x32>
 800207c:	20000254 	.word	0x20000254
 8002080:	20000120 	.word	0x20000120
 8002084:	20000264 	.word	0x20000264
 8002088:	200007d4 	.word	0x200007d4

0800208c <Choix_mesure>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Choix_mesure */
void Choix_mesure(void const * argument)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Choix_mesure */

  TickType_t xLastWakeTime = xTaskGetTickCount();
 8002094:	f00b fcb0 	bl	800d9f8 <xTaskGetTickCount>
 8002098:	4603      	mov	r3, r0
 800209a:	60bb      	str	r3, [r7, #8]
  const TickType_t xPeriodMs = 100;
 800209c:	2364      	movs	r3, #100	; 0x64
 800209e:	60fb      	str	r3, [r7, #12]
  static TS_StateTypeDef  TS_State;
  /* Infinite loop */
  for(;;)
  {
	  BSP_TS_GetState(&TS_State);
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <Choix_mesure+0x48>)
 80020a2:	f002 ffab 	bl	8004ffc <BSP_TS_GetState>
	  if(TS_State.touchDetected){
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <Choix_mesure+0x48>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <Choix_mesure+0x38>
		  if (TS_State.touchX[0]<200) {
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <Choix_mesure+0x48>)
 80020b0:	885b      	ldrh	r3, [r3, #2]
 80020b2:	2bc7      	cmp	r3, #199	; 0xc7
 80020b4:	d803      	bhi.n	80020be <Choix_mesure+0x32>
			  type_mesure=1;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <Choix_mesure+0x4c>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e002      	b.n	80020c4 <Choix_mesure+0x38>
		  }
		  else {
			  type_mesure=0;
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <Choix_mesure+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
		  }

	  }
	  vTaskDelayUntil(&xLastWakeTime, xPeriodMs);
 80020c4:	f107 0308 	add.w	r3, r7, #8
 80020c8:	68f9      	ldr	r1, [r7, #12]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00b fac0 	bl	800d650 <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 80020d0:	e7e6      	b.n	80020a0 <Choix_mesure+0x14>
 80020d2:	bf00      	nop
 80020d4:	20000aa0 	.word	0x20000aa0
 80020d8:	20000268 	.word	0x20000268

080020dc <Modif_freq_res>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Modif_freq_res */
void Modif_freq_res(void const * argument)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Modif_freq_res */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80020e4:	f00b fc88 	bl	800d9f8 <xTaskGetTickCount>
 80020e8:	4603      	mov	r3, r0
 80020ea:	613b      	str	r3, [r7, #16]
  const TickType_t xPeriodMs = 400;
 80020ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80020f0:	617b      	str	r3, [r7, #20]
  uint16_t freq = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	81fb      	strh	r3, [r7, #14]
  uint16_t res = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	81bb      	strh	r3, [r7, #12]
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002100:	488a      	ldr	r0, [pc, #552]	; (800232c <Modif_freq_res+0x250>)
 8002102:	f006 f939 	bl	8008378 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2120      	movs	r1, #32
 800210a:	4889      	ldr	r0, [pc, #548]	; (8002330 <Modif_freq_res+0x254>)
 800210c:	f006 f934 	bl	8008378 <HAL_GPIO_WritePin>

  uint16_t* p_tab=sinus12bit_360;
 8002110:	4b88      	ldr	r3, [pc, #544]	; (8002334 <Modif_freq_res+0x258>)
 8002112:	61fb      	str	r3, [r7, #28]
  int N=360;
 8002114:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002118:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  for(;;)
  {
	  if (xQueueReceive(Queue_freqHandle,&freq,0)) {
 800211a:	4b87      	ldr	r3, [pc, #540]	; (8002338 <Modif_freq_res+0x25c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f107 010e 	add.w	r1, r7, #14
 8002122:	2200      	movs	r2, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f00a feeb 	bl	800cf00 <xQueueReceive>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 808c 	beq.w	800224a <Modif_freq_res+0x16e>
		  switch (freq) {
 8002132:	89fb      	ldrh	r3, [r7, #14]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d85e      	bhi.n	80021f6 <Modif_freq_res+0x11a>
 8002138:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <Modif_freq_res+0x64>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002159 	.word	0x08002159
 8002144:	08002173 	.word	0x08002173
 8002148:	0800218d 	.word	0x0800218d
 800214c:	080021a9 	.word	0x080021a9
 8002150:	080021c3 	.word	0x080021c3
 8002154:	080021dd 	.word	0x080021dd
			  case 0:
				htim7.Init.Period = 5555;
 8002158:	4b78      	ldr	r3, [pc, #480]	; (800233c <Modif_freq_res+0x260>)
 800215a:	f241 52b3 	movw	r2, #5555	; 0x15b3
 800215e:	60da      	str	r2, [r3, #12]
				p_tab = sinus12bit_360;
 8002160:	4b74      	ldr	r3, [pc, #464]	; (8002334 <Modif_freq_res+0x258>)
 8002162:	61fb      	str	r3, [r7, #28]
				N=360;
 8002164:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002168:	61bb      	str	r3, [r7, #24]
				freq_reel = 50;
 800216a:	4b75      	ldr	r3, [pc, #468]	; (8002340 <Modif_freq_res+0x264>)
 800216c:	2232      	movs	r2, #50	; 0x32
 800216e:	601a      	str	r2, [r3, #0]
				break;
 8002170:	e04d      	b.n	800220e <Modif_freq_res+0x132>
		  	  case 1:
				htim7.Init.Period = 1111;
 8002172:	4b72      	ldr	r3, [pc, #456]	; (800233c <Modif_freq_res+0x260>)
 8002174:	f240 4257 	movw	r2, #1111	; 0x457
 8002178:	60da      	str	r2, [r3, #12]
				p_tab = sinus12bit_360;
 800217a:	4b6e      	ldr	r3, [pc, #440]	; (8002334 <Modif_freq_res+0x258>)
 800217c:	61fb      	str	r3, [r7, #28]
				N=360;
 800217e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002182:	61bb      	str	r3, [r7, #24]
				freq_reel = 250;
 8002184:	4b6e      	ldr	r3, [pc, #440]	; (8002340 <Modif_freq_res+0x264>)
 8002186:	22fa      	movs	r2, #250	; 0xfa
 8002188:	601a      	str	r2, [r3, #0]
				break;
 800218a:	e040      	b.n	800220e <Modif_freq_res+0x132>
		  	  case 2:
		  		htim7.Init.Period = 555;
 800218c:	4b6b      	ldr	r3, [pc, #428]	; (800233c <Modif_freq_res+0x260>)
 800218e:	f240 222b 	movw	r2, #555	; 0x22b
 8002192:	60da      	str	r2, [r3, #12]
		  		p_tab = sinus12bit_360;
 8002194:	4b67      	ldr	r3, [pc, #412]	; (8002334 <Modif_freq_res+0x258>)
 8002196:	61fb      	str	r3, [r7, #28]
				N=360;
 8002198:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800219c:	61bb      	str	r3, [r7, #24]
				freq_reel = 500;
 800219e:	4b68      	ldr	r3, [pc, #416]	; (8002340 <Modif_freq_res+0x264>)
 80021a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021a4:	601a      	str	r2, [r3, #0]
				break;
 80021a6:	e032      	b.n	800220e <Modif_freq_res+0x132>
		  	  case 3:
		  		htim7.Init.Period = 555;
 80021a8:	4b64      	ldr	r3, [pc, #400]	; (800233c <Modif_freq_res+0x260>)
 80021aa:	f240 222b 	movw	r2, #555	; 0x22b
 80021ae:	60da      	str	r2, [r3, #12]
		  		p_tab = sinus12bit_180;
 80021b0:	4b64      	ldr	r3, [pc, #400]	; (8002344 <Modif_freq_res+0x268>)
 80021b2:	61fb      	str	r3, [r7, #28]
				N=180;
 80021b4:	23b4      	movs	r3, #180	; 0xb4
 80021b6:	61bb      	str	r3, [r7, #24]
				freq_reel = 1000;
 80021b8:	4b61      	ldr	r3, [pc, #388]	; (8002340 <Modif_freq_res+0x264>)
 80021ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021be:	601a      	str	r2, [r3, #0]
				break;
 80021c0:	e025      	b.n	800220e <Modif_freq_res+0x132>
		  	  case 4:
		  		htim7.Init.Period = 444;
 80021c2:	4b5e      	ldr	r3, [pc, #376]	; (800233c <Modif_freq_res+0x260>)
 80021c4:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80021c8:	60da      	str	r2, [r3, #12]
		  		p_tab = sinus12bit_90;
 80021ca:	4b5f      	ldr	r3, [pc, #380]	; (8002348 <Modif_freq_res+0x26c>)
 80021cc:	61fb      	str	r3, [r7, #28]
				N=90;
 80021ce:	235a      	movs	r3, #90	; 0x5a
 80021d0:	61bb      	str	r3, [r7, #24]
				freq_reel = 2500;
 80021d2:	4b5b      	ldr	r3, [pc, #364]	; (8002340 <Modif_freq_res+0x264>)
 80021d4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80021d8:	601a      	str	r2, [r3, #0]
				break;
 80021da:	e018      	b.n	800220e <Modif_freq_res+0x132>
		  	  case 5:
		  		htim7.Init.Period = 444;
 80021dc:	4b57      	ldr	r3, [pc, #348]	; (800233c <Modif_freq_res+0x260>)
 80021de:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80021e2:	60da      	str	r2, [r3, #12]
		  		p_tab = sinus12bit_45;
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <Modif_freq_res+0x270>)
 80021e6:	61fb      	str	r3, [r7, #28]
				N=45;
 80021e8:	232d      	movs	r3, #45	; 0x2d
 80021ea:	61bb      	str	r3, [r7, #24]
				freq_reel = 5000;
 80021ec:	4b54      	ldr	r3, [pc, #336]	; (8002340 <Modif_freq_res+0x264>)
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	601a      	str	r2, [r3, #0]
				break;
 80021f4:	e00b      	b.n	800220e <Modif_freq_res+0x132>
		  	  default:
		  		htim7.Init.Period = 5555;
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <Modif_freq_res+0x260>)
 80021f8:	f241 52b3 	movw	r2, #5555	; 0x15b3
 80021fc:	60da      	str	r2, [r3, #12]
		  		p_tab = sinus12bit_360;
 80021fe:	4b4d      	ldr	r3, [pc, #308]	; (8002334 <Modif_freq_res+0x258>)
 8002200:	61fb      	str	r3, [r7, #28]
				N=360;
 8002202:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002206:	61bb      	str	r3, [r7, #24]
				freq_reel = 50;
 8002208:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <Modif_freq_res+0x264>)
 800220a:	2232      	movs	r2, #50	; 0x32
 800220c:	601a      	str	r2, [r3, #0]
		  }

		  if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800220e:	484b      	ldr	r0, [pc, #300]	; (800233c <Modif_freq_res+0x260>)
 8002210:	f009 f8aa 	bl	800b368 <HAL_TIM_Base_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <Modif_freq_res+0x142>
			  Error_Handler();
 800221a:	f001 fbe9 	bl	80039f0 <Error_Handler>
		  }
		  if (HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1) != HAL_OK) {
 800221e:	2100      	movs	r1, #0
 8002220:	484b      	ldr	r0, [pc, #300]	; (8002350 <Modif_freq_res+0x274>)
 8002222:	f004 fc61 	bl	8006ae8 <HAL_DAC_Stop_DMA>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <Modif_freq_res+0x154>
		  	Error_Handler();
 800222c:	f001 fbe0 	bl	80039f0 <Error_Handler>
		  		  }
		  if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) p_tab, N, DAC_ALIGN_12B_R) != HAL_OK) {
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2200      	movs	r2, #0
 8002234:	9200      	str	r2, [sp, #0]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	2100      	movs	r1, #0
 800223a:	4845      	ldr	r0, [pc, #276]	; (8002350 <Modif_freq_res+0x274>)
 800223c:	f004 fb88 	bl	8006950 <HAL_DAC_Start_DMA>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <Modif_freq_res+0x16e>
			  Error_Handler();
 8002246:	f001 fbd3 	bl	80039f0 <Error_Handler>
		  }
	  }
	  if (xQueueReceive(Queue_resHandle,&res,0)) {
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <Modif_freq_res+0x278>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f107 010c 	add.w	r1, r7, #12
 8002252:	2200      	movs	r2, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f00a fe53 	bl	800cf00 <xQueueReceive>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d05c      	beq.n	800231a <Modif_freq_res+0x23e>
		  switch (res) {
 8002260:	89bb      	ldrh	r3, [r7, #12]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d849      	bhi.n	80022fa <Modif_freq_res+0x21e>
 8002266:	a201      	add	r2, pc, #4	; (adr r2, 800226c <Modif_freq_res+0x190>)
 8002268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226c:	0800227d 	.word	0x0800227d
 8002270:	0800229d 	.word	0x0800229d
 8002274:	080022bd 	.word	0x080022bd
 8002278:	080022dd 	.word	0x080022dd
		  	  case 0:
				  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002282:	482a      	ldr	r0, [pc, #168]	; (800232c <Modif_freq_res+0x250>)
 8002284:	f006 f878 	bl	8008378 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	2120      	movs	r1, #32
 800228c:	4828      	ldr	r0, [pc, #160]	; (8002330 <Modif_freq_res+0x254>)
 800228e:	f006 f873 	bl	8008378 <HAL_GPIO_WritePin>
				  res_reel=3300;
 8002292:	4b31      	ldr	r3, [pc, #196]	; (8002358 <Modif_freq_res+0x27c>)
 8002294:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002298:	601a      	str	r2, [r3, #0]
		  		  break;
 800229a:	e03f      	b.n	800231c <Modif_freq_res+0x240>
		  	  case 1:
				  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 1);
 800229c:	2201      	movs	r2, #1
 800229e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022a2:	4822      	ldr	r0, [pc, #136]	; (800232c <Modif_freq_res+0x250>)
 80022a4:	f006 f868 	bl	8008378 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2120      	movs	r1, #32
 80022ac:	4820      	ldr	r0, [pc, #128]	; (8002330 <Modif_freq_res+0x254>)
 80022ae:	f006 f863 	bl	8008378 <HAL_GPIO_WritePin>
				  res_reel=10000;
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <Modif_freq_res+0x27c>)
 80022b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80022b8:	601a      	str	r2, [r3, #0]
		  		  break;
 80022ba:	e02f      	b.n	800231c <Modif_freq_res+0x240>
		  	  case 2:
				  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022c2:	481a      	ldr	r0, [pc, #104]	; (800232c <Modif_freq_res+0x250>)
 80022c4:	f006 f858 	bl	8008378 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, 1);
 80022c8:	2201      	movs	r2, #1
 80022ca:	2120      	movs	r1, #32
 80022cc:	4818      	ldr	r0, [pc, #96]	; (8002330 <Modif_freq_res+0x254>)
 80022ce:	f006 f853 	bl	8008378 <HAL_GPIO_WritePin>
				  res_reel=33000;
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <Modif_freq_res+0x27c>)
 80022d4:	f248 02e8 	movw	r2, #33000	; 0x80e8
 80022d8:	601a      	str	r2, [r3, #0]
		  		  break;
 80022da:	e01f      	b.n	800231c <Modif_freq_res+0x240>
		  	  case 3:
				  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 1);
 80022dc:	2201      	movs	r2, #1
 80022de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022e2:	4812      	ldr	r0, [pc, #72]	; (800232c <Modif_freq_res+0x250>)
 80022e4:	f006 f848 	bl	8008378 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, 1);
 80022e8:	2201      	movs	r2, #1
 80022ea:	2120      	movs	r1, #32
 80022ec:	4810      	ldr	r0, [pc, #64]	; (8002330 <Modif_freq_res+0x254>)
 80022ee:	f006 f843 	bl	8008378 <HAL_GPIO_WritePin>
				  res_reel=100000;
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <Modif_freq_res+0x27c>)
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <Modif_freq_res+0x280>)
 80022f6:	601a      	str	r2, [r3, #0]
		  		  break;
 80022f8:	e010      	b.n	800231c <Modif_freq_res+0x240>
		  	  default:
				  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002300:	480a      	ldr	r0, [pc, #40]	; (800232c <Modif_freq_res+0x250>)
 8002302:	f006 f839 	bl	8008378 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2120      	movs	r1, #32
 800230a:	4809      	ldr	r0, [pc, #36]	; (8002330 <Modif_freq_res+0x254>)
 800230c:	f006 f834 	bl	8008378 <HAL_GPIO_WritePin>
				  res_reel=3300;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <Modif_freq_res+0x27c>)
 8002312:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e000      	b.n	800231c <Modif_freq_res+0x240>
		  }
	  }
 800231a:	bf00      	nop
	  vTaskDelayUntil(&xLastWakeTime, xPeriodMs);
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	6979      	ldr	r1, [r7, #20]
 8002322:	4618      	mov	r0, r3
 8002324:	f00b f994 	bl	800d650 <vTaskDelayUntil>
	  if (xQueueReceive(Queue_freqHandle,&freq,0)) {
 8002328:	e6f7      	b.n	800211a <Modif_freq_res+0x3e>
 800232a:	bf00      	nop
 800232c:	40021c00 	.word	0x40021c00
 8002330:	40021000 	.word	0x40021000
 8002334:	20000270 	.word	0x20000270
 8002338:	200007dc 	.word	0x200007dc
 800233c:	200010ac 	.word	0x200010ac
 8002340:	20000000 	.word	0x20000000
 8002344:	20000540 	.word	0x20000540
 8002348:	200006a8 	.word	0x200006a8
 800234c:	2000075c 	.word	0x2000075c
 8002350:	20000168 	.word	0x20000168
 8002354:	200007e0 	.word	0x200007e0
 8002358:	20000004 	.word	0x20000004
 800235c:	000186a0 	.word	0x000186a0

08002360 <Ges_freq_res>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ges_freq_res */
void Ges_freq_res(void const * argument)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ges_freq_res */
	// Cette tache permet de choisir la resistance dans le multiplexeur/demultiplexeur et la
	// frequence

	TickType_t xLastWakeTime = xTaskGetTickCount();
 8002368:	f00b fb46 	bl	800d9f8 <xTaskGetTickCount>
 800236c:	4603      	mov	r3, r0
 800236e:	60fb      	str	r3, [r7, #12]
	const TickType_t xPeriodMs = 2000;
 8002370:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002374:	613b      	str	r3, [r7, #16]

	uint16_t freq = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	817b      	strh	r3, [r7, #10]
	uint16_t res = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	813b      	strh	r3, [r7, #8]
	uint16_t freq_current = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	82fb      	strh	r3, [r7, #22]
	uint16_t res_current = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	82bb      	strh	r3, [r7, #20]

	/* Infinite loop */
	for(;;)
	{

	  if (type_mesure == 0) { //pour mesure R
 8002386:	4b72      	ldr	r3, [pc, #456]	; (8002550 <Ges_freq_res+0x1f0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d140      	bne.n	8002410 <Ges_freq_res+0xb0>
		  freq = 5; // meilleur precision
 800238e:	2305      	movs	r3, #5
 8002390:	817b      	strh	r3, [r7, #10]
		  if (stat_mesure==1) {
 8002392:	4b70      	ldr	r3, [pc, #448]	; (8002554 <Ges_freq_res+0x1f4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d114      	bne.n	80023c4 <Ges_freq_res+0x64>
			  HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 1);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023a0:	486d      	ldr	r0, [pc, #436]	; (8002558 <Ges_freq_res+0x1f8>)
 80023a2:	f005 ffe9 	bl	8008378 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ac:	486a      	ldr	r0, [pc, #424]	; (8002558 <Ges_freq_res+0x1f8>)
 80023ae:	f005 ffe3 	bl	8008378 <HAL_GPIO_WritePin>
			  if (res_current<3) {
 80023b2:	8abb      	ldrh	r3, [r7, #20]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	f200 808d 	bhi.w	80024d4 <Ges_freq_res+0x174>
			  	  res++;
 80023ba:	893b      	ldrh	r3, [r7, #8]
 80023bc:	3301      	adds	r3, #1
 80023be:	b29b      	uxth	r3, r3
 80023c0:	813b      	strh	r3, [r7, #8]
 80023c2:	e087      	b.n	80024d4 <Ges_freq_res+0x174>
			  }
		  }
		  else if (stat_mesure==-1) {
 80023c4:	4b63      	ldr	r3, [pc, #396]	; (8002554 <Ges_freq_res+0x1f4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023cc:	d113      	bne.n	80023f6 <Ges_freq_res+0x96>
			  HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023d4:	4860      	ldr	r0, [pc, #384]	; (8002558 <Ges_freq_res+0x1f8>)
 80023d6:	f005 ffcf 	bl	8008378 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 1);
 80023da:	2201      	movs	r2, #1
 80023dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023e0:	485d      	ldr	r0, [pc, #372]	; (8002558 <Ges_freq_res+0x1f8>)
 80023e2:	f005 ffc9 	bl	8008378 <HAL_GPIO_WritePin>
			  if (res_current>0) {
 80023e6:	8abb      	ldrh	r3, [r7, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d073      	beq.n	80024d4 <Ges_freq_res+0x174>
			  	  res--;
 80023ec:	893b      	ldrh	r3, [r7, #8]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	813b      	strh	r3, [r7, #8]
 80023f4:	e06e      	b.n	80024d4 <Ges_freq_res+0x174>
			  }
		  }
		  else {
		  		  HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023fc:	4856      	ldr	r0, [pc, #344]	; (8002558 <Ges_freq_res+0x1f8>)
 80023fe:	f005 ffbb 	bl	8008378 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002408:	4853      	ldr	r0, [pc, #332]	; (8002558 <Ges_freq_res+0x1f8>)
 800240a:	f005 ffb5 	bl	8008378 <HAL_GPIO_WritePin>
 800240e:	e061      	b.n	80024d4 <Ges_freq_res+0x174>
	  }

	  //


	  else if (type_mesure == 1) { //pour mesure C
 8002410:	4b4f      	ldr	r3, [pc, #316]	; (8002550 <Ges_freq_res+0x1f0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d151      	bne.n	80024bc <Ges_freq_res+0x15c>
		  if (stat_mesure==1) {
 8002418:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <Ges_freq_res+0x1f4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d11d      	bne.n	800245c <Ges_freq_res+0xfc>
			  HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 1);
 8002420:	2201      	movs	r2, #1
 8002422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002426:	484c      	ldr	r0, [pc, #304]	; (8002558 <Ges_freq_res+0x1f8>)
 8002428:	f005 ffa6 	bl	8008378 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002432:	4849      	ldr	r0, [pc, #292]	; (8002558 <Ges_freq_res+0x1f8>)
 8002434:	f005 ffa0 	bl	8008378 <HAL_GPIO_WritePin>
			  if (res_current<3) {
 8002438:	8abb      	ldrh	r3, [r7, #20]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d804      	bhi.n	8002448 <Ges_freq_res+0xe8>
				  res++;
 800243e:	893b      	ldrh	r3, [r7, #8]
 8002440:	3301      	adds	r3, #1
 8002442:	b29b      	uxth	r3, r3
 8002444:	813b      	strh	r3, [r7, #8]
 8002446:	e045      	b.n	80024d4 <Ges_freq_res+0x174>
			  }
			  else {
				  if (freq_current<5) {
 8002448:	8afb      	ldrh	r3, [r7, #22]
 800244a:	2b04      	cmp	r3, #4
 800244c:	d842      	bhi.n	80024d4 <Ges_freq_res+0x174>
					  freq++;
 800244e:	897b      	ldrh	r3, [r7, #10]
 8002450:	3301      	adds	r3, #1
 8002452:	b29b      	uxth	r3, r3
 8002454:	817b      	strh	r3, [r7, #10]
					  res = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	813b      	strh	r3, [r7, #8]
 800245a:	e03b      	b.n	80024d4 <Ges_freq_res+0x174>
				  }
			  }
		  }
		  else if (stat_mesure==-1) {
 800245c:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <Ges_freq_res+0x1f4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002464:	d11d      	bne.n	80024a2 <Ges_freq_res+0x142>
			  HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800246c:	483a      	ldr	r0, [pc, #232]	; (8002558 <Ges_freq_res+0x1f8>)
 800246e:	f005 ff83 	bl	8008378 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 1);
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002478:	4837      	ldr	r0, [pc, #220]	; (8002558 <Ges_freq_res+0x1f8>)
 800247a:	f005 ff7d 	bl	8008378 <HAL_GPIO_WritePin>
			  if (res_current>0) {
 800247e:	8abb      	ldrh	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <Ges_freq_res+0x12e>
				  res--;
 8002484:	893b      	ldrh	r3, [r7, #8]
 8002486:	3b01      	subs	r3, #1
 8002488:	b29b      	uxth	r3, r3
 800248a:	813b      	strh	r3, [r7, #8]
 800248c:	e022      	b.n	80024d4 <Ges_freq_res+0x174>
			  }
			  else {
				  if (freq_current>0) {
 800248e:	8afb      	ldrh	r3, [r7, #22]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01f      	beq.n	80024d4 <Ges_freq_res+0x174>
					  freq--;
 8002494:	897b      	ldrh	r3, [r7, #10]
 8002496:	3b01      	subs	r3, #1
 8002498:	b29b      	uxth	r3, r3
 800249a:	817b      	strh	r3, [r7, #10]
					  res = 3;
 800249c:	2303      	movs	r3, #3
 800249e:	813b      	strh	r3, [r7, #8]
 80024a0:	e018      	b.n	80024d4 <Ges_freq_res+0x174>
				  }
			  }
		  }
		  else {
		  		  HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024a8:	482b      	ldr	r0, [pc, #172]	; (8002558 <Ges_freq_res+0x1f8>)
 80024aa:	f005 ff65 	bl	8008378 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024b4:	4828      	ldr	r0, [pc, #160]	; (8002558 <Ges_freq_res+0x1f8>)
 80024b6:	f005 ff5f 	bl	8008378 <HAL_GPIO_WritePin>
 80024ba:	e00b      	b.n	80024d4 <Ges_freq_res+0x174>
		  	  }
	  }
	  else {
		  HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024c2:	4825      	ldr	r0, [pc, #148]	; (8002558 <Ges_freq_res+0x1f8>)
 80024c4:	f005 ff58 	bl	8008378 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ce:	4822      	ldr	r0, [pc, #136]	; (8002558 <Ges_freq_res+0x1f8>)
 80024d0:	f005 ff52 	bl	8008378 <HAL_GPIO_WritePin>
	  }

	  //

	  if (freq_current!=freq) {
 80024d4:	897b      	ldrh	r3, [r7, #10]
 80024d6:	8afa      	ldrh	r2, [r7, #22]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d007      	beq.n	80024ec <Ges_freq_res+0x18c>
		  xQueueSend(Queue_freqHandle,&freq,10);
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <Ges_freq_res+0x1fc>)
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	f107 010a 	add.w	r1, r7, #10
 80024e4:	2300      	movs	r3, #0
 80024e6:	220a      	movs	r2, #10
 80024e8:	f00a fc04 	bl	800ccf4 <xQueueGenericSend>
	  }
	  if (res_current!=res) {
 80024ec:	893b      	ldrh	r3, [r7, #8]
 80024ee:	8aba      	ldrh	r2, [r7, #20]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d007      	beq.n	8002504 <Ges_freq_res+0x1a4>
		  xQueueSend(Queue_resHandle,&res,10);
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <Ges_freq_res+0x200>)
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	f107 0108 	add.w	r1, r7, #8
 80024fc:	2300      	movs	r3, #0
 80024fe:	220a      	movs	r2, #10
 8002500:	f00a fbf8 	bl	800ccf4 <xQueueGenericSend>
	  }

	  //

	  freq_current=freq;
 8002504:	897b      	ldrh	r3, [r7, #10]
 8002506:	82fb      	strh	r3, [r7, #22]
	  res_current=res;
 8002508:	893b      	ldrh	r3, [r7, #8]
 800250a:	82bb      	strh	r3, [r7, #20]

	  //

	  if (((res_current==0) &&(freq_current==0)&&(stat_mesure))||((res_current==3) &&(freq_current==5)&&(stat_mesure))) {
 800250c:	8abb      	ldrh	r3, [r7, #20]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <Ges_freq_res+0x1c0>
 8002512:	8afb      	ldrh	r3, [r7, #22]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d103      	bne.n	8002520 <Ges_freq_res+0x1c0>
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <Ges_freq_res+0x1f4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <Ges_freq_res+0x1d4>
 8002520:	8abb      	ldrh	r3, [r7, #20]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d10a      	bne.n	800253c <Ges_freq_res+0x1dc>
 8002526:	8afb      	ldrh	r3, [r7, #22]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d107      	bne.n	800253c <Ges_freq_res+0x1dc>
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <Ges_freq_res+0x1f4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <Ges_freq_res+0x1dc>
		  out_boundarie = 1;
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <Ges_freq_res+0x204>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e002      	b.n	8002542 <Ges_freq_res+0x1e2>
	  }
	  else {
		  out_boundarie = 0;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <Ges_freq_res+0x204>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
	  }

	  vTaskDelayUntil(&xLastWakeTime, xPeriodMs);
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	6939      	ldr	r1, [r7, #16]
 8002548:	4618      	mov	r0, r3
 800254a:	f00b f881 	bl	800d650 <vTaskDelayUntil>
	  if (type_mesure == 0) { //pour mesure R
 800254e:	e71a      	b.n	8002386 <Ges_freq_res+0x26>
 8002550:	20000268 	.word	0x20000268
 8002554:	20000264 	.word	0x20000264
 8002558:	40021c00 	.word	0x40021c00
 800255c:	200007dc 	.word	0x200007dc
 8002560:	200007e0 	.word	0x200007e0
 8002564:	2000026c 	.word	0x2000026c

08002568 <Calcul_val>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Calcul_val */
void Calcul_val(void const * argument)
{
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Calcul_val */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 8002570:	f00b fa42 	bl	800d9f8 <xTaskGetTickCount>
 8002574:	4603      	mov	r3, r0
 8002576:	613b      	str	r3, [r7, #16]
  const TickType_t xPeriodMs = 1000;
 8002578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257c:	617b      	str	r3, [r7, #20]

  uint32_t res_est = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
  uint32_t cond_est = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  if (stat_mesure==0) {
 8002586:	4b68      	ldr	r3, [pc, #416]	; (8002728 <Calcul_val+0x1c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 80b6 	bne.w	80026fc <Calcul_val+0x194>
		  if (type_mesure==0) {
 8002590:	4b66      	ldr	r3, [pc, #408]	; (800272c <Calcul_val+0x1c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d143      	bne.n	8002620 <Calcul_val+0xb8>
			  res_est = (uint32_t)((((float)(facteur_corection_res))/1000*(float)res_reel)/(((float)(tension_max-tension_cc))/((float)(tension_mes+1))-1.0+0.01));
 8002598:	4b65      	ldr	r3, [pc, #404]	; (8002730 <Calcul_val+0x1c8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a4:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002734 <Calcul_val+0x1cc>
 80025a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ac:	ee17 0a90 	vmov	r0, s15
 80025b0:	f7fd ffe2 	bl	8000578 <__aeabi_f2d>
 80025b4:	4604      	mov	r4, r0
 80025b6:	460d      	mov	r5, r1
 80025b8:	4b5f      	ldr	r3, [pc, #380]	; (8002738 <Calcul_val+0x1d0>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c6:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800273c <Calcul_val+0x1d4>
 80025ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80025ce:	ee16 0a90 	vmov	r0, s13
 80025d2:	f7fd ffd1 	bl	8000578 <__aeabi_f2d>
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	4b59      	ldr	r3, [pc, #356]	; (8002740 <Calcul_val+0x1d8>)
 80025dc:	f7fd fe6c 	bl	80002b8 <__aeabi_dsub>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	a349      	add	r3, pc, #292	; (adr r3, 8002710 <Calcul_val+0x1a8>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	f7fd fe65 	bl	80002bc <__adddf3>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f7fe f93f 	bl	800087c <__aeabi_ddiv>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	f7fe fae7 	bl	8000bd8 <__aeabi_d2uiz>
 800260a:	4603      	mov	r3, r0
 800260c:	60fb      	str	r3, [r7, #12]
			  xQueueSend(Queue_res_estHandle,&res_est,10);
 800260e:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <Calcul_val+0x1dc>)
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	f107 010c 	add.w	r1, r7, #12
 8002616:	2300      	movs	r3, #0
 8002618:	220a      	movs	r2, #10
 800261a:	f00a fb6b 	bl	800ccf4 <xQueueGenericSend>
 800261e:	e06d      	b.n	80026fc <Calcul_val+0x194>
		  }
		  else if (type_mesure==1){
 8002620:	4b42      	ldr	r3, [pc, #264]	; (800272c <Calcul_val+0x1c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d169      	bne.n	80026fc <Calcul_val+0x194>
			  cond_est = (uint32_t)(facteur_corection_cond*1000000000.0/(2*3.1415*(float)res_reel*(float)freq_reel)*sqrt(
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <Calcul_val+0x1c8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002634:	ee17 0a90 	vmov	r0, s15
 8002638:	f7fd ff9e 	bl	8000578 <__aeabi_f2d>
 800263c:	a336      	add	r3, pc, #216	; (adr r3, 8002718 <Calcul_val+0x1b0>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fd fff1 	bl	8000628 <__aeabi_dmul>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4614      	mov	r4, r2
 800264c:	461d      	mov	r5, r3
 800264e:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <Calcul_val+0x1e0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265a:	ee17 0a90 	vmov	r0, s15
 800265e:	f7fd ff8b 	bl	8000578 <__aeabi_f2d>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4620      	mov	r0, r4
 8002668:	4629      	mov	r1, r5
 800266a:	f7fd ffdd 	bl	8000628 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	a12b      	add	r1, pc, #172	; (adr r1, 8002720 <Calcul_val+0x1b8>)
 8002674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002678:	f7fe f900 	bl	800087c <__aeabi_ddiv>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4614      	mov	r4, r2
 8002682:	461d      	mov	r5, r3
					  (((float)(tension_max-tension_cc)))/(((float)(tension_mes+1)))*(
 8002684:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <Calcul_val+0x1d0>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002692:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800273c <Calcul_val+0x1d4>
 8002696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							  ((float)(tension_max-tension_cc))/((float)(tension_mes+1)))-1)	);
 800269a:	4b27      	ldr	r3, [pc, #156]	; (8002738 <Calcul_val+0x1d0>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	ee07 3a90 	vmov	s15, r3
 80026a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026a8:	ed9f 6a24 	vldr	s12, [pc, #144]	; 800273c <Calcul_val+0x1d4>
 80026ac:	eec6 7a26 	vdiv.f32	s15, s12, s13
					  (((float)(tension_max-tension_cc)))/(((float)(tension_mes+1)))*(
 80026b0:	ee67 7a27 	vmul.f32	s15, s14, s15
							  ((float)(tension_max-tension_cc))/((float)(tension_mes+1)))-1)	);
 80026b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
			  cond_est = (uint32_t)(facteur_corection_cond*1000000000.0/(2*3.1415*(float)res_reel*(float)freq_reel)*sqrt(
 80026bc:	ee17 0a90 	vmov	r0, s15
 80026c0:	f7fd ff5a 	bl	8000578 <__aeabi_f2d>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	ec43 2b10 	vmov	d0, r2, r3
 80026cc:	f00c fefc 	bl	800f4c8 <sqrt>
 80026d0:	ec53 2b10 	vmov	r2, r3, d0
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd ffa6 	bl	8000628 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe fa78 	bl	8000bd8 <__aeabi_d2uiz>
 80026e8:	4603      	mov	r3, r0
 80026ea:	60bb      	str	r3, [r7, #8]
			  xQueueSend(Queue_cond_estHandle,&cond_est,10);
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <Calcul_val+0x1e4>)
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	f107 0108 	add.w	r1, r7, #8
 80026f4:	2300      	movs	r3, #0
 80026f6:	220a      	movs	r2, #10
 80026f8:	f00a fafc 	bl	800ccf4 <xQueueGenericSend>
		  }
	  }
	  vTaskDelayUntil(&xLastWakeTime, xPeriodMs);
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	6979      	ldr	r1, [r7, #20]
 8002702:	4618      	mov	r0, r3
 8002704:	f00a ffa4 	bl	800d650 <vTaskDelayUntil>
	  if (stat_mesure==0) {
 8002708:	e73d      	b.n	8002586 <Calcul_val+0x1e>
 800270a:	bf00      	nop
 800270c:	f3af 8000 	nop.w
 8002710:	47ae147b 	.word	0x47ae147b
 8002714:	3f847ae1 	.word	0x3f847ae1
 8002718:	c083126f 	.word	0xc083126f
 800271c:	401921ca 	.word	0x401921ca
 8002720:	4b400000 	.word	0x4b400000
 8002724:	426efede 	.word	0x426efede
 8002728:	20000264 	.word	0x20000264
 800272c:	20000268 	.word	0x20000268
 8002730:	20000004 	.word	0x20000004
 8002734:	3f5c28f6 	.word	0x3f5c28f6
 8002738:	20000008 	.word	0x20000008
 800273c:	442b4000 	.word	0x442b4000
 8002740:	3ff00000 	.word	0x3ff00000
 8002744:	200007e8 	.word	0x200007e8
 8002748:	20000000 	.word	0x20000000
 800274c:	200007e4 	.word	0x200007e4

08002750 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800275a:	20c8      	movs	r0, #200	; 0xc8
 800275c:	f001 fc58 	bl	8004010 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002760:	f000 fa7a 	bl	8002c58 <ft5336_I2C_InitializeIfRequired>
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8002794:	2300      	movs	r3, #0
 8002796:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002798:	f000 fa5e 	bl	8002c58 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e010      	b.n	80027c4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	21a8      	movs	r1, #168	; 0xa8
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 fc13 	bl	8003fd4 <TS_IO_Read>
 80027ae:	4603      	mov	r3, r0
 80027b0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80027b2:	7b7b      	ldrb	r3, [r7, #13]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b51      	cmp	r3, #81	; 0x51
 80027b8:	d101      	bne.n	80027be <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	3301      	adds	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d802      	bhi.n	80027d0 <ft5336_ReadID+0x4e>
 80027ca:	7bbb      	ldrb	r3, [r7, #14]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0e8      	beq.n	80027a2 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80027d0:	7b7b      	ldrb	r3, [r7, #13]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	b29b      	uxth	r3, r3
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fa44 	bl	8002c78 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f932 	bl	8002a5c <ft5336_TS_DisableIT>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2102      	movs	r1, #2
 8002814:	4618      	mov	r0, r3
 8002816:	f001 fbdd 	bl	8003fd4 <TS_IO_Read>
 800281a:	4603      	mov	r3, r0
 800281c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	b2db      	uxtb	r3, r3
 8002828:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b05      	cmp	r3, #5
 8002830:	d901      	bls.n	8002836 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <ft5336_TS_DetectTouch+0x50>)
 800283c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800283e:	4b04      	ldr	r3, [pc, #16]	; (8002850 <ft5336_TS_DetectTouch+0x50>)
 8002840:	2200      	movs	r2, #0
 8002842:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	b2db      	uxtb	r3, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000acc 	.word	0x20000acc

08002854 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8002876:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <ft5336_TS_GetXY+0x1d8>)
 8002878:	789a      	ldrb	r2, [r3, #2]
 800287a:	4b6c      	ldr	r3, [pc, #432]	; (8002a2c <ft5336_TS_GetXY+0x1d8>)
 800287c:	785b      	ldrb	r3, [r3, #1]
 800287e:	429a      	cmp	r2, r3
 8002880:	f080 80cf 	bcs.w	8002a22 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8002884:	4b69      	ldr	r3, [pc, #420]	; (8002a2c <ft5336_TS_GetXY+0x1d8>)
 8002886:	789b      	ldrb	r3, [r3, #2]
 8002888:	2b09      	cmp	r3, #9
 800288a:	d871      	bhi.n	8002970 <ft5336_TS_GetXY+0x11c>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <ft5336_TS_GetXY+0x40>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028bd 	.word	0x080028bd
 8002898:	080028cf 	.word	0x080028cf
 800289c:	080028e1 	.word	0x080028e1
 80028a0:	080028f3 	.word	0x080028f3
 80028a4:	08002905 	.word	0x08002905
 80028a8:	08002917 	.word	0x08002917
 80028ac:	08002929 	.word	0x08002929
 80028b0:	0800293b 	.word	0x0800293b
 80028b4:	0800294d 	.word	0x0800294d
 80028b8:	0800295f 	.word	0x0800295f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80028bc:	2304      	movs	r3, #4
 80028be:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80028c0:	2303      	movs	r3, #3
 80028c2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80028c4:	2306      	movs	r3, #6
 80028c6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80028c8:	2305      	movs	r3, #5
 80028ca:	753b      	strb	r3, [r7, #20]
      break;
 80028cc:	e051      	b.n	8002972 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80028ce:	230a      	movs	r3, #10
 80028d0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80028d2:	2309      	movs	r3, #9
 80028d4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80028d6:	230c      	movs	r3, #12
 80028d8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80028da:	230b      	movs	r3, #11
 80028dc:	753b      	strb	r3, [r7, #20]
      break;
 80028de:	e048      	b.n	8002972 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80028e0:	2310      	movs	r3, #16
 80028e2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80028e4:	230f      	movs	r3, #15
 80028e6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80028e8:	2312      	movs	r3, #18
 80028ea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80028ec:	2311      	movs	r3, #17
 80028ee:	753b      	strb	r3, [r7, #20]
      break;
 80028f0:	e03f      	b.n	8002972 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80028f2:	2316      	movs	r3, #22
 80028f4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80028f6:	2315      	movs	r3, #21
 80028f8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80028fa:	2318      	movs	r3, #24
 80028fc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80028fe:	2317      	movs	r3, #23
 8002900:	753b      	strb	r3, [r7, #20]
      break;
 8002902:	e036      	b.n	8002972 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8002904:	231c      	movs	r3, #28
 8002906:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8002908:	231b      	movs	r3, #27
 800290a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800290c:	231e      	movs	r3, #30
 800290e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8002910:	231d      	movs	r3, #29
 8002912:	753b      	strb	r3, [r7, #20]
      break;
 8002914:	e02d      	b.n	8002972 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8002916:	2322      	movs	r3, #34	; 0x22
 8002918:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800291a:	2321      	movs	r3, #33	; 0x21
 800291c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800291e:	2324      	movs	r3, #36	; 0x24
 8002920:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8002922:	2323      	movs	r3, #35	; 0x23
 8002924:	753b      	strb	r3, [r7, #20]
      break;
 8002926:	e024      	b.n	8002972 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8002928:	2328      	movs	r3, #40	; 0x28
 800292a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800292c:	2327      	movs	r3, #39	; 0x27
 800292e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8002930:	232a      	movs	r3, #42	; 0x2a
 8002932:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8002934:	2329      	movs	r3, #41	; 0x29
 8002936:	753b      	strb	r3, [r7, #20]
      break;
 8002938:	e01b      	b.n	8002972 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800293a:	232e      	movs	r3, #46	; 0x2e
 800293c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800293e:	232d      	movs	r3, #45	; 0x2d
 8002940:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8002942:	2330      	movs	r3, #48	; 0x30
 8002944:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8002946:	232f      	movs	r3, #47	; 0x2f
 8002948:	753b      	strb	r3, [r7, #20]
      break;
 800294a:	e012      	b.n	8002972 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800294c:	2334      	movs	r3, #52	; 0x34
 800294e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8002950:	2333      	movs	r3, #51	; 0x33
 8002952:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8002954:	2336      	movs	r3, #54	; 0x36
 8002956:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8002958:	2335      	movs	r3, #53	; 0x35
 800295a:	753b      	strb	r3, [r7, #20]
      break;
 800295c:	e009      	b.n	8002972 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800295e:	233a      	movs	r3, #58	; 0x3a
 8002960:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8002962:	2339      	movs	r3, #57	; 0x39
 8002964:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8002966:	233c      	movs	r3, #60	; 0x3c
 8002968:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800296a:	233b      	movs	r3, #59	; 0x3b
 800296c:	753b      	strb	r3, [r7, #20]
      break;
 800296e:	e000      	b.n	8002972 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002970:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8002972:	89fb      	ldrh	r3, [r7, #14]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	7dfa      	ldrb	r2, [r7, #23]
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f001 fb2a 	bl	8003fd4 <TS_IO_Read>
 8002980:	4603      	mov	r3, r0
 8002982:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	b29a      	uxth	r2, r3
 800298a:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <ft5336_TS_GetXY+0x1dc>)
 800298c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800298e:	89fb      	ldrh	r3, [r7, #14]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	7dba      	ldrb	r2, [r7, #22]
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f001 fb1c 	bl	8003fd4 <TS_IO_Read>
 800299c:	4603      	mov	r3, r0
 800299e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029aa:	b21a      	sxth	r2, r3
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <ft5336_TS_GetXY+0x1dc>)
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	4313      	orrs	r3, r2
 80029b4:	b21b      	sxth	r3, r3
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <ft5336_TS_GetXY+0x1dc>)
 80029ba:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <ft5336_TS_GetXY+0x1dc>)
 80029be:	881a      	ldrh	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80029c4:	89fb      	ldrh	r3, [r7, #14]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	7d7a      	ldrb	r2, [r7, #21]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 fb01 	bl	8003fd4 <TS_IO_Read>
 80029d2:	4603      	mov	r3, r0
 80029d4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	b29a      	uxth	r2, r3
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <ft5336_TS_GetXY+0x1dc>)
 80029de:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80029e0:	89fb      	ldrh	r3, [r7, #14]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	7d3a      	ldrb	r2, [r7, #20]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 faf3 	bl	8003fd4 <TS_IO_Read>
 80029ee:	4603      	mov	r3, r0
 80029f0:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029fc:	b21a      	sxth	r2, r3
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <ft5336_TS_GetXY+0x1dc>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b21b      	sxth	r3, r3
 8002a04:	4313      	orrs	r3, r2
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <ft5336_TS_GetXY+0x1dc>)
 8002a0c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <ft5336_TS_GetXY+0x1dc>)
 8002a10:	881a      	ldrh	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <ft5336_TS_GetXY+0x1d8>)
 8002a18:	789b      	ldrb	r3, [r3, #2]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <ft5336_TS_GetXY+0x1d8>)
 8002a20:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000acc 	.word	0x20000acc
 8002a30:	20000ad0 	.word	0x20000ad0

08002a34 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	21a4      	movs	r1, #164	; 0xa4
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 faa6 	bl	8003fa0 <TS_IO_Write>
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	21a4      	movs	r1, #164	; 0xa4
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fa92 	bl	8003fa0 <TS_IO_Write>
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	6039      	str	r1, [r7, #0]
 8002abc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f001 fa83 	bl	8003fd4 <TS_IO_Read>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	601a      	str	r2, [r3, #0]
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4603      	mov	r3, r0
 8002af2:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8002b04:	4b4d      	ldr	r3, [pc, #308]	; (8002c3c <ft5336_TS_GetTouchInfo+0x158>)
 8002b06:	785b      	ldrb	r3, [r3, #1]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	f080 8090 	bcs.w	8002c32 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	d85d      	bhi.n	8002bd4 <ft5336_TS_GetTouchInfo+0xf0>
 8002b18:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <ft5336_TS_GetTouchInfo+0x3c>)
 8002b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1e:	bf00      	nop
 8002b20:	08002b49 	.word	0x08002b49
 8002b24:	08002b57 	.word	0x08002b57
 8002b28:	08002b65 	.word	0x08002b65
 8002b2c:	08002b73 	.word	0x08002b73
 8002b30:	08002b81 	.word	0x08002b81
 8002b34:	08002b8f 	.word	0x08002b8f
 8002b38:	08002b9d 	.word	0x08002b9d
 8002b3c:	08002bab 	.word	0x08002bab
 8002b40:	08002bb9 	.word	0x08002bb9
 8002b44:	08002bc7 	.word	0x08002bc7
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8002b4c:	2307      	movs	r3, #7
 8002b4e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8002b50:	2308      	movs	r3, #8
 8002b52:	757b      	strb	r3, [r7, #21]
      break;
 8002b54:	e03f      	b.n	8002bd6 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8002b56:	2309      	movs	r3, #9
 8002b58:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8002b5a:	230d      	movs	r3, #13
 8002b5c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8002b5e:	230e      	movs	r3, #14
 8002b60:	757b      	strb	r3, [r7, #21]
      break;
 8002b62:	e038      	b.n	8002bd6 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8002b64:	230f      	movs	r3, #15
 8002b66:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8002b68:	2313      	movs	r3, #19
 8002b6a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8002b6c:	2314      	movs	r3, #20
 8002b6e:	757b      	strb	r3, [r7, #21]
      break;
 8002b70:	e031      	b.n	8002bd6 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8002b72:	2315      	movs	r3, #21
 8002b74:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8002b76:	2319      	movs	r3, #25
 8002b78:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8002b7a:	231a      	movs	r3, #26
 8002b7c:	757b      	strb	r3, [r7, #21]
      break;
 8002b7e:	e02a      	b.n	8002bd6 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8002b80:	231b      	movs	r3, #27
 8002b82:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8002b84:	231f      	movs	r3, #31
 8002b86:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	757b      	strb	r3, [r7, #21]
      break;
 8002b8c:	e023      	b.n	8002bd6 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8002b8e:	2321      	movs	r3, #33	; 0x21
 8002b90:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8002b92:	2325      	movs	r3, #37	; 0x25
 8002b94:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8002b96:	2326      	movs	r3, #38	; 0x26
 8002b98:	757b      	strb	r3, [r7, #21]
      break;
 8002b9a:	e01c      	b.n	8002bd6 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8002b9c:	2327      	movs	r3, #39	; 0x27
 8002b9e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8002ba0:	232b      	movs	r3, #43	; 0x2b
 8002ba2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8002ba4:	232c      	movs	r3, #44	; 0x2c
 8002ba6:	757b      	strb	r3, [r7, #21]
      break;
 8002ba8:	e015      	b.n	8002bd6 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8002baa:	232d      	movs	r3, #45	; 0x2d
 8002bac:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8002bae:	2331      	movs	r3, #49	; 0x31
 8002bb0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8002bb2:	2332      	movs	r3, #50	; 0x32
 8002bb4:	757b      	strb	r3, [r7, #21]
      break;
 8002bb6:	e00e      	b.n	8002bd6 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002bb8:	2333      	movs	r3, #51	; 0x33
 8002bba:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8002bbc:	2337      	movs	r3, #55	; 0x37
 8002bbe:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8002bc0:	2338      	movs	r3, #56	; 0x38
 8002bc2:	757b      	strb	r3, [r7, #21]
      break;
 8002bc4:	e007      	b.n	8002bd6 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8002bc6:	2339      	movs	r3, #57	; 0x39
 8002bc8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8002bca:	233d      	movs	r3, #61	; 0x3d
 8002bcc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8002bce:	233e      	movs	r3, #62	; 0x3e
 8002bd0:	757b      	strb	r3, [r7, #21]
      break;
 8002bd2:	e000      	b.n	8002bd6 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8002bd4:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002bd6:	89fb      	ldrh	r3, [r7, #14]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	7dfa      	ldrb	r2, [r7, #23]
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 f9f8 	bl	8003fd4 <TS_IO_Read>
 8002be4:	4603      	mov	r3, r0
 8002be6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8002be8:	7d3b      	ldrb	r3, [r7, #20]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	119b      	asrs	r3, r3, #6
 8002bee:	f003 0203 	and.w	r2, r3, #3
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8002bf6:	89fb      	ldrh	r3, [r7, #14]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	7dba      	ldrb	r2, [r7, #22]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 f9e8 	bl	8003fd4 <TS_IO_Read>
 8002c04:	4603      	mov	r3, r0
 8002c06:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8002c08:	7d3b      	ldrb	r3, [r7, #20]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8002c12:	89fb      	ldrh	r3, [r7, #14]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	7d7a      	ldrb	r2, [r7, #21]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 f9da 	bl	8003fd4 <TS_IO_Read>
 8002c20:	4603      	mov	r3, r0
 8002c22:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8002c24:	7d3b      	ldrb	r3, [r7, #20]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	111b      	asrs	r3, r3, #4
 8002c2a:	f003 0204 	and.w	r2, r3, #4
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000acc 	.word	0x20000acc

08002c40 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000acc 	.word	0x20000acc

08002c58 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8002c5c:	f7ff fff0 	bl	8002c40 <ft5336_Get_I2C_InitializedStatus>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d104      	bne.n	8002c70 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8002c66:	f001 f991 	bl	8003f8c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8002c6a:	4b02      	ldr	r3, [pc, #8]	; (8002c74 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
  }
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000acc 	.word	0x20000acc

08002c78 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8002c86:	68fb      	ldr	r3, [r7, #12]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b090      	sub	sp, #64	; 0x40
 8002c98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002caa:	4baf      	ldr	r3, [pc, #700]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4aae      	ldr	r2, [pc, #696]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002cb0:	f043 0310 	orr.w	r3, r3, #16
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4bac      	ldr	r3, [pc, #688]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cc2:	4ba9      	ldr	r3, [pc, #676]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4aa8      	ldr	r2, [pc, #672]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4ba6      	ldr	r3, [pc, #664]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cda:	4ba3      	ldr	r3, [pc, #652]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4aa2      	ldr	r2, [pc, #648]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4ba0      	ldr	r3, [pc, #640]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	623b      	str	r3, [r7, #32]
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf2:	4b9d      	ldr	r3, [pc, #628]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a9c      	ldr	r2, [pc, #624]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002cf8:	f043 0308 	orr.w	r3, r3, #8
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b9a      	ldr	r3, [pc, #616]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0a:	4b97      	ldr	r3, [pc, #604]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a96      	ldr	r2, [pc, #600]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b94      	ldr	r3, [pc, #592]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	4b91      	ldr	r3, [pc, #580]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a90      	ldr	r2, [pc, #576]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b8e      	ldr	r3, [pc, #568]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002d3a:	4b8b      	ldr	r3, [pc, #556]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a8a      	ldr	r2, [pc, #552]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b88      	ldr	r3, [pc, #544]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d52:	4b85      	ldr	r3, [pc, #532]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a84      	ldr	r2, [pc, #528]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b82      	ldr	r3, [pc, #520]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d6a:	4b7f      	ldr	r3, [pc, #508]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a7e      	ldr	r2, [pc, #504]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b7c      	ldr	r3, [pc, #496]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d82:	4b79      	ldr	r3, [pc, #484]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a78      	ldr	r2, [pc, #480]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d88:	f043 0320 	orr.w	r3, r3, #32
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d9a:	4b73      	ldr	r3, [pc, #460]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a72      	ldr	r2, [pc, #456]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b70      	ldr	r3, [pc, #448]	; (8002f68 <MX_GPIO_Init+0x2d4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2160      	movs	r1, #96	; 0x60
 8002db6:	486d      	ldr	r0, [pc, #436]	; (8002f6c <MX_GPIO_Init+0x2d8>)
 8002db8:	f005 fade 	bl	8008378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	2120      	movs	r1, #32
 8002dc0:	486b      	ldr	r0, [pc, #428]	; (8002f70 <MX_GPIO_Init+0x2dc>)
 8002dc2:	f005 fad9 	bl	8008378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2108      	movs	r1, #8
 8002dca:	4869      	ldr	r0, [pc, #420]	; (8002f70 <MX_GPIO_Init+0x2dc>)
 8002dcc:	f005 fad4 	bl	8008378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	2108      	movs	r1, #8
 8002dd4:	4867      	ldr	r0, [pc, #412]	; (8002f74 <MX_GPIO_Init+0x2e0>)
 8002dd6:	f005 facf 	bl	8008378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002de0:	4865      	ldr	r0, [pc, #404]	; (8002f78 <MX_GPIO_Init+0x2e4>)
 8002de2:	f005 fac9 	bl	8008378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002de6:	2200      	movs	r2, #0
 8002de8:	f645 6140 	movw	r1, #24128	; 0x5e40
 8002dec:	4863      	ldr	r0, [pc, #396]	; (8002f7c <MX_GPIO_Init+0x2e8>)
 8002dee:	f005 fac3 	bl	8008378 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002df2:	2200      	movs	r2, #0
 8002df4:	21c8      	movs	r1, #200	; 0xc8
 8002df6:	4862      	ldr	r0, [pc, #392]	; (8002f80 <MX_GPIO_Init+0x2ec>)
 8002df8:	f005 fabe 	bl	8008378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e00:	2300      	movs	r3, #0
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4857      	ldr	r0, [pc, #348]	; (8002f6c <MX_GPIO_Init+0x2d8>)
 8002e10:	f004 fffa 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002e14:	2304      	movs	r3, #4
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e20:	2303      	movs	r3, #3
 8002e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e24:	2309      	movs	r3, #9
 8002e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	484f      	ldr	r0, [pc, #316]	; (8002f6c <MX_GPIO_Init+0x2d8>)
 8002e30:	f004 ffea 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002e34:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e42:	2303      	movs	r3, #3
 8002e44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e46:	230b      	movs	r3, #11
 8002e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e4e:	4619      	mov	r1, r3
 8002e50:	484b      	ldr	r0, [pc, #300]	; (8002f80 <MX_GPIO_Init+0x2ec>)
 8002e52:	f004 ffd9 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8002e56:	f643 0323 	movw	r3, #14371	; 0x3823
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e68:	230a      	movs	r3, #10
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e70:	4619      	mov	r1, r3
 8002e72:	4844      	ldr	r0, [pc, #272]	; (8002f84 <MX_GPIO_Init+0x2f0>)
 8002e74:	f004 ffc8 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e88:	2308      	movs	r3, #8
 8002e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e90:	4619      	mov	r1, r3
 8002e92:	4837      	ldr	r0, [pc, #220]	; (8002f70 <MX_GPIO_Init+0x2dc>)
 8002e94:	f004 ffb8 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002e98:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002eaa:	230c      	movs	r3, #12
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4834      	ldr	r0, [pc, #208]	; (8002f88 <MX_GPIO_Init+0x2f4>)
 8002eb6:	f004 ffa7 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8002eba:	f248 1340 	movw	r3, #33088	; 0x8140
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ecc:	4619      	mov	r1, r3
 8002ece:	482f      	ldr	r0, [pc, #188]	; (8002f8c <MX_GPIO_Init+0x2f8>)
 8002ed0:	f004 ff9a 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002ed4:	2360      	movs	r3, #96	; 0x60
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4820      	ldr	r0, [pc, #128]	; (8002f6c <MX_GPIO_Init+0x2d8>)
 8002eec:	f004 ff8c 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002ef0:	2340      	movs	r3, #64	; 0x40
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efc:	2303      	movs	r3, #3
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002f00:	230a      	movs	r3, #10
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f08:	4619      	mov	r1, r3
 8002f0a:	481e      	ldr	r0, [pc, #120]	; (8002f84 <MX_GPIO_Init+0x2f0>)
 8002f0c:	f004 ff7c 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f16:	2300      	movs	r3, #0
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f22:	4619      	mov	r1, r3
 8002f24:	481a      	ldr	r0, [pc, #104]	; (8002f90 <MX_GPIO_Init+0x2fc>)
 8002f26:	f004 ff6f 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002f2a:	2340      	movs	r3, #64	; 0x40
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002f2e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	480c      	ldr	r0, [pc, #48]	; (8002f70 <MX_GPIO_Init+0x2dc>)
 8002f40:	f004 ff62 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002f44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f56:	230a      	movs	r3, #10
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f5e:	4619      	mov	r1, r3
 8002f60:	480a      	ldr	r0, [pc, #40]	; (8002f8c <MX_GPIO_Init+0x2f8>)
 8002f62:	f004 ff51 	bl	8007e08 <HAL_GPIO_Init>
 8002f66:	e015      	b.n	8002f94 <MX_GPIO_Init+0x300>
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40022800 	.word	0x40022800
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40021c00 	.word	0x40021c00
 8002f80:	40021800 	.word	0x40021800
 8002f84:	40020400 	.word	0x40020400
 8002f88:	40020800 	.word	0x40020800
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002f94:	23f0      	movs	r3, #240	; 0xf0
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002fa4:	230a      	movs	r3, #10
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fac:	4619      	mov	r1, r3
 8002fae:	4891      	ldr	r0, [pc, #580]	; (80031f4 <MX_GPIO_Init+0x560>)
 8002fb0:	f004 ff2a 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002fc6:	230a      	movs	r3, #10
 8002fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4889      	ldr	r0, [pc, #548]	; (80031f8 <MX_GPIO_Init+0x564>)
 8002fd2:	f004 ff19 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002fd6:	2328      	movs	r3, #40	; 0x28
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fea:	4619      	mov	r1, r3
 8002fec:	4883      	ldr	r0, [pc, #524]	; (80031fc <MX_GPIO_Init+0x568>)
 8002fee:	f004 ff0b 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003004:	4619      	mov	r1, r3
 8003006:	487e      	ldr	r0, [pc, #504]	; (8003200 <MX_GPIO_Init+0x56c>)
 8003008:	f004 fefe 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800300c:	2308      	movs	r3, #8
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003010:	2301      	movs	r3, #1
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800301c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003020:	4619      	mov	r1, r3
 8003022:	4878      	ldr	r0, [pc, #480]	; (8003204 <MX_GPIO_Init+0x570>)
 8003024:	f004 fef0 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8003028:	f44f 7301 	mov.w	r3, #516	; 0x204
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302e:	2300      	movs	r3, #0
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800303a:	4619      	mov	r1, r3
 800303c:	486e      	ldr	r0, [pc, #440]	; (80031f8 <MX_GPIO_Init+0x564>)
 800303e:	f004 fee3 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003042:	2310      	movs	r3, #16
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003046:	2300      	movs	r3, #0
 8003048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800304e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003052:	4619      	mov	r1, r3
 8003054:	4869      	ldr	r0, [pc, #420]	; (80031fc <MX_GPIO_Init+0x568>)
 8003056:	f004 fed7 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800305a:	2304      	movs	r3, #4
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003066:	2303      	movs	r3, #3
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800306a:	230c      	movs	r3, #12
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800306e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003072:	4619      	mov	r1, r3
 8003074:	4861      	ldr	r0, [pc, #388]	; (80031fc <MX_GPIO_Init+0x568>)
 8003076:	f004 fec7 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 800307a:	f24a 0304 	movw	r3, #40964	; 0xa004
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003080:	2300      	movs	r3, #0
 8003082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800308c:	4619      	mov	r1, r3
 800308e:	485e      	ldr	r0, [pc, #376]	; (8003208 <MX_GPIO_Init+0x574>)
 8003090:	f004 feba 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8003094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309a:	2301      	movs	r3, #1
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80030a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030aa:	4619      	mov	r1, r3
 80030ac:	4851      	ldr	r0, [pc, #324]	; (80031f4 <MX_GPIO_Init+0x560>)
 80030ae:	f004 feab 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80030b2:	f645 6340 	movw	r3, #24128	; 0x5e40
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b8:	2301      	movs	r3, #1
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c0:	2300      	movs	r3, #0
 80030c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80030c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030c8:	4619      	mov	r1, r3
 80030ca:	484f      	ldr	r0, [pc, #316]	; (8003208 <MX_GPIO_Init+0x574>)
 80030cc:	f004 fe9c 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80030d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80030d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80030da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80030e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e4:	4619      	mov	r1, r3
 80030e6:	4843      	ldr	r0, [pc, #268]	; (80031f4 <MX_GPIO_Init+0x560>)
 80030e8:	f004 fe8e 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80030ec:	2310      	movs	r3, #16
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f8:	2303      	movs	r3, #3
 80030fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80030fc:	230a      	movs	r3, #10
 80030fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003104:	4619      	mov	r1, r3
 8003106:	4840      	ldr	r0, [pc, #256]	; (8003208 <MX_GPIO_Init+0x574>)
 8003108:	f004 fe7e 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800310c:	23c8      	movs	r3, #200	; 0xc8
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003110:	2301      	movs	r3, #1
 8003112:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800311c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003120:	4619      	mov	r1, r3
 8003122:	4835      	ldr	r0, [pc, #212]	; (80031f8 <MX_GPIO_Init+0x564>)
 8003124:	f004 fe70 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003128:	2305      	movs	r3, #5
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	2303      	movs	r3, #3
 8003136:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003138:	230a      	movs	r3, #10
 800313a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003140:	4619      	mov	r1, r3
 8003142:	482f      	ldr	r0, [pc, #188]	; (8003200 <MX_GPIO_Init+0x56c>)
 8003144:	f004 fe60 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003148:	2332      	movs	r3, #50	; 0x32
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	2303      	movs	r3, #3
 8003156:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003158:	230b      	movs	r3, #11
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800315c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003160:	4619      	mov	r1, r3
 8003162:	4827      	ldr	r0, [pc, #156]	; (8003200 <MX_GPIO_Init+0x56c>)
 8003164:	f004 fe50 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003168:	2304      	movs	r3, #4
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	2303      	movs	r3, #3
 8003176:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003178:	2309      	movs	r3, #9
 800317a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003180:	4619      	mov	r1, r3
 8003182:	4822      	ldr	r0, [pc, #136]	; (800320c <MX_GPIO_Init+0x578>)
 8003184:	f004 fe40 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003188:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003196:	2303      	movs	r3, #3
 8003198:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800319a:	2309      	movs	r3, #9
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800319e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a2:	4619      	mov	r1, r3
 80031a4:	4815      	ldr	r0, [pc, #84]	; (80031fc <MX_GPIO_Init+0x568>)
 80031a6:	f004 fe2f 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80031aa:	2386      	movs	r3, #134	; 0x86
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031ba:	230b      	movs	r3, #11
 80031bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031c2:	4619      	mov	r1, r3
 80031c4:	4812      	ldr	r0, [pc, #72]	; (8003210 <MX_GPIO_Init+0x57c>)
 80031c6:	f004 fe1f 	bl	8007e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80031ca:	2328      	movs	r3, #40	; 0x28
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d6:	2303      	movs	r3, #3
 80031d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80031da:	230a      	movs	r3, #10
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031e2:	4619      	mov	r1, r3
 80031e4:	480a      	ldr	r0, [pc, #40]	; (8003210 <MX_GPIO_Init+0x57c>)
 80031e6:	f004 fe0f 	bl	8007e08 <HAL_GPIO_Init>

}
 80031ea:	bf00      	nop
 80031ec:	3740      	adds	r7, #64	; 0x40
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40021800 	.word	0x40021800
 80031fc:	40020c00 	.word	0x40020c00
 8003200:	40020800 	.word	0x40020800
 8003204:	40022800 	.word	0x40022800
 8003208:	40021c00 	.word	0x40021c00
 800320c:	40020400 	.word	0x40020400
 8003210:	40020000 	.word	0x40020000

08003214 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <MX_I2C1_Init+0x74>)
 800321a:	4a1c      	ldr	r2, [pc, #112]	; (800328c <MX_I2C1_Init+0x78>)
 800321c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800321e:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <MX_I2C1_Init+0x74>)
 8003220:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <MX_I2C1_Init+0x7c>)
 8003222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003224:	4b18      	ldr	r3, [pc, #96]	; (8003288 <MX_I2C1_Init+0x74>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <MX_I2C1_Init+0x74>)
 800322c:	2201      	movs	r2, #1
 800322e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003230:	4b15      	ldr	r3, [pc, #84]	; (8003288 <MX_I2C1_Init+0x74>)
 8003232:	2200      	movs	r2, #0
 8003234:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <MX_I2C1_Init+0x74>)
 8003238:	2200      	movs	r2, #0
 800323a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <MX_I2C1_Init+0x74>)
 800323e:	2200      	movs	r2, #0
 8003240:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <MX_I2C1_Init+0x74>)
 8003244:	2200      	movs	r2, #0
 8003246:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <MX_I2C1_Init+0x74>)
 800324a:	2200      	movs	r2, #0
 800324c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800324e:	480e      	ldr	r0, [pc, #56]	; (8003288 <MX_I2C1_Init+0x74>)
 8003250:	f005 f8c6 	bl	80083e0 <HAL_I2C_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800325a:	f000 fbc9 	bl	80039f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800325e:	2100      	movs	r1, #0
 8003260:	4809      	ldr	r0, [pc, #36]	; (8003288 <MX_I2C1_Init+0x74>)
 8003262:	f005 fe53 	bl	8008f0c <HAL_I2CEx_ConfigAnalogFilter>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800326c:	f000 fbc0 	bl	80039f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003270:	2100      	movs	r1, #0
 8003272:	4805      	ldr	r0, [pc, #20]	; (8003288 <MX_I2C1_Init+0x74>)
 8003274:	f005 fe95 	bl	8008fa2 <HAL_I2CEx_ConfigDigitalFilter>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800327e:	f000 fbb7 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000ad4 	.word	0x20000ad4
 800328c:	40005400 	.word	0x40005400
 8003290:	00c0eaff 	.word	0x00c0eaff

08003294 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <MX_I2C3_Init+0x74>)
 800329a:	4a1c      	ldr	r2, [pc, #112]	; (800330c <MX_I2C3_Init+0x78>)
 800329c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <MX_I2C3_Init+0x74>)
 80032a0:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <MX_I2C3_Init+0x7c>)
 80032a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <MX_I2C3_Init+0x74>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <MX_I2C3_Init+0x74>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032b0:	4b15      	ldr	r3, [pc, #84]	; (8003308 <MX_I2C3_Init+0x74>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <MX_I2C3_Init+0x74>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <MX_I2C3_Init+0x74>)
 80032be:	2200      	movs	r2, #0
 80032c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <MX_I2C3_Init+0x74>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <MX_I2C3_Init+0x74>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80032ce:	480e      	ldr	r0, [pc, #56]	; (8003308 <MX_I2C3_Init+0x74>)
 80032d0:	f005 f886 	bl	80083e0 <HAL_I2C_Init>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80032da:	f000 fb89 	bl	80039f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032de:	2100      	movs	r1, #0
 80032e0:	4809      	ldr	r0, [pc, #36]	; (8003308 <MX_I2C3_Init+0x74>)
 80032e2:	f005 fe13 	bl	8008f0c <HAL_I2CEx_ConfigAnalogFilter>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80032ec:	f000 fb80 	bl	80039f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80032f0:	2100      	movs	r1, #0
 80032f2:	4805      	ldr	r0, [pc, #20]	; (8003308 <MX_I2C3_Init+0x74>)
 80032f4:	f005 fe55 	bl	8008fa2 <HAL_I2CEx_ConfigDigitalFilter>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80032fe:	f000 fb77 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000b28 	.word	0x20000b28
 800330c:	40005c00 	.word	0x40005c00
 8003310:	00c0eaff 	.word	0x00c0eaff

08003314 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b0ac      	sub	sp, #176	; 0xb0
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800332c:	f107 0318 	add.w	r3, r7, #24
 8003330:	2284      	movs	r2, #132	; 0x84
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f00b fb9f 	bl	800ea78 <memset>
  if(i2cHandle->Instance==I2C1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a44      	ldr	r2, [pc, #272]	; (8003450 <HAL_I2C_MspInit+0x13c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d13d      	bne.n	80033c0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003344:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003348:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800334a:	2300      	movs	r3, #0
 800334c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800334e:	f107 0318 	add.w	r3, r7, #24
 8003352:	4618      	mov	r0, r3
 8003354:	f006 ff06 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800335e:	f000 fb47 	bl	80039f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003362:	4b3c      	ldr	r3, [pc, #240]	; (8003454 <HAL_I2C_MspInit+0x140>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a3b      	ldr	r2, [pc, #236]	; (8003454 <HAL_I2C_MspInit+0x140>)
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b39      	ldr	r3, [pc, #228]	; (8003454 <HAL_I2C_MspInit+0x140>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800337a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800337e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003382:	2312      	movs	r3, #18
 8003384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003394:	2304      	movs	r3, #4
 8003396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800339e:	4619      	mov	r1, r3
 80033a0:	482d      	ldr	r0, [pc, #180]	; (8003458 <HAL_I2C_MspInit+0x144>)
 80033a2:	f004 fd31 	bl	8007e08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033a6:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_I2C_MspInit+0x140>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <HAL_I2C_MspInit+0x140>)
 80033ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
 80033b2:	4b28      	ldr	r3, [pc, #160]	; (8003454 <HAL_I2C_MspInit+0x140>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80033be:	e042      	b.n	8003446 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a25      	ldr	r2, [pc, #148]	; (800345c <HAL_I2C_MspInit+0x148>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d13d      	bne.n	8003446 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80033ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033d6:	f107 0318 	add.w	r3, r7, #24
 80033da:	4618      	mov	r0, r3
 80033dc:	f006 fec2 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80033e6:	f000 fb03 	bl	80039f0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <HAL_I2C_MspInit+0x140>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_I2C_MspInit+0x140>)
 80033f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <HAL_I2C_MspInit+0x140>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003402:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003406:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800340a:	2312      	movs	r3, #18
 800340c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003410:	2301      	movs	r3, #1
 8003412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003416:	2303      	movs	r3, #3
 8003418:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800341c:	2304      	movs	r3, #4
 800341e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003422:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003426:	4619      	mov	r1, r3
 8003428:	480d      	ldr	r0, [pc, #52]	; (8003460 <HAL_I2C_MspInit+0x14c>)
 800342a:	f004 fced 	bl	8007e08 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_I2C_MspInit+0x140>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <HAL_I2C_MspInit+0x140>)
 8003434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_I2C_MspInit+0x140>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
}
 8003446:	bf00      	nop
 8003448:	37b0      	adds	r7, #176	; 0xb0
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40005400 	.word	0x40005400
 8003454:	40023800 	.word	0x40023800
 8003458:	40020400 	.word	0x40020400
 800345c:	40005c00 	.word	0x40005c00
 8003460:	40021c00 	.word	0x40021c00

08003464 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <HAL_I2C_MspDeInit+0x64>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d110      	bne.n	8003498 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003476:	4b15      	ldr	r3, [pc, #84]	; (80034cc <HAL_I2C_MspDeInit+0x68>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a14      	ldr	r2, [pc, #80]	; (80034cc <HAL_I2C_MspDeInit+0x68>)
 800347c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003480:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003486:	4812      	ldr	r0, [pc, #72]	; (80034d0 <HAL_I2C_MspDeInit+0x6c>)
 8003488:	f004 fe6a 	bl	8008160 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800348c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003490:	480f      	ldr	r0, [pc, #60]	; (80034d0 <HAL_I2C_MspDeInit+0x6c>)
 8003492:	f004 fe65 	bl	8008160 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8003496:	e013      	b.n	80034c0 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <HAL_I2C_MspDeInit+0x70>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10e      	bne.n	80034c0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_I2C_MspDeInit+0x68>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_I2C_MspDeInit+0x68>)
 80034a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034ac:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	4809      	ldr	r0, [pc, #36]	; (80034d8 <HAL_I2C_MspDeInit+0x74>)
 80034b2:	f004 fe55 	bl	8008160 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80034b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034ba:	4807      	ldr	r0, [pc, #28]	; (80034d8 <HAL_I2C_MspDeInit+0x74>)
 80034bc:	f004 fe50 	bl	8008160 <HAL_GPIO_DeInit>
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40005400 	.word	0x40005400
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40020400 	.word	0x40020400
 80034d4:	40005c00 	.word	0x40005c00
 80034d8:	40021c00 	.word	0x40021c00

080034dc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08e      	sub	sp, #56	; 0x38
 80034e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80034e2:	1d3b      	adds	r3, r7, #4
 80034e4:	2234      	movs	r2, #52	; 0x34
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f00b fac5 	bl	800ea78 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80034ee:	4b3a      	ldr	r3, [pc, #232]	; (80035d8 <MX_LTDC_Init+0xfc>)
 80034f0:	4a3a      	ldr	r2, [pc, #232]	; (80035dc <MX_LTDC_Init+0x100>)
 80034f2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80034f4:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <MX_LTDC_Init+0xfc>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80034fa:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <MX_LTDC_Init+0xfc>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003500:	4b35      	ldr	r3, [pc, #212]	; (80035d8 <MX_LTDC_Init+0xfc>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003506:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <MX_LTDC_Init+0xfc>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800350c:	4b32      	ldr	r3, [pc, #200]	; (80035d8 <MX_LTDC_Init+0xfc>)
 800350e:	2228      	movs	r2, #40	; 0x28
 8003510:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8003512:	4b31      	ldr	r3, [pc, #196]	; (80035d8 <MX_LTDC_Init+0xfc>)
 8003514:	2209      	movs	r2, #9
 8003516:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8003518:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <MX_LTDC_Init+0xfc>)
 800351a:	2235      	movs	r2, #53	; 0x35
 800351c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800351e:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <MX_LTDC_Init+0xfc>)
 8003520:	220b      	movs	r2, #11
 8003522:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8003524:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <MX_LTDC_Init+0xfc>)
 8003526:	f240 2215 	movw	r2, #533	; 0x215
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800352c:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <MX_LTDC_Init+0xfc>)
 800352e:	f240 121b 	movw	r2, #283	; 0x11b
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <MX_LTDC_Init+0xfc>)
 8003536:	f240 2235 	movw	r2, #565	; 0x235
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800353c:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <MX_LTDC_Init+0xfc>)
 800353e:	f240 121d 	movw	r2, #285	; 0x11d
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003544:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <MX_LTDC_Init+0xfc>)
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <MX_LTDC_Init+0xfc>)
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003554:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <MX_LTDC_Init+0xfc>)
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800355c:	481e      	ldr	r0, [pc, #120]	; (80035d8 <MX_LTDC_Init+0xfc>)
 800355e:	f005 fd6d 	bl	800903c <HAL_LTDC_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003568:	f000 fa42 	bl	80039f0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8003570:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003574:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800357a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800357e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003580:	2302      	movs	r3, #2
 8003582:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003584:	23ff      	movs	r3, #255	; 0xff
 8003586:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800358c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003590:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003592:	2307      	movs	r3, #7
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8003596:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800359c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80035a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80035a6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	2200      	movs	r2, #0
 80035be:	4619      	mov	r1, r3
 80035c0:	4805      	ldr	r0, [pc, #20]	; (80035d8 <MX_LTDC_Init+0xfc>)
 80035c2:	f005 fecd 	bl	8009360 <HAL_LTDC_ConfigLayer>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80035cc:	f000 fa10 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80035d0:	bf00      	nop
 80035d2:	3738      	adds	r7, #56	; 0x38
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000b7c 	.word	0x20000b7c
 80035dc:	40016800 	.word	0x40016800

080035e0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b0ae      	sub	sp, #184	; 0xb8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035f8:	f107 0320 	add.w	r3, r7, #32
 80035fc:	2284      	movs	r2, #132	; 0x84
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f00b fa39 	bl	800ea78 <memset>
  if(ltdcHandle->Instance==LTDC)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6f      	ldr	r2, [pc, #444]	; (80037c8 <HAL_LTDC_MspInit+0x1e8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	f040 80d6 	bne.w	80037be <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003612:	2308      	movs	r3, #8
 8003614:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003616:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800361a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800361c:	2305      	movs	r3, #5
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003620:	2302      	movs	r3, #2
 8003622:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003624:	2303      	movs	r3, #3
 8003626:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003628:	2301      	movs	r3, #1
 800362a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800362c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003630:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003632:	f107 0320 	add.w	r3, r7, #32
 8003636:	4618      	mov	r0, r3
 8003638:	f006 fd94 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8003642:	f000 f9d5 	bl	80039f0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003646:	4b61      	ldr	r3, [pc, #388]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	4a60      	ldr	r2, [pc, #384]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 800364c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003650:	6453      	str	r3, [r2, #68]	; 0x44
 8003652:	4b5e      	ldr	r3, [pc, #376]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800365e:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a5a      	ldr	r2, [pc, #360]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 8003664:	f043 0310 	orr.w	r3, r3, #16
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b58      	ldr	r3, [pc, #352]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003676:	4b55      	ldr	r3, [pc, #340]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	4a54      	ldr	r2, [pc, #336]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 800367c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003680:	6313      	str	r3, [r2, #48]	; 0x30
 8003682:	4b52      	ldr	r3, [pc, #328]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800368e:	4b4f      	ldr	r3, [pc, #316]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a4e      	ldr	r2, [pc, #312]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 8003694:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b4c      	ldr	r3, [pc, #304]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80036a6:	4b49      	ldr	r3, [pc, #292]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	4a48      	ldr	r2, [pc, #288]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 80036ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b0:	6313      	str	r3, [r2, #48]	; 0x30
 80036b2:	4b46      	ldr	r3, [pc, #280]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80036be:	4b43      	ldr	r3, [pc, #268]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	4a42      	ldr	r2, [pc, #264]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ca:	4b40      	ldr	r3, [pc, #256]	; (80037cc <HAL_LTDC_MspInit+0x1ec>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80036d6:	2310      	movs	r3, #16
 80036d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036dc:	2302      	movs	r3, #2
 80036de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80036ee:	230e      	movs	r3, #14
 80036f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80036f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4835      	ldr	r0, [pc, #212]	; (80037d0 <HAL_LTDC_MspInit+0x1f0>)
 80036fc:	f004 fb84 	bl	8007e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003700:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003708:	2302      	movs	r3, #2
 800370a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800371a:	230e      	movs	r3, #14
 800371c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003720:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003724:	4619      	mov	r1, r3
 8003726:	482b      	ldr	r0, [pc, #172]	; (80037d4 <HAL_LTDC_MspInit+0x1f4>)
 8003728:	f004 fb6e 	bl	8007e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800372c:	23f7      	movs	r3, #247	; 0xf7
 800372e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003732:	2302      	movs	r3, #2
 8003734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003744:	230e      	movs	r3, #14
 8003746:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800374a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800374e:	4619      	mov	r1, r3
 8003750:	4821      	ldr	r0, [pc, #132]	; (80037d8 <HAL_LTDC_MspInit+0x1f8>)
 8003752:	f004 fb59 	bl	8007e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800375a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375e:	2302      	movs	r3, #2
 8003760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376a:	2300      	movs	r3, #0
 800376c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003770:	2309      	movs	r3, #9
 8003772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003776:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800377a:	4619      	mov	r1, r3
 800377c:	4817      	ldr	r0, [pc, #92]	; (80037dc <HAL_LTDC_MspInit+0x1fc>)
 800377e:	f004 fb43 	bl	8007e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003782:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378a:	2302      	movs	r3, #2
 800378c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003796:	2300      	movs	r3, #0
 8003798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800379c:	230e      	movs	r3, #14
 800379e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80037a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037a6:	4619      	mov	r1, r3
 80037a8:	480d      	ldr	r0, [pc, #52]	; (80037e0 <HAL_LTDC_MspInit+0x200>)
 80037aa:	f004 fb2d 	bl	8007e08 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2105      	movs	r1, #5
 80037b2:	2058      	movs	r0, #88	; 0x58
 80037b4:	f003 f880 	bl	80068b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80037b8:	2058      	movs	r0, #88	; 0x58
 80037ba:	f003 f899 	bl	80068f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80037be:	bf00      	nop
 80037c0:	37b8      	adds	r7, #184	; 0xb8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40016800 	.word	0x40016800
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40022400 	.word	0x40022400
 80037d8:	40022800 	.word	0x40022800
 80037dc:	40021800 	.word	0x40021800
 80037e0:	40022000 	.word	0x40022000

080037e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e4:	b598      	push	{r3, r4, r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037e8:	f002 fb63 	bl	8005eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037ec:	f000 f870 	bl	80038d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037f0:	f7ff fa50 	bl	8002c94 <MX_GPIO_Init>
  MX_DMA_Init();
 80037f4:	f7fd fd4a 	bl	800128c <MX_DMA_Init>
  MX_DMA2D_Init();
 80037f8:	f7fd fd66 	bl	80012c8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80037fc:	f7fd fdbc 	bl	8001378 <MX_FMC_Init>
  MX_I2C1_Init();
 8003800:	f7ff fd08 	bl	8003214 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003804:	f7ff fd46 	bl	8003294 <MX_I2C3_Init>
  MX_LTDC_Init();
 8003808:	f7ff fe68 	bl	80034dc <MX_LTDC_Init>
  MX_RTC_Init();
 800380c:	f000 f8f6 	bl	80039fc <MX_RTC_Init>
  MX_SPI2_Init();
 8003810:	f000 f9c6 	bl	8003ba0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003814:	f001 ff70 	bl	80056f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003818:	f001 ffc2 	bl	80057a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800381c:	f002 f80e 	bl	800583c <MX_TIM3_Init>
  MX_TIM8_Init();
 8003820:	f002 f890 	bl	8005944 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8003824:	f002 f9ac 	bl	8005b80 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003828:	f002 f9da 	bl	8005be0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800382c:	f7fd fb76 	bl	8000f1c <MX_ADC1_Init>
  MX_DAC_Init();
 8003830:	f7fd fc86 	bl	8001140 <MX_DAC_Init>
  MX_ADC3_Init();
 8003834:	f7fd fbc4 	bl	8000fc0 <MX_ADC3_Init>
  MX_UART7_Init();
 8003838:	f002 f972 	bl	8005b20 <MX_UART7_Init>
  MX_TIM7_Init();
 800383c:	f002 f84c 	bl	80058d8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8003840:	f000 fbf2 	bl	8004028 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8003844:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003848:	2000      	movs	r0, #0
 800384a:	f000 fc85 	bl	8004158 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 800384e:	f000 fc5b 	bl	8004108 <BSP_LCD_GetXSize>
 8003852:	4604      	mov	r4, r0
 8003854:	f000 fc6c 	bl	8004130 <BSP_LCD_GetYSize>
 8003858:	4603      	mov	r3, r0
 800385a:	fb04 f303 	mul.w	r3, r4, r3
 800385e:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4619      	mov	r1, r3
 8003866:	2001      	movs	r0, #1
 8003868:	f000 fc76 	bl	8004158 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 800386c:	f000 ffb8 	bl	80047e0 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8003870:	2000      	movs	r0, #0
 8003872:	f000 fcd1 	bl	8004218 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800387a:	f000 fd3f 	bl	80042fc <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800387e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003882:	f000 fcf1 	bl	8004268 <BSP_LCD_SetBackColor>
  //BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
  BSP_LCD_SelectLayer(1);
 8003886:	2001      	movs	r0, #1
 8003888:	f000 fcc6 	bl	8004218 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800388c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003890:	f000 fd34 	bl	80042fc <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003898:	f000 fce6 	bl	8004268 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font12);
 800389c:	480b      	ldr	r0, [pc, #44]	; (80038cc <main+0xe8>)
 800389e:	f000 fcfd 	bl	800429c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80038a2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80038a6:	f000 fcc7 	bl	8004238 <BSP_LCD_SetTextColor>
  //BSP_LCD_SetBackColor(00);

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80038aa:	f000 fc2d 	bl	8004108 <BSP_LCD_GetXSize>
 80038ae:	4603      	mov	r3, r0
 80038b0:	b29c      	uxth	r4, r3
 80038b2:	f000 fc3d 	bl	8004130 <BSP_LCD_GetYSize>
 80038b6:	4603      	mov	r3, r0
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4619      	mov	r1, r3
 80038bc:	4620      	mov	r0, r4
 80038be:	f001 fb5d 	bl	8004f7c <BSP_TS_Init>
//	  Error_Handler();
//  }
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80038c2:	f7fd fe5d 	bl	8001580 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80038c6:	f008 ff83 	bl	800c7d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80038ca:	e7fe      	b.n	80038ca <main+0xe6>
 80038cc:	2000003c 	.word	0x2000003c

080038d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b094      	sub	sp, #80	; 0x50
 80038d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038d6:	f107 0320 	add.w	r3, r7, #32
 80038da:	2230      	movs	r2, #48	; 0x30
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f00b f8ca 	bl	800ea78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038e4:	f107 030c 	add.w	r3, r7, #12
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80038f4:	f005 ff1a 	bl	800972c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f8:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <SystemClock_Config+0xdc>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	4a2b      	ldr	r2, [pc, #172]	; (80039ac <SystemClock_Config+0xdc>)
 80038fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003902:	6413      	str	r3, [r2, #64]	; 0x40
 8003904:	4b29      	ldr	r3, [pc, #164]	; (80039ac <SystemClock_Config+0xdc>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003910:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <SystemClock_Config+0xe0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a26      	ldr	r2, [pc, #152]	; (80039b0 <SystemClock_Config+0xe0>)
 8003916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <SystemClock_Config+0xe0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003928:	2309      	movs	r3, #9
 800392a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800392c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003932:	2301      	movs	r3, #1
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003936:	2302      	movs	r3, #2
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800393a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003940:	2319      	movs	r3, #25
 8003942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003944:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003948:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800394a:	2302      	movs	r3, #2
 800394c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800394e:	2309      	movs	r3, #9
 8003950:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003952:	f107 0320 	add.w	r3, r7, #32
 8003956:	4618      	mov	r0, r3
 8003958:	f005 ff48 	bl	80097ec <HAL_RCC_OscConfig>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003962:	f000 f845 	bl	80039f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003966:	f005 fef1 	bl	800974c <HAL_PWREx_EnableOverDrive>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003970:	f000 f83e 	bl	80039f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003974:	230f      	movs	r3, #15
 8003976:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003978:	2302      	movs	r3, #2
 800397a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003980:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800398a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800398c:	f107 030c 	add.w	r3, r7, #12
 8003990:	2106      	movs	r1, #6
 8003992:	4618      	mov	r0, r3
 8003994:	f006 f9ce 	bl	8009d34 <HAL_RCC_ClockConfig>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800399e:	f000 f827 	bl	80039f0 <Error_Handler>
  }
}
 80039a2:	bf00      	nop
 80039a4:	3750      	adds	r7, #80	; 0x50
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40007000 	.word	0x40007000

080039b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039c6:	f002 fa81 	bl	8005ecc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a06      	ldr	r2, [pc, #24]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d103      	bne.n	80039dc <HAL_TIM_PeriodElapsedCallback+0x28>
	  HAL_GPIO_TogglePin(LED16_GPIO_Port, LED16_Pin);
 80039d4:	2108      	movs	r1, #8
 80039d6:	4805      	ldr	r0, [pc, #20]	; (80039ec <HAL_TIM_PeriodElapsedCallback+0x38>)
 80039d8:	f004 fce7 	bl	80083aa <HAL_GPIO_TogglePin>
  }
  /* USER CODE END Callback 1 */
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40001000 	.word	0x40001000
 80039e8:	40001400 	.word	0x40001400
 80039ec:	40020c00 	.word	0x40020c00

080039f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039f4:	b672      	cpsid	i
}
 80039f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039f8:	e7fe      	b.n	80039f8 <Error_Handler+0x8>
	...

080039fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b090      	sub	sp, #64	; 0x40
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003a12:	2300      	movs	r3, #0
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003a16:	463b      	mov	r3, r7
 8003a18:	2228      	movs	r2, #40	; 0x28
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f00b f82b 	bl	800ea78 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a22:	4b46      	ldr	r3, [pc, #280]	; (8003b3c <MX_RTC_Init+0x140>)
 8003a24:	4a46      	ldr	r2, [pc, #280]	; (8003b40 <MX_RTC_Init+0x144>)
 8003a26:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a28:	4b44      	ldr	r3, [pc, #272]	; (8003b3c <MX_RTC_Init+0x140>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003a2e:	4b43      	ldr	r3, [pc, #268]	; (8003b3c <MX_RTC_Init+0x140>)
 8003a30:	227f      	movs	r2, #127	; 0x7f
 8003a32:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003a34:	4b41      	ldr	r3, [pc, #260]	; (8003b3c <MX_RTC_Init+0x140>)
 8003a36:	22ff      	movs	r2, #255	; 0xff
 8003a38:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a3a:	4b40      	ldr	r3, [pc, #256]	; (8003b3c <MX_RTC_Init+0x140>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a40:	4b3e      	ldr	r3, [pc, #248]	; (8003b3c <MX_RTC_Init+0x140>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a46:	4b3d      	ldr	r3, [pc, #244]	; (8003b3c <MX_RTC_Init+0x140>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a4c:	483b      	ldr	r0, [pc, #236]	; (8003b3c <MX_RTC_Init+0x140>)
 8003a4e:	f006 ff79 	bl	800a944 <HAL_RTC_Init>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003a58:	f7ff ffca 	bl	80039f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	482f      	ldr	r0, [pc, #188]	; (8003b3c <MX_RTC_Init+0x140>)
 8003a80:	f006 ffe4 	bl	800aa4c <HAL_RTC_SetTime>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003a8a:	f7ff ffb1 	bl	80039f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4619      	mov	r1, r3
 8003aae:	4823      	ldr	r0, [pc, #140]	; (8003b3c <MX_RTC_Init+0x140>)
 8003ab0:	f007 f866 	bl	800ab80 <HAL_RTC_SetDate>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003aba:	f7ff ff99 	bl	80039f0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003aee:	463b      	mov	r3, r7
 8003af0:	2201      	movs	r2, #1
 8003af2:	4619      	mov	r1, r3
 8003af4:	4811      	ldr	r0, [pc, #68]	; (8003b3c <MX_RTC_Init+0x140>)
 8003af6:	f007 f8c7 	bl	800ac88 <HAL_RTC_SetAlarm>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003b00:	f7ff ff76 	bl	80039f0 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8003b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003b0a:	463b      	mov	r3, r7
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	4619      	mov	r1, r3
 8003b10:	480a      	ldr	r0, [pc, #40]	; (8003b3c <MX_RTC_Init+0x140>)
 8003b12:	f007 f8b9 	bl	800ac88 <HAL_RTC_SetAlarm>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8003b1c:	f7ff ff68 	bl	80039f0 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8003b20:	2202      	movs	r2, #2
 8003b22:	2100      	movs	r1, #0
 8003b24:	4805      	ldr	r0, [pc, #20]	; (8003b3c <MX_RTC_Init+0x140>)
 8003b26:	f007 fa7b 	bl	800b020 <HAL_RTCEx_SetTimeStamp>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8003b30:	f7ff ff5e 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003b34:	bf00      	nop
 8003b36:	3740      	adds	r7, #64	; 0x40
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000c24 	.word	0x20000c24
 8003b40:	40002800 	.word	0x40002800

08003b44 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b0a4      	sub	sp, #144	; 0x90
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b4c:	f107 030c 	add.w	r3, r7, #12
 8003b50:	2284      	movs	r2, #132	; 0x84
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f00a ff8f 	bl	800ea78 <memset>
  if(rtcHandle->Instance==RTC)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <HAL_RTC_MspInit+0x54>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d114      	bne.n	8003b8e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003b64:	2320      	movs	r3, #32
 8003b66:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b6e:	f107 030c 	add.w	r3, r7, #12
 8003b72:	4618      	mov	r0, r3
 8003b74:	f006 faf6 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003b7e:	f7ff ff37 	bl	80039f0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_RTC_MspInit+0x58>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a05      	ldr	r2, [pc, #20]	; (8003b9c <HAL_RTC_MspInit+0x58>)
 8003b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b8c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003b8e:	bf00      	nop
 8003b90:	3790      	adds	r7, #144	; 0x90
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40002800 	.word	0x40002800
 8003b9c:	40023800 	.word	0x40023800

08003ba0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003ba6:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <MX_SPI2_Init+0x78>)
 8003ba8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003baa:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003bac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003bb2:	4b18      	ldr	r3, [pc, #96]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003bb8:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003bba:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003bbe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003bce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003bd2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bda:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003bee:	2207      	movs	r2, #7
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003bfe:	4805      	ldr	r0, [pc, #20]	; (8003c14 <MX_SPI2_Init+0x74>)
 8003c00:	f007 fb07 	bl	800b212 <HAL_SPI_Init>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003c0a:	f7ff fef1 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000c44 	.word	0x20000c44
 8003c18:	40003800 	.word	0x40003800

08003c1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a25      	ldr	r2, [pc, #148]	; (8003cd0 <HAL_SPI_MspInit+0xb4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d144      	bne.n	8003cc8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c3e:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a24      	ldr	r2, [pc, #144]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4a:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <HAL_SPI_MspInit+0xb8>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003c86:	2303      	movs	r3, #3
 8003c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c92:	2303      	movs	r3, #3
 8003c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c96:	2305      	movs	r3, #5
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003c9a:	f107 0314 	add.w	r3, r7, #20
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	480d      	ldr	r0, [pc, #52]	; (8003cd8 <HAL_SPI_MspInit+0xbc>)
 8003ca2:	f004 f8b1 	bl	8007e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003ca6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cac:	2302      	movs	r3, #2
 8003cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003cb8:	2305      	movs	r3, #5
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cbc:	f107 0314 	add.w	r3, r7, #20
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4806      	ldr	r0, [pc, #24]	; (8003cdc <HAL_SPI_MspInit+0xc0>)
 8003cc4:	f004 f8a0 	bl	8007e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3728      	adds	r7, #40	; 0x28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40003800 	.word	0x40003800
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40022000 	.word	0x40022000
 8003cdc:	40020400 	.word	0x40020400

08003ce0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08c      	sub	sp, #48	; 0x30
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a51      	ldr	r2, [pc, #324]	; (8003e30 <I2Cx_MspInit+0x150>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d14d      	bne.n	8003d8c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003cf0:	4b50      	ldr	r3, [pc, #320]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	4a4f      	ldr	r2, [pc, #316]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfc:	4b4d      	ldr	r3, [pc, #308]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003d0c:	2312      	movs	r3, #18
 8003d0e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003d14:	2302      	movs	r3, #2
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003d18:	2304      	movs	r3, #4
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003d1c:	f107 031c 	add.w	r3, r7, #28
 8003d20:	4619      	mov	r1, r3
 8003d22:	4845      	ldr	r0, [pc, #276]	; (8003e38 <I2Cx_MspInit+0x158>)
 8003d24:	f004 f870 	bl	8007e08 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003d2e:	f107 031c 	add.w	r3, r7, #28
 8003d32:	4619      	mov	r1, r3
 8003d34:	4840      	ldr	r0, [pc, #256]	; (8003e38 <I2Cx_MspInit+0x158>)
 8003d36:	f004 f867 	bl	8007e08 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003d3a:	4b3e      	ldr	r3, [pc, #248]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	4a3d      	ldr	r2, [pc, #244]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003d40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d44:	6413      	str	r3, [r2, #64]	; 0x40
 8003d46:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003d52:	4b38      	ldr	r3, [pc, #224]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4a37      	ldr	r2, [pc, #220]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003d58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d5c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003d5e:	4b35      	ldr	r3, [pc, #212]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	4a34      	ldr	r2, [pc, #208]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003d64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d68:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	210f      	movs	r1, #15
 8003d6e:	2048      	movs	r0, #72	; 0x48
 8003d70:	f002 fda2 	bl	80068b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003d74:	2048      	movs	r0, #72	; 0x48
 8003d76:	f002 fdbb 	bl	80068f0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	210f      	movs	r1, #15
 8003d7e:	2049      	movs	r0, #73	; 0x49
 8003d80:	f002 fd9a 	bl	80068b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003d84:	2049      	movs	r0, #73	; 0x49
 8003d86:	f002 fdb3 	bl	80068f0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003d8a:	e04d      	b.n	8003e28 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003d8c:	4b29      	ldr	r3, [pc, #164]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	4a28      	ldr	r2, [pc, #160]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003d92:	f043 0302 	orr.w	r3, r3, #2
 8003d96:	6313      	str	r3, [r2, #48]	; 0x30
 8003d98:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003da8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003daa:	2312      	movs	r3, #18
 8003dac:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003db2:	2302      	movs	r3, #2
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003db6:	2304      	movs	r3, #4
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003dba:	f107 031c 	add.w	r3, r7, #28
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	481e      	ldr	r0, [pc, #120]	; (8003e3c <I2Cx_MspInit+0x15c>)
 8003dc2:	f004 f821 	bl	8007e08 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003dcc:	f107 031c 	add.w	r3, r7, #28
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	481a      	ldr	r0, [pc, #104]	; (8003e3c <I2Cx_MspInit+0x15c>)
 8003dd4:	f004 f818 	bl	8007e08 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003dd8:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003dde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003de2:	6413      	str	r3, [r2, #64]	; 0x40
 8003de4:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003df0:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4a0f      	ldr	r2, [pc, #60]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dfa:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4a0c      	ldr	r2, [pc, #48]	; (8003e34 <I2Cx_MspInit+0x154>)
 8003e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e06:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	210f      	movs	r1, #15
 8003e0c:	201f      	movs	r0, #31
 8003e0e:	f002 fd53 	bl	80068b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003e12:	201f      	movs	r0, #31
 8003e14:	f002 fd6c 	bl	80068f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	210f      	movs	r1, #15
 8003e1c:	2020      	movs	r0, #32
 8003e1e:	f002 fd4b 	bl	80068b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003e22:	2020      	movs	r0, #32
 8003e24:	f002 fd64 	bl	80068f0 <HAL_NVIC_EnableIRQ>
}
 8003e28:	bf00      	nop
 8003e2a:	3730      	adds	r7, #48	; 0x30
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000ca8 	.word	0x20000ca8
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40021c00 	.word	0x40021c00
 8003e3c:	40020400 	.word	0x40020400

08003e40 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f004 fdb7 	bl	80089bc <HAL_I2C_GetState>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d125      	bne.n	8003ea0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <I2Cx_Init+0x68>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d103      	bne.n	8003e64 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a13      	ldr	r2, [pc, #76]	; (8003eac <I2Cx_Init+0x6c>)
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e002      	b.n	8003e6a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <I2Cx_Init+0x70>)
 8003e68:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <I2Cx_Init+0x74>)
 8003e6e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff23 	bl	8003ce0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f004 faa0 	bl	80083e0 <HAL_I2C_Init>
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000ca8 	.word	0x20000ca8
 8003eac:	40005c00 	.word	0x40005c00
 8003eb0:	40005400 	.word	0x40005400
 8003eb4:	40912732 	.word	0x40912732

08003eb8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	; 0x28
 8003ebc:	af04      	add	r7, sp, #16
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	72fb      	strb	r3, [r7, #11]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	813b      	strh	r3, [r7, #8]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003ed6:	7afb      	ldrb	r3, [r7, #11]
 8003ed8:	b299      	uxth	r1, r3
 8003eda:	88f8      	ldrh	r0, [r7, #6]
 8003edc:	893a      	ldrh	r2, [r7, #8]
 8003ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ee2:	9302      	str	r3, [sp, #8]
 8003ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	4603      	mov	r3, r0
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f004 fc4a 	bl	8008788 <HAL_I2C_Mem_Read>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003efe:	7afb      	ldrb	r3, [r7, #11]
 8003f00:	4619      	mov	r1, r3
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f832 	bl	8003f6c <I2Cx_Error>
  }
  return status;    
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b08a      	sub	sp, #40	; 0x28
 8003f16:	af04      	add	r7, sp, #16
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	4608      	mov	r0, r1
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4603      	mov	r3, r0
 8003f22:	72fb      	strb	r3, [r7, #11]
 8003f24:	460b      	mov	r3, r1
 8003f26:	813b      	strh	r3, [r7, #8]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003f30:	7afb      	ldrb	r3, [r7, #11]
 8003f32:	b299      	uxth	r1, r3
 8003f34:	88f8      	ldrh	r0, [r7, #6]
 8003f36:	893a      	ldrh	r2, [r7, #8]
 8003f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f3c:	9302      	str	r3, [sp, #8]
 8003f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	4603      	mov	r3, r0
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f004 fb09 	bl	8008560 <HAL_I2C_Mem_Write>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d004      	beq.n	8003f62 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003f58:	7afb      	ldrb	r3, [r7, #11]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f805 	bl	8003f6c <I2Cx_Error>
  }
  return status;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f004 fac1 	bl	8008500 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ff5e 	bl	8003e40 <I2Cx_Init>
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003f90:	4802      	ldr	r0, [pc, #8]	; (8003f9c <TS_IO_Init+0x10>)
 8003f92:	f7ff ff55 	bl	8003e40 <I2Cx_Init>
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000ca8 	.word	0x20000ca8

08003fa0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
 8003faa:	460b      	mov	r3, r1
 8003fac:	71bb      	strb	r3, [r7, #6]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003fb2:	79bb      	ldrb	r3, [r7, #6]
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	79f9      	ldrb	r1, [r7, #7]
 8003fb8:	2301      	movs	r3, #1
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	1d7b      	adds	r3, r7, #5
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	4803      	ldr	r0, [pc, #12]	; (8003fd0 <TS_IO_Write+0x30>)
 8003fc4:	f7ff ffa5 	bl	8003f12 <I2Cx_WriteMultiple>
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000ca8 	.word	0x20000ca8

08003fd4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	4603      	mov	r3, r0
 8003fdc:	460a      	mov	r2, r1
 8003fde:	71fb      	strb	r3, [r7, #7]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003fe8:	79bb      	ldrb	r3, [r7, #6]
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	79f9      	ldrb	r1, [r7, #7]
 8003fee:	2301      	movs	r3, #1
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	f107 030f 	add.w	r3, r7, #15
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	4804      	ldr	r0, [pc, #16]	; (800400c <TS_IO_Read+0x38>)
 8003ffc:	f7ff ff5c 	bl	8003eb8 <I2Cx_ReadMultiple>

  return read_value;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000ca8 	.word	0x20000ca8

08004010 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f001 ff77 	bl	8005f0c <HAL_Delay>
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800402c:	4b31      	ldr	r3, [pc, #196]	; (80040f4 <BSP_LCD_Init+0xcc>)
 800402e:	2228      	movs	r2, #40	; 0x28
 8004030:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004032:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <BSP_LCD_Init+0xcc>)
 8004034:	2209      	movs	r2, #9
 8004036:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004038:	4b2e      	ldr	r3, [pc, #184]	; (80040f4 <BSP_LCD_Init+0xcc>)
 800403a:	2235      	movs	r2, #53	; 0x35
 800403c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800403e:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <BSP_LCD_Init+0xcc>)
 8004040:	220b      	movs	r2, #11
 8004042:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004044:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <BSP_LCD_Init+0xcc>)
 8004046:	f240 121b 	movw	r2, #283	; 0x11b
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800404c:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <BSP_LCD_Init+0xcc>)
 800404e:	f240 2215 	movw	r2, #533	; 0x215
 8004052:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <BSP_LCD_Init+0xcc>)
 8004056:	f240 121d 	movw	r2, #285	; 0x11d
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800405c:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <BSP_LCD_Init+0xcc>)
 800405e:	f240 2235 	movw	r2, #565	; 0x235
 8004062:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004064:	2100      	movs	r1, #0
 8004066:	4823      	ldr	r0, [pc, #140]	; (80040f4 <BSP_LCD_Init+0xcc>)
 8004068:	f000 fcb2 	bl	80049d0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800406c:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <BSP_LCD_Init+0xcc>)
 800406e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004072:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <BSP_LCD_Init+0xcc>)
 8004076:	f44f 7288 	mov.w	r2, #272	; 0x110
 800407a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <BSP_LCD_Init+0xcc>)
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <BSP_LCD_Init+0xcc>)
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800408c:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <BSP_LCD_Init+0xcc>)
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004094:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <BSP_LCD_Init+0xcc>)
 8004096:	2200      	movs	r2, #0
 8004098:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <BSP_LCD_Init+0xcc>)
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <BSP_LCD_Init+0xcc>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <BSP_LCD_Init+0xcc>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <BSP_LCD_Init+0xcc>)
 80040ae:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <BSP_LCD_Init+0xd0>)
 80040b0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80040b2:	4810      	ldr	r0, [pc, #64]	; (80040f4 <BSP_LCD_Init+0xcc>)
 80040b4:	f005 f992 	bl	80093dc <HAL_LTDC_GetState>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d103      	bne.n	80040c6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80040be:	2100      	movs	r1, #0
 80040c0:	480c      	ldr	r0, [pc, #48]	; (80040f4 <BSP_LCD_Init+0xcc>)
 80040c2:	f000 fbab 	bl	800481c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80040c6:	480b      	ldr	r0, [pc, #44]	; (80040f4 <BSP_LCD_Init+0xcc>)
 80040c8:	f004 ffb8 	bl	800903c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80040cc:	2201      	movs	r2, #1
 80040ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040d2:	480a      	ldr	r0, [pc, #40]	; (80040fc <BSP_LCD_Init+0xd4>)
 80040d4:	f004 f950 	bl	8008378 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80040d8:	2201      	movs	r2, #1
 80040da:	2108      	movs	r1, #8
 80040dc:	4808      	ldr	r0, [pc, #32]	; (8004100 <BSP_LCD_Init+0xd8>)
 80040de:	f004 f94b 	bl	8008378 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80040e2:	f000 fd95 	bl	8004c10 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80040e6:	4807      	ldr	r0, [pc, #28]	; (8004104 <BSP_LCD_Init+0xdc>)
 80040e8:	f000 f8d8 	bl	800429c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000cfc 	.word	0x20000cfc
 80040f8:	40016800 	.word	0x40016800
 80040fc:	40022000 	.word	0x40022000
 8004100:	40022800 	.word	0x40022800
 8004104:	20000034 	.word	0x20000034

08004108 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <BSP_LCD_GetXSize+0x20>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a06      	ldr	r2, [pc, #24]	; (800412c <BSP_LCD_GetXSize+0x24>)
 8004112:	2134      	movs	r1, #52	; 0x34
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	3360      	adds	r3, #96	; 0x60
 800411c:	681b      	ldr	r3, [r3, #0]
}
 800411e:	4618      	mov	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	20000de4 	.word	0x20000de4
 800412c:	20000cfc 	.word	0x20000cfc

08004130 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <BSP_LCD_GetYSize+0x20>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a06      	ldr	r2, [pc, #24]	; (8004154 <BSP_LCD_GetYSize+0x24>)
 800413a:	2134      	movs	r1, #52	; 0x34
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	3364      	adds	r3, #100	; 0x64
 8004144:	681b      	ldr	r3, [r3, #0]
}
 8004146:	4618      	mov	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000de4 	.word	0x20000de4
 8004154:	20000cfc 	.word	0x20000cfc

08004158 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004158:	b580      	push	{r7, lr}
 800415a:	b090      	sub	sp, #64	; 0x40
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004168:	f7ff ffce 	bl	8004108 <BSP_LCD_GetXSize>
 800416c:	4603      	mov	r3, r0
 800416e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004174:	f7ff ffdc 	bl	8004130 <BSP_LCD_GetYSize>
 8004178:	4603      	mov	r3, r0
 800417a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800417c:	2300      	movs	r3, #0
 800417e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004184:	23ff      	movs	r3, #255	; 0xff
 8004186:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800419e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80041a4:	2307      	movs	r3, #7
 80041a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80041a8:	f7ff ffae 	bl	8004108 <BSP_LCD_GetXSize>
 80041ac:	4603      	mov	r3, r0
 80041ae:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80041b0:	f7ff ffbe 	bl	8004130 <BSP_LCD_GetYSize>
 80041b4:	4603      	mov	r3, r0
 80041b6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80041b8:	88fa      	ldrh	r2, [r7, #6]
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	4619      	mov	r1, r3
 80041c0:	4812      	ldr	r0, [pc, #72]	; (800420c <BSP_LCD_LayerDefaultInit+0xb4>)
 80041c2:	f005 f8cd 	bl	8009360 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	4911      	ldr	r1, [pc, #68]	; (8004210 <BSP_LCD_LayerDefaultInit+0xb8>)
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	3304      	adds	r3, #4
 80041d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80041dc:	88fa      	ldrh	r2, [r7, #6]
 80041de:	490c      	ldr	r1, [pc, #48]	; (8004210 <BSP_LCD_LayerDefaultInit+0xb8>)
 80041e0:	4613      	mov	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	3308      	adds	r3, #8
 80041ec:	4a09      	ldr	r2, [pc, #36]	; (8004214 <BSP_LCD_LayerDefaultInit+0xbc>)
 80041ee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80041f0:	88fa      	ldrh	r2, [r7, #6]
 80041f2:	4907      	ldr	r1, [pc, #28]	; (8004210 <BSP_LCD_LayerDefaultInit+0xb8>)
 80041f4:	4613      	mov	r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004202:	601a      	str	r2, [r3, #0]
}
 8004204:	bf00      	nop
 8004206:	3740      	adds	r7, #64	; 0x40
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000cfc 	.word	0x20000cfc
 8004210:	20000de8 	.word	0x20000de8
 8004214:	20000034 	.word	0x20000034

08004218 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004220:	4a04      	ldr	r2, [pc, #16]	; (8004234 <BSP_LCD_SelectLayer+0x1c>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6013      	str	r3, [r2, #0]
} 
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000de4 	.word	0x20000de4

08004238 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <BSP_LCD_SetTextColor+0x28>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4907      	ldr	r1, [pc, #28]	; (8004264 <BSP_LCD_SetTextColor+0x2c>)
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	601a      	str	r2, [r3, #0]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	20000de4 	.word	0x20000de4
 8004264:	20000de8 	.word	0x20000de8

08004268 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004270:	4b08      	ldr	r3, [pc, #32]	; (8004294 <BSP_LCD_SetBackColor+0x2c>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4908      	ldr	r1, [pc, #32]	; (8004298 <BSP_LCD_SetBackColor+0x30>)
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	3304      	adds	r3, #4
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000de4 	.word	0x20000de4
 8004298:	20000de8 	.word	0x20000de8

0800429c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80042a4:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <BSP_LCD_SetFont+0x2c>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4908      	ldr	r1, [pc, #32]	; (80042cc <BSP_LCD_SetFont+0x30>)
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	3308      	adds	r3, #8
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000de4 	.word	0x20000de4
 80042cc:	20000de8 	.word	0x20000de8

080042d0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <BSP_LCD_GetFont+0x24>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4907      	ldr	r1, [pc, #28]	; (80042f8 <BSP_LCD_GetFont+0x28>)
 80042da:	4613      	mov	r3, r2
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	3308      	adds	r3, #8
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000de4 	.word	0x20000de4
 80042f8:	20000de8 	.word	0x20000de8

080042fc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80042fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fe:	b085      	sub	sp, #20
 8004300:	af02      	add	r7, sp, #8
 8004302:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <BSP_LCD_Clear+0x48>)
 8004306:	681c      	ldr	r4, [r3, #0]
 8004308:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <BSP_LCD_Clear+0x48>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a0e      	ldr	r2, [pc, #56]	; (8004348 <BSP_LCD_Clear+0x4c>)
 800430e:	2134      	movs	r1, #52	; 0x34
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	335c      	adds	r3, #92	; 0x5c
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461e      	mov	r6, r3
 800431c:	f7ff fef4 	bl	8004108 <BSP_LCD_GetXSize>
 8004320:	4605      	mov	r5, r0
 8004322:	f7ff ff05 	bl	8004130 <BSP_LCD_GetYSize>
 8004326:	4602      	mov	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	2300      	movs	r3, #0
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	462a      	mov	r2, r5
 8004334:	4631      	mov	r1, r6
 8004336:	4620      	mov	r0, r4
 8004338:	f000 fc1e 	bl	8004b78 <LL_FillBuffer>
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004344:	20000de4 	.word	0x20000de4
 8004348:	20000cfc 	.word	0x20000cfc

0800434c <BSP_LCD_ClearStringLine>:
  * @brief  Clears the selected line.
  * @param  Line: Line to be cleared
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8004354:	4b2d      	ldr	r3, [pc, #180]	; (800440c <BSP_LCD_ClearStringLine+0xc0>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	492d      	ldr	r1, [pc, #180]	; (8004410 <BSP_LCD_ClearStringLine+0xc4>)
 800435a:	4613      	mov	r3, r2
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8004368:	4b28      	ldr	r3, [pc, #160]	; (800440c <BSP_LCD_ClearStringLine+0xc0>)
 800436a:	6819      	ldr	r1, [r3, #0]
 800436c:	4b27      	ldr	r3, [pc, #156]	; (800440c <BSP_LCD_ClearStringLine+0xc0>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4827      	ldr	r0, [pc, #156]	; (8004410 <BSP_LCD_ClearStringLine+0xc4>)
 8004372:	460b      	mov	r3, r1
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	440b      	add	r3, r1
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4403      	add	r3, r0
 800437c:	3304      	adds	r3, #4
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	4823      	ldr	r0, [pc, #140]	; (8004410 <BSP_LCD_ClearStringLine+0xc4>)
 8004382:	4613      	mov	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4403      	add	r3, r0
 800438c:	6019      	str	r1, [r3, #0]
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 800438e:	4b1f      	ldr	r3, [pc, #124]	; (800440c <BSP_LCD_ClearStringLine+0xc0>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	491f      	ldr	r1, [pc, #124]	; (8004410 <BSP_LCD_ClearStringLine+0xc4>)
 8004394:	4613      	mov	r3, r2
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	3308      	adds	r3, #8
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	88da      	ldrh	r2, [r3, #6]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	fb12 f303 	smulbb	r3, r2, r3
 80043ac:	b29c      	uxth	r4, r3
 80043ae:	f7ff feab 	bl	8004108 <BSP_LCD_GetXSize>
 80043b2:	4603      	mov	r3, r0
 80043b4:	b299      	uxth	r1, r3
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <BSP_LCD_ClearStringLine+0xc0>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4815      	ldr	r0, [pc, #84]	; (8004410 <BSP_LCD_ClearStringLine+0xc4>)
 80043bc:	4613      	mov	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4403      	add	r3, r0
 80043c6:	3308      	adds	r3, #8
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	88db      	ldrh	r3, [r3, #6]
 80043cc:	460a      	mov	r2, r1
 80043ce:	4621      	mov	r1, r4
 80043d0:	2000      	movs	r0, #0
 80043d2:	f000 f98b 	bl	80046ec <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = color_backup;
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <BSP_LCD_ClearStringLine+0xc0>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	490d      	ldr	r1, [pc, #52]	; (8004410 <BSP_LCD_ClearStringLine+0xc4>)
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80043ea:	4b08      	ldr	r3, [pc, #32]	; (800440c <BSP_LCD_ClearStringLine+0xc0>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4908      	ldr	r1, [pc, #32]	; (8004410 <BSP_LCD_ClearStringLine+0xc4>)
 80043f0:	4613      	mov	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff ff1b 	bl	8004238 <BSP_LCD_SetTextColor>
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bd90      	pop	{r4, r7, pc}
 800440a:	bf00      	nop
 800440c:	20000de4 	.word	0x20000de4
 8004410:	20000de8 	.word	0x20000de8

08004414 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004414:	b590      	push	{r4, r7, lr}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	80fb      	strh	r3, [r7, #6]
 800441e:	460b      	mov	r3, r1
 8004420:	80bb      	strh	r3, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <BSP_LCD_DisplayChar+0x80>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	491b      	ldr	r1, [pc, #108]	; (8004498 <BSP_LCD_DisplayChar+0x84>)
 800442c:	4613      	mov	r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	3308      	adds	r3, #8
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6819      	ldr	r1, [r3, #0]
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004442:	4b14      	ldr	r3, [pc, #80]	; (8004494 <BSP_LCD_DisplayChar+0x80>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4c14      	ldr	r4, [pc, #80]	; (8004498 <BSP_LCD_DisplayChar+0x84>)
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4423      	add	r3, r4
 8004452:	3308      	adds	r3, #8
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004458:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800445c:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <BSP_LCD_DisplayChar+0x80>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4c0d      	ldr	r4, [pc, #52]	; (8004498 <BSP_LCD_DisplayChar+0x84>)
 8004462:	4613      	mov	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4423      	add	r3, r4
 800446c:	3308      	adds	r3, #8
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	889b      	ldrh	r3, [r3, #4]
 8004472:	3307      	adds	r3, #7
 8004474:	2b00      	cmp	r3, #0
 8004476:	da00      	bge.n	800447a <BSP_LCD_DisplayChar+0x66>
 8004478:	3307      	adds	r3, #7
 800447a:	10db      	asrs	r3, r3, #3
 800447c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004480:	18ca      	adds	r2, r1, r3
 8004482:	88b9      	ldrh	r1, [r7, #4]
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fabe 	bl	8004a08 <DrawChar>
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bd90      	pop	{r4, r7, pc}
 8004494:	20000de4 	.word	0x20000de4
 8004498:	20000de8 	.word	0x20000de8

0800449c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800449c:	b5b0      	push	{r4, r5, r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60ba      	str	r2, [r7, #8]
 80044a4:	461a      	mov	r2, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	81fb      	strh	r3, [r7, #14]
 80044aa:	460b      	mov	r3, r1
 80044ac:	81bb      	strh	r3, [r7, #12]
 80044ae:	4613      	mov	r3, r2
 80044b0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80044b2:	2301      	movs	r3, #1
 80044b4:	83fb      	strh	r3, [r7, #30]
 80044b6:	2300      	movs	r3, #0
 80044b8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	2300      	movs	r3, #0
 80044c0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80044c6:	e002      	b.n	80044ce <BSP_LCD_DisplayStringAt+0x32>
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	617a      	str	r2, [r7, #20]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f6      	bne.n	80044c8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80044da:	f7ff fe15 	bl	8004108 <BSP_LCD_GetXSize>
 80044de:	4601      	mov	r1, r0
 80044e0:	4b50      	ldr	r3, [pc, #320]	; (8004624 <BSP_LCD_DisplayStringAt+0x188>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4850      	ldr	r0, [pc, #320]	; (8004628 <BSP_LCD_DisplayStringAt+0x18c>)
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4403      	add	r3, r0
 80044f0:	3308      	adds	r3, #8
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	889b      	ldrh	r3, [r3, #4]
 80044f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80044fa:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d01c      	beq.n	800453c <BSP_LCD_DisplayStringAt+0xa0>
 8004502:	2b03      	cmp	r3, #3
 8004504:	dc33      	bgt.n	800456e <BSP_LCD_DisplayStringAt+0xd2>
 8004506:	2b01      	cmp	r3, #1
 8004508:	d002      	beq.n	8004510 <BSP_LCD_DisplayStringAt+0x74>
 800450a:	2b02      	cmp	r3, #2
 800450c:	d019      	beq.n	8004542 <BSP_LCD_DisplayStringAt+0xa6>
 800450e:	e02e      	b.n	800456e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	1ad1      	subs	r1, r2, r3
 8004516:	4b43      	ldr	r3, [pc, #268]	; (8004624 <BSP_LCD_DisplayStringAt+0x188>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4843      	ldr	r0, [pc, #268]	; (8004628 <BSP_LCD_DisplayStringAt+0x18c>)
 800451c:	4613      	mov	r3, r2
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4403      	add	r3, r0
 8004526:	3308      	adds	r3, #8
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	889b      	ldrh	r3, [r3, #4]
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	89fb      	ldrh	r3, [r7, #14]
 8004536:	4413      	add	r3, r2
 8004538:	83fb      	strh	r3, [r7, #30]
      break;
 800453a:	e01b      	b.n	8004574 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800453c:	89fb      	ldrh	r3, [r7, #14]
 800453e:	83fb      	strh	r3, [r7, #30]
      break;
 8004540:	e018      	b.n	8004574 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	b299      	uxth	r1, r3
 800454a:	4b36      	ldr	r3, [pc, #216]	; (8004624 <BSP_LCD_DisplayStringAt+0x188>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4836      	ldr	r0, [pc, #216]	; (8004628 <BSP_LCD_DisplayStringAt+0x18c>)
 8004550:	4613      	mov	r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4403      	add	r3, r0
 800455a:	3308      	adds	r3, #8
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	889b      	ldrh	r3, [r3, #4]
 8004560:	fb11 f303 	smulbb	r3, r1, r3
 8004564:	b29a      	uxth	r2, r3
 8004566:	89fb      	ldrh	r3, [r7, #14]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	83fb      	strh	r3, [r7, #30]
      break;
 800456c:	e002      	b.n	8004574 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800456e:	89fb      	ldrh	r3, [r7, #14]
 8004570:	83fb      	strh	r3, [r7, #30]
      break;
 8004572:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004574:	8bfb      	ldrh	r3, [r7, #30]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <BSP_LCD_DisplayStringAt+0xe6>
 800457a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800457e:	2b00      	cmp	r3, #0
 8004580:	da1d      	bge.n	80045be <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8004582:	2301      	movs	r3, #1
 8004584:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004586:	e01a      	b.n	80045be <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	781a      	ldrb	r2, [r3, #0]
 800458c:	89b9      	ldrh	r1, [r7, #12]
 800458e:	8bfb      	ldrh	r3, [r7, #30]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff3f 	bl	8004414 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8004596:	4b23      	ldr	r3, [pc, #140]	; (8004624 <BSP_LCD_DisplayStringAt+0x188>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4923      	ldr	r1, [pc, #140]	; (8004628 <BSP_LCD_DisplayStringAt+0x18c>)
 800459c:	4613      	mov	r3, r2
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	3308      	adds	r3, #8
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	889a      	ldrh	r2, [r3, #4]
 80045ac:	8bfb      	ldrh	r3, [r7, #30]
 80045ae:	4413      	add	r3, r2
 80045b0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	3301      	adds	r3, #1
 80045b6:	60bb      	str	r3, [r7, #8]
    i++;
 80045b8:	8bbb      	ldrh	r3, [r7, #28]
 80045ba:	3301      	adds	r3, #1
 80045bc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bf14      	ite	ne
 80045c6:	2301      	movne	r3, #1
 80045c8:	2300      	moveq	r3, #0
 80045ca:	b2dc      	uxtb	r4, r3
 80045cc:	f7ff fd9c 	bl	8004108 <BSP_LCD_GetXSize>
 80045d0:	8bb9      	ldrh	r1, [r7, #28]
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <BSP_LCD_DisplayStringAt+0x188>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4d14      	ldr	r5, [pc, #80]	; (8004628 <BSP_LCD_DisplayStringAt+0x18c>)
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	442b      	add	r3, r5
 80045e2:	3308      	adds	r3, #8
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	889b      	ldrh	r3, [r3, #4]
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	1ac3      	subs	r3, r0, r3
 80045ee:	b299      	uxth	r1, r3
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <BSP_LCD_DisplayStringAt+0x188>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	480c      	ldr	r0, [pc, #48]	; (8004628 <BSP_LCD_DisplayStringAt+0x18c>)
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4403      	add	r3, r0
 8004600:	3308      	adds	r3, #8
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	889b      	ldrh	r3, [r3, #4]
 8004606:	4299      	cmp	r1, r3
 8004608:	bf2c      	ite	cs
 800460a:	2301      	movcs	r3, #1
 800460c:	2300      	movcc	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	4023      	ands	r3, r4
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1b7      	bne.n	8004588 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bdb0      	pop	{r4, r5, r7, pc}
 8004622:	bf00      	nop
 8004624:	20000de4 	.word	0x20000de4
 8004628:	20000de8 	.word	0x20000de8

0800462c <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	6039      	str	r1, [r7, #0]
 8004636:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8004638:	f7ff fe4a 	bl	80042d0 <BSP_LCD_GetFont>
 800463c:	4603      	mov	r3, r0
 800463e:	88db      	ldrh	r3, [r3, #6]
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	fb12 f303 	smulbb	r3, r2, r3
 8004646:	b299      	uxth	r1, r3
 8004648:	2303      	movs	r3, #3
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	2000      	movs	r0, #0
 800464e:	f7ff ff25 	bl	800449c <BSP_LCD_DisplayStringAt>
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800465c:	b5b0      	push	{r4, r5, r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	603a      	str	r2, [r7, #0]
 8004666:	80fb      	strh	r3, [r7, #6]
 8004668:	460b      	mov	r3, r1
 800466a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800466c:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <BSP_LCD_DrawPixel+0x88>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <BSP_LCD_DrawPixel+0x8c>)
 8004672:	2134      	movs	r1, #52	; 0x34
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	4413      	add	r3, r2
 800467a:	3348      	adds	r3, #72	; 0x48
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d116      	bne.n	80046b0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004682:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <BSP_LCD_DrawPixel+0x88>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <BSP_LCD_DrawPixel+0x8c>)
 8004688:	2134      	movs	r1, #52	; 0x34
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	4413      	add	r3, r2
 8004690:	335c      	adds	r3, #92	; 0x5c
 8004692:	681c      	ldr	r4, [r3, #0]
 8004694:	88bd      	ldrh	r5, [r7, #4]
 8004696:	f7ff fd37 	bl	8004108 <BSP_LCD_GetXSize>
 800469a:	4603      	mov	r3, r0
 800469c:	fb03 f205 	mul.w	r2, r3, r5
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	4413      	add	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4423      	add	r3, r4
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	b292      	uxth	r2, r2
 80046ac:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80046ae:	e015      	b.n	80046dc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80046b0:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <BSP_LCD_DrawPixel+0x88>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <BSP_LCD_DrawPixel+0x8c>)
 80046b6:	2134      	movs	r1, #52	; 0x34
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	335c      	adds	r3, #92	; 0x5c
 80046c0:	681c      	ldr	r4, [r3, #0]
 80046c2:	88bd      	ldrh	r5, [r7, #4]
 80046c4:	f7ff fd20 	bl	8004108 <BSP_LCD_GetXSize>
 80046c8:	4603      	mov	r3, r0
 80046ca:	fb03 f205 	mul.w	r2, r3, r5
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4423      	add	r3, r4
 80046d6:	461a      	mov	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	6013      	str	r3, [r2, #0]
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bdb0      	pop	{r4, r5, r7, pc}
 80046e4:	20000de4 	.word	0x20000de4
 80046e8:	20000cfc 	.word	0x20000cfc

080046ec <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80046ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f0:	b086      	sub	sp, #24
 80046f2:	af02      	add	r7, sp, #8
 80046f4:	4604      	mov	r4, r0
 80046f6:	4608      	mov	r0, r1
 80046f8:	4611      	mov	r1, r2
 80046fa:	461a      	mov	r2, r3
 80046fc:	4623      	mov	r3, r4
 80046fe:	80fb      	strh	r3, [r7, #6]
 8004700:	4603      	mov	r3, r0
 8004702:	80bb      	strh	r3, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
 8004708:	4613      	mov	r3, r2
 800470a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004710:	4b30      	ldr	r3, [pc, #192]	; (80047d4 <BSP_LCD_FillRect+0xe8>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4930      	ldr	r1, [pc, #192]	; (80047d8 <BSP_LCD_FillRect+0xec>)
 8004716:	4613      	mov	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fd88 	bl	8004238 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004728:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <BSP_LCD_FillRect+0xe8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2b      	ldr	r2, [pc, #172]	; (80047dc <BSP_LCD_FillRect+0xf0>)
 800472e:	2134      	movs	r1, #52	; 0x34
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	4413      	add	r3, r2
 8004736:	3348      	adds	r3, #72	; 0x48
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d114      	bne.n	8004768 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800473e:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <BSP_LCD_FillRect+0xe8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a26      	ldr	r2, [pc, #152]	; (80047dc <BSP_LCD_FillRect+0xf0>)
 8004744:	2134      	movs	r1, #52	; 0x34
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	335c      	adds	r3, #92	; 0x5c
 800474e:	681c      	ldr	r4, [r3, #0]
 8004750:	f7ff fcda 	bl	8004108 <BSP_LCD_GetXSize>
 8004754:	4602      	mov	r2, r0
 8004756:	88bb      	ldrh	r3, [r7, #4]
 8004758:	fb03 f202 	mul.w	r2, r3, r2
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	4413      	add	r3, r2
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4423      	add	r3, r4
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e013      	b.n	8004790 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004768:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <BSP_LCD_FillRect+0xe8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <BSP_LCD_FillRect+0xf0>)
 800476e:	2134      	movs	r1, #52	; 0x34
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	4413      	add	r3, r2
 8004776:	335c      	adds	r3, #92	; 0x5c
 8004778:	681c      	ldr	r4, [r3, #0]
 800477a:	f7ff fcc5 	bl	8004108 <BSP_LCD_GetXSize>
 800477e:	4602      	mov	r2, r0
 8004780:	88bb      	ldrh	r3, [r7, #4]
 8004782:	fb03 f202 	mul.w	r2, r3, r2
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4423      	add	r3, r4
 800478e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004790:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <BSP_LCD_FillRect+0xe8>)
 8004792:	681c      	ldr	r4, [r3, #0]
 8004794:	68fd      	ldr	r5, [r7, #12]
 8004796:	887e      	ldrh	r6, [r7, #2]
 8004798:	f8b7 8000 	ldrh.w	r8, [r7]
 800479c:	f7ff fcb4 	bl	8004108 <BSP_LCD_GetXSize>
 80047a0:	4602      	mov	r2, r0
 80047a2:	887b      	ldrh	r3, [r7, #2]
 80047a4:	1ad1      	subs	r1, r2, r3
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <BSP_LCD_FillRect+0xe8>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	480b      	ldr	r0, [pc, #44]	; (80047d8 <BSP_LCD_FillRect+0xec>)
 80047ac:	4613      	mov	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4403      	add	r3, r0
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	9100      	str	r1, [sp, #0]
 80047bc:	4643      	mov	r3, r8
 80047be:	4632      	mov	r2, r6
 80047c0:	4629      	mov	r1, r5
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 f9d8 	bl	8004b78 <LL_FillBuffer>
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047d2:	bf00      	nop
 80047d4:	20000de4 	.word	0x20000de4
 80047d8:	20000de8 	.word	0x20000de8
 80047dc:	20000cfc 	.word	0x20000cfc

080047e0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <BSP_LCD_DisplayOn+0x30>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <BSP_LCD_DisplayOn+0x30>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80047f4:	2201      	movs	r2, #1
 80047f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047fa:	4806      	ldr	r0, [pc, #24]	; (8004814 <BSP_LCD_DisplayOn+0x34>)
 80047fc:	f003 fdbc 	bl	8008378 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004800:	2201      	movs	r2, #1
 8004802:	2108      	movs	r1, #8
 8004804:	4804      	ldr	r0, [pc, #16]	; (8004818 <BSP_LCD_DisplayOn+0x38>)
 8004806:	f003 fdb7 	bl	8008378 <HAL_GPIO_WritePin>
}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000cfc 	.word	0x20000cfc
 8004814:	40022000 	.word	0x40022000
 8004818:	40022800 	.word	0x40022800

0800481c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b090      	sub	sp, #64	; 0x40
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004826:	4b64      	ldr	r3, [pc, #400]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	4a63      	ldr	r2, [pc, #396]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 800482c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004830:	6453      	str	r3, [r2, #68]	; 0x44
 8004832:	4b61      	ldr	r3, [pc, #388]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800483e:	4b5e      	ldr	r3, [pc, #376]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	4a5d      	ldr	r2, [pc, #372]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 8004844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004848:	6313      	str	r3, [r2, #48]	; 0x30
 800484a:	4b5b      	ldr	r3, [pc, #364]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004856:	4b58      	ldr	r3, [pc, #352]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	4a57      	ldr	r2, [pc, #348]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 800485c:	f043 0310 	orr.w	r3, r3, #16
 8004860:	6313      	str	r3, [r2, #48]	; 0x30
 8004862:	4b55      	ldr	r3, [pc, #340]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800486e:	4b52      	ldr	r3, [pc, #328]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	4a51      	ldr	r2, [pc, #324]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 8004874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004878:	6313      	str	r3, [r2, #48]	; 0x30
 800487a:	4b4f      	ldr	r3, [pc, #316]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004886:	4b4c      	ldr	r3, [pc, #304]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	4a4b      	ldr	r2, [pc, #300]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	6313      	str	r3, [r2, #48]	; 0x30
 8004892:	4b49      	ldr	r3, [pc, #292]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800489e:	4b46      	ldr	r3, [pc, #280]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	4a45      	ldr	r2, [pc, #276]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048a8:	6313      	str	r3, [r2, #48]	; 0x30
 80048aa:	4b43      	ldr	r3, [pc, #268]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80048b6:	4b40      	ldr	r3, [pc, #256]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	4a3f      	ldr	r2, [pc, #252]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048c0:	6313      	str	r3, [r2, #48]	; 0x30
 80048c2:	4b3d      	ldr	r3, [pc, #244]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80048ce:	4b3a      	ldr	r3, [pc, #232]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	4a39      	ldr	r2, [pc, #228]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d8:	6313      	str	r3, [r2, #48]	; 0x30
 80048da:	4b37      	ldr	r3, [pc, #220]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80048e6:	4b34      	ldr	r3, [pc, #208]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	4a33      	ldr	r2, [pc, #204]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048f0:	6313      	str	r3, [r2, #48]	; 0x30
 80048f2:	4b31      	ldr	r3, [pc, #196]	; (80049b8 <BSP_LCD_MspInit+0x19c>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80048fe:	2310      	movs	r3, #16
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004902:	2302      	movs	r3, #2
 8004904:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004906:	2300      	movs	r3, #0
 8004908:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800490a:	2302      	movs	r3, #2
 800490c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800490e:	230e      	movs	r3, #14
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004916:	4619      	mov	r1, r3
 8004918:	4828      	ldr	r0, [pc, #160]	; (80049bc <BSP_LCD_MspInit+0x1a0>)
 800491a:	f003 fa75 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800491e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004924:	2302      	movs	r3, #2
 8004926:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004928:	2309      	movs	r3, #9
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800492c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004930:	4619      	mov	r1, r3
 8004932:	4823      	ldr	r0, [pc, #140]	; (80049c0 <BSP_LCD_MspInit+0x1a4>)
 8004934:	f003 fa68 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004938:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800493e:	2302      	movs	r3, #2
 8004940:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004942:	230e      	movs	r3, #14
 8004944:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800494a:	4619      	mov	r1, r3
 800494c:	481d      	ldr	r0, [pc, #116]	; (80049c4 <BSP_LCD_MspInit+0x1a8>)
 800494e:	f003 fa5b 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004952:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004958:	2302      	movs	r3, #2
 800495a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800495c:	230e      	movs	r3, #14
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004964:	4619      	mov	r1, r3
 8004966:	4818      	ldr	r0, [pc, #96]	; (80049c8 <BSP_LCD_MspInit+0x1ac>)
 8004968:	f003 fa4e 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800496c:	23f7      	movs	r3, #247	; 0xf7
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004970:	2302      	movs	r3, #2
 8004972:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004974:	230e      	movs	r3, #14
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800497c:	4619      	mov	r1, r3
 800497e:	4813      	ldr	r0, [pc, #76]	; (80049cc <BSP_LCD_MspInit+0x1b0>)
 8004980:	f003 fa42 	bl	8007e08 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800498a:	2301      	movs	r3, #1
 800498c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800498e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004992:	4619      	mov	r1, r3
 8004994:	480b      	ldr	r0, [pc, #44]	; (80049c4 <BSP_LCD_MspInit+0x1a8>)
 8004996:	f003 fa37 	bl	8007e08 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800499a:	2308      	movs	r3, #8
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800499e:	2301      	movs	r3, #1
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80049a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049a6:	4619      	mov	r1, r3
 80049a8:	4808      	ldr	r0, [pc, #32]	; (80049cc <BSP_LCD_MspInit+0x1b0>)
 80049aa:	f003 fa2d 	bl	8007e08 <HAL_GPIO_Init>
}
 80049ae:	bf00      	nop
 80049b0:	3740      	adds	r7, #64	; 0x40
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40021800 	.word	0x40021800
 80049c4:	40022000 	.word	0x40022000
 80049c8:	40022400 	.word	0x40022400
 80049cc:	40022800 	.word	0x40022800

080049d0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <BSP_LCD_ClockConfig+0x34>)
 80049dc:	2208      	movs	r2, #8
 80049de:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80049e0:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <BSP_LCD_ClockConfig+0x34>)
 80049e2:	22c0      	movs	r2, #192	; 0xc0
 80049e4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <BSP_LCD_ClockConfig+0x34>)
 80049e8:	2205      	movs	r2, #5
 80049ea:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <BSP_LCD_ClockConfig+0x34>)
 80049ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80049f4:	4803      	ldr	r0, [pc, #12]	; (8004a04 <BSP_LCD_ClockConfig+0x34>)
 80049f6:	f005 fbb5 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000e00 	.word	0x20000e00

08004a08 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	603a      	str	r2, [r7, #0]
 8004a12:	80fb      	strh	r3, [r7, #6]
 8004a14:	460b      	mov	r3, r1
 8004a16:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004a20:	4b53      	ldr	r3, [pc, #332]	; (8004b70 <DrawChar+0x168>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4953      	ldr	r1, [pc, #332]	; (8004b74 <DrawChar+0x16c>)
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	3308      	adds	r3, #8
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	88db      	ldrh	r3, [r3, #6]
 8004a36:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004a38:	4b4d      	ldr	r3, [pc, #308]	; (8004b70 <DrawChar+0x168>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	494d      	ldr	r1, [pc, #308]	; (8004b74 <DrawChar+0x16c>)
 8004a3e:	4613      	mov	r3, r2
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	3308      	adds	r3, #8
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	889b      	ldrh	r3, [r3, #4]
 8004a4e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004a50:	8a3b      	ldrh	r3, [r7, #16]
 8004a52:	3307      	adds	r3, #7
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	da00      	bge.n	8004a5a <DrawChar+0x52>
 8004a58:	3307      	adds	r3, #7
 8004a5a:	10db      	asrs	r3, r3, #3
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	8a3b      	ldrh	r3, [r7, #16]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	e076      	b.n	8004b5e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004a70:	8a3b      	ldrh	r3, [r7, #16]
 8004a72:	3307      	adds	r3, #7
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	da00      	bge.n	8004a7a <DrawChar+0x72>
 8004a78:	3307      	adds	r3, #7
 8004a7a:	10db      	asrs	r3, r3, #3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	fb02 f303 	mul.w	r3, r2, r3
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	4413      	add	r3, r2
 8004a88:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004a8a:	8a3b      	ldrh	r3, [r7, #16]
 8004a8c:	3307      	adds	r3, #7
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	da00      	bge.n	8004a94 <DrawChar+0x8c>
 8004a92:	3307      	adds	r3, #7
 8004a94:	10db      	asrs	r3, r3, #3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d002      	beq.n	8004aa0 <DrawChar+0x98>
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d004      	beq.n	8004aa8 <DrawChar+0xa0>
 8004a9e:	e00c      	b.n	8004aba <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	617b      	str	r3, [r7, #20]
      break;
 8004aa6:	e016      	b.n	8004ad6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	3201      	adds	r2, #1
 8004ab2:	7812      	ldrb	r2, [r2, #0]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
      break;
 8004ab8:	e00d      	b.n	8004ad6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	041a      	lsls	r2, r3, #16
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	3202      	adds	r2, #2
 8004ace:	7812      	ldrb	r2, [r2, #0]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
      break;
 8004ad4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	e036      	b.n	8004b4a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004adc:	8a3a      	ldrh	r2, [r7, #16]
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	1ad2      	subs	r2, r2, r3
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	2201      	movs	r2, #1
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d012      	beq.n	8004b1e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	4413      	add	r3, r2
 8004b00:	b298      	uxth	r0, r3
 8004b02:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <DrawChar+0x168>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	491b      	ldr	r1, [pc, #108]	; (8004b74 <DrawChar+0x16c>)
 8004b08:	4613      	mov	r3, r2
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	88bb      	ldrh	r3, [r7, #4]
 8004b16:	4619      	mov	r1, r3
 8004b18:	f7ff fda0 	bl	800465c <BSP_LCD_DrawPixel>
 8004b1c:	e012      	b.n	8004b44 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	4413      	add	r3, r2
 8004b26:	b298      	uxth	r0, r3
 8004b28:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <DrawChar+0x168>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4911      	ldr	r1, [pc, #68]	; (8004b74 <DrawChar+0x16c>)
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	3304      	adds	r3, #4
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	88bb      	ldrh	r3, [r7, #4]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	f7ff fd8c 	bl	800465c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	3301      	adds	r3, #1
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	8a3b      	ldrh	r3, [r7, #16]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d3c4      	bcc.n	8004adc <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004b52:	88bb      	ldrh	r3, [r7, #4]
 8004b54:	3301      	adds	r3, #1
 8004b56:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	8a7b      	ldrh	r3, [r7, #18]
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d384      	bcc.n	8004a70 <DrawChar+0x68>
  }
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000de4 	.word	0x20000de4
 8004b74:	20000de8 	.word	0x20000de8

08004b78 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8004b86:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <LL_FillBuffer+0x88>)
 8004b88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004b8c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004b8e:	4b1d      	ldr	r3, [pc, #116]	; (8004c04 <LL_FillBuffer+0x8c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <LL_FillBuffer+0x90>)
 8004b94:	2134      	movs	r1, #52	; 0x34
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3348      	adds	r3, #72	; 0x48
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d103      	bne.n	8004bac <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004ba4:	4b16      	ldr	r3, [pc, #88]	; (8004c00 <LL_FillBuffer+0x88>)
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	e002      	b.n	8004bb2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <LL_FillBuffer+0x88>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004bb2:	4a13      	ldr	r2, [pc, #76]	; (8004c00 <LL_FillBuffer+0x88>)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <LL_FillBuffer+0x88>)
 8004bba:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <LL_FillBuffer+0x94>)
 8004bbc:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004bbe:	4810      	ldr	r0, [pc, #64]	; (8004c00 <LL_FillBuffer+0x88>)
 8004bc0:	f002 fd86 	bl	80076d0 <HAL_DMA2D_Init>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d115      	bne.n	8004bf6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	480c      	ldr	r0, [pc, #48]	; (8004c00 <LL_FillBuffer+0x88>)
 8004bce:	f002 ffed 	bl	8007bac <HAL_DMA2D_ConfigLayer>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10e      	bne.n	8004bf6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69f9      	ldr	r1, [r7, #28]
 8004be2:	4807      	ldr	r0, [pc, #28]	; (8004c00 <LL_FillBuffer+0x88>)
 8004be4:	f002 fdbe 	bl	8007764 <HAL_DMA2D_Start>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d103      	bne.n	8004bf6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004bee:	210a      	movs	r1, #10
 8004bf0:	4803      	ldr	r0, [pc, #12]	; (8004c00 <LL_FillBuffer+0x88>)
 8004bf2:	f002 fde2 	bl	80077ba <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000da4 	.word	0x20000da4
 8004c04:	20000de4 	.word	0x20000de4
 8004c08:	20000cfc 	.word	0x20000cfc
 8004c0c:	4002b000 	.word	0x4002b000

08004c10 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004c14:	4b29      	ldr	r3, [pc, #164]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c16:	4a2a      	ldr	r2, [pc, #168]	; (8004cc0 <BSP_SDRAM_Init+0xb0>)
 8004c18:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004c1a:	4b2a      	ldr	r3, [pc, #168]	; (8004cc4 <BSP_SDRAM_Init+0xb4>)
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004c20:	4b28      	ldr	r3, [pc, #160]	; (8004cc4 <BSP_SDRAM_Init+0xb4>)
 8004c22:	2207      	movs	r2, #7
 8004c24:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004c26:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <BSP_SDRAM_Init+0xb4>)
 8004c28:	2204      	movs	r2, #4
 8004c2a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004c2c:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <BSP_SDRAM_Init+0xb4>)
 8004c2e:	2207      	movs	r2, #7
 8004c30:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004c32:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <BSP_SDRAM_Init+0xb4>)
 8004c34:	2202      	movs	r2, #2
 8004c36:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004c38:	4b22      	ldr	r3, [pc, #136]	; (8004cc4 <BSP_SDRAM_Init+0xb4>)
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004c3e:	4b21      	ldr	r3, [pc, #132]	; (8004cc4 <BSP_SDRAM_Init+0xb4>)
 8004c40:	2202      	movs	r2, #2
 8004c42:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004c44:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004c4a:	4b1c      	ldr	r3, [pc, #112]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004c50:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c52:	2204      	movs	r2, #4
 8004c54:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004c56:	4b19      	ldr	r3, [pc, #100]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c58:	2210      	movs	r2, #16
 8004c5a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004c5c:	4b17      	ldr	r3, [pc, #92]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c5e:	2240      	movs	r2, #64	; 0x40
 8004c60:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004c62:	4b16      	ldr	r3, [pc, #88]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c68:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004c6a:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004c70:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c76:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004c78:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004c80:	4b0e      	ldr	r3, [pc, #56]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004c86:	2100      	movs	r1, #0
 8004c88:	480c      	ldr	r0, [pc, #48]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c8a:	f000 f87f 	bl	8004d8c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004c8e:	490d      	ldr	r1, [pc, #52]	; (8004cc4 <BSP_SDRAM_Init+0xb4>)
 8004c90:	480a      	ldr	r0, [pc, #40]	; (8004cbc <BSP_SDRAM_Init+0xac>)
 8004c92:	f006 fa2d 	bl	800b0f0 <HAL_SDRAM_Init>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <BSP_SDRAM_Init+0xb8>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e002      	b.n	8004caa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004ca4:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <BSP_SDRAM_Init+0xb8>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004caa:	f240 6003 	movw	r0, #1539	; 0x603
 8004cae:	f000 f80d 	bl	8004ccc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <BSP_SDRAM_Init+0xb8>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000e84 	.word	0x20000e84
 8004cc0:	a0000140 	.word	0xa0000140
 8004cc4:	20000eb8 	.word	0x20000eb8
 8004cc8:	20000044 	.word	0x20000044

08004ccc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004cd8:	4b2a      	ldr	r3, [pc, #168]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004cde:	4b29      	ldr	r3, [pc, #164]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ce4:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004cea:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cf4:	4923      	ldr	r1, [pc, #140]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004cf6:	4824      	ldr	r0, [pc, #144]	; (8004d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004cf8:	f006 fa2e 	bl	800b158 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f001 f905 	bl	8005f0c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d04:	2202      	movs	r2, #2
 8004d06:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004d08:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004d0e:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004d14:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d1e:	4919      	ldr	r1, [pc, #100]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d20:	4819      	ldr	r0, [pc, #100]	; (8004d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d22:	f006 fa19 	bl	800b158 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004d26:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d28:	2203      	movs	r2, #3
 8004d2a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004d2c:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d2e:	2210      	movs	r2, #16
 8004d30:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004d32:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d34:	2208      	movs	r2, #8
 8004d36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004d38:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d42:	4910      	ldr	r1, [pc, #64]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d44:	4810      	ldr	r0, [pc, #64]	; (8004d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d46:	f006 fa07 	bl	800b158 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004d4a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004d4e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d52:	2204      	movs	r2, #4
 8004d54:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d58:	2210      	movs	r2, #16
 8004d5a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004d5c:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4a07      	ldr	r2, [pc, #28]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d66:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d6c:	4905      	ldr	r1, [pc, #20]	; (8004d84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d6e:	4806      	ldr	r0, [pc, #24]	; (8004d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d70:	f006 f9f2 	bl	800b158 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4804      	ldr	r0, [pc, #16]	; (8004d88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d78:	f006 fa23 	bl	800b1c2 <HAL_SDRAM_ProgramRefreshRate>
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000ed4 	.word	0x20000ed4
 8004d88:	20000e84 	.word	0x20000e84

08004d8c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b090      	sub	sp, #64	; 0x40
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004d96:	4b70      	ldr	r3, [pc, #448]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	4a6f      	ldr	r2, [pc, #444]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	6393      	str	r3, [r2, #56]	; 0x38
 8004da2:	4b6d      	ldr	r3, [pc, #436]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004dae:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	4a69      	ldr	r2, [pc, #420]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004db4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004db8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dba:	4b67      	ldr	r3, [pc, #412]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dc6:	4b64      	ldr	r3, [pc, #400]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	4a63      	ldr	r2, [pc, #396]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004dcc:	f043 0304 	orr.w	r3, r3, #4
 8004dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd2:	4b61      	ldr	r3, [pc, #388]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	623b      	str	r3, [r7, #32]
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dde:	4b5e      	ldr	r3, [pc, #376]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	4a5d      	ldr	r2, [pc, #372]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004de4:	f043 0308 	orr.w	r3, r3, #8
 8004de8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dea:	4b5b      	ldr	r3, [pc, #364]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004df6:	4b58      	ldr	r3, [pc, #352]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	4a57      	ldr	r2, [pc, #348]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004dfc:	f043 0310 	orr.w	r3, r3, #16
 8004e00:	6313      	str	r3, [r2, #48]	; 0x30
 8004e02:	4b55      	ldr	r3, [pc, #340]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e0e:	4b52      	ldr	r3, [pc, #328]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	4a51      	ldr	r2, [pc, #324]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004e14:	f043 0320 	orr.w	r3, r3, #32
 8004e18:	6313      	str	r3, [r2, #48]	; 0x30
 8004e1a:	4b4f      	ldr	r3, [pc, #316]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004e26:	4b4c      	ldr	r3, [pc, #304]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	4a4b      	ldr	r2, [pc, #300]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e30:	6313      	str	r3, [r2, #48]	; 0x30
 8004e32:	4b49      	ldr	r3, [pc, #292]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e3e:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	4a45      	ldr	r2, [pc, #276]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e48:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4a:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <BSP_SDRAM_MspInit+0x1cc>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004e56:	2302      	movs	r3, #2
 8004e58:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004e62:	230c      	movs	r3, #12
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004e66:	2308      	movs	r3, #8
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e6e:	4619      	mov	r1, r3
 8004e70:	483a      	ldr	r0, [pc, #232]	; (8004f5c <BSP_SDRAM_MspInit+0x1d0>)
 8004e72:	f002 ffc9 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004e76:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e80:	4619      	mov	r1, r3
 8004e82:	4837      	ldr	r0, [pc, #220]	; (8004f60 <BSP_SDRAM_MspInit+0x1d4>)
 8004e84:	f002 ffc0 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004e88:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e92:	4619      	mov	r1, r3
 8004e94:	4833      	ldr	r0, [pc, #204]	; (8004f64 <BSP_SDRAM_MspInit+0x1d8>)
 8004e96:	f002 ffb7 	bl	8007e08 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004e9a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4830      	ldr	r0, [pc, #192]	; (8004f68 <BSP_SDRAM_MspInit+0x1dc>)
 8004ea8:	f002 ffae 	bl	8007e08 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004eac:	f248 1333 	movw	r3, #33075	; 0x8133
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	482c      	ldr	r0, [pc, #176]	; (8004f6c <BSP_SDRAM_MspInit+0x1e0>)
 8004eba:	f002 ffa5 	bl	8007e08 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004ebe:	2328      	movs	r3, #40	; 0x28
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4829      	ldr	r0, [pc, #164]	; (8004f70 <BSP_SDRAM_MspInit+0x1e4>)
 8004eca:	f002 ff9d 	bl	8007e08 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004ece:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004ed4:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004ed6:	2280      	movs	r2, #128	; 0x80
 8004ed8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004eda:	4b26      	ldr	r3, [pc, #152]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004ee2:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ee8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004eea:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004eec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ef0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004ef4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ef8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004efa:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004f00:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f06:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004f08:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004f0e:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004f10:	2203      	movs	r2, #3
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004f14:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004f1a:	4b16      	ldr	r3, [pc, #88]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004f20:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004f22:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <BSP_SDRAM_MspInit+0x1ec>)
 8004f24:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a12      	ldr	r2, [pc, #72]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f2c:	4a11      	ldr	r2, [pc, #68]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004f32:	4810      	ldr	r0, [pc, #64]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004f34:	f002 f834 	bl	8006fa0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004f38:	480e      	ldr	r0, [pc, #56]	; (8004f74 <BSP_SDRAM_MspInit+0x1e8>)
 8004f3a:	f001 ff83 	bl	8006e44 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	210f      	movs	r1, #15
 8004f42:	2038      	movs	r0, #56	; 0x38
 8004f44:	f001 fcb8 	bl	80068b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004f48:	2038      	movs	r0, #56	; 0x38
 8004f4a:	f001 fcd1 	bl	80068f0 <HAL_NVIC_EnableIRQ>
}
 8004f4e:	bf00      	nop
 8004f50:	3740      	adds	r7, #64	; 0x40
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40020800 	.word	0x40020800
 8004f60:	40020c00 	.word	0x40020c00
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40021400 	.word	0x40021400
 8004f6c:	40021800 	.word	0x40021800
 8004f70:	40021c00 	.word	0x40021c00
 8004f74:	20000ee4 	.word	0x20000ee4
 8004f78:	40026410 	.word	0x40026410

08004f7c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	460a      	mov	r2, r1
 8004f86:	80fb      	strh	r3, [r7, #6]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004f90:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <BSP_TS_Init+0x68>)
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004f96:	4a14      	ldr	r2, [pc, #80]	; (8004fe8 <BSP_TS_Init+0x6c>)
 8004f98:	88bb      	ldrh	r3, [r7, #4]
 8004f9a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004f9c:	4b13      	ldr	r3, [pc, #76]	; (8004fec <BSP_TS_Init+0x70>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2070      	movs	r0, #112	; 0x70
 8004fa2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004fa4:	4b11      	ldr	r3, [pc, #68]	; (8004fec <BSP_TS_Init+0x70>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2070      	movs	r0, #112	; 0x70
 8004faa:	4798      	blx	r3
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b51      	cmp	r3, #81	; 0x51
 8004fb0:	d111      	bne.n	8004fd6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <BSP_TS_Init+0x74>)
 8004fb4:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <BSP_TS_Init+0x70>)
 8004fb6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <BSP_TS_Init+0x78>)
 8004fba:	2270      	movs	r2, #112	; 0x70
 8004fbc:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <BSP_TS_Init+0x7c>)
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <BSP_TS_Init+0x74>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <BSP_TS_Init+0x78>)
 8004fcc:	7812      	ldrb	r2, [r2, #0]
 8004fce:	b292      	uxth	r2, r2
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4798      	blx	r3
 8004fd4:	e001      	b.n	8004fda <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20000f48 	.word	0x20000f48
 8004fe8:	20000f4a 	.word	0x20000f4a
 8004fec:	2000000c 	.word	0x2000000c
 8004ff0:	20000f44 	.word	0x20000f44
 8004ff4:	20000f4d 	.word	0x20000f4d
 8004ff8:	20000f4c 	.word	0x20000f4c

08004ffc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b097      	sub	sp, #92	; 0x5c
 8005000:	af02      	add	r7, sp, #8
 8005002:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005016:	4bb4      	ldr	r3, [pc, #720]	; (80052e8 <BSP_TS_GetState+0x2ec>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	4ab3      	ldr	r2, [pc, #716]	; (80052ec <BSP_TS_GetState+0x2f0>)
 800501e:	7812      	ldrb	r2, [r2, #0]
 8005020:	b292      	uxth	r2, r2
 8005022:	4610      	mov	r0, r2
 8005024:	4798      	blx	r3
 8005026:	4603      	mov	r3, r0
 8005028:	461a      	mov	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8196 	beq.w	8005364 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8005038:	2300      	movs	r3, #0
 800503a:	64bb      	str	r3, [r7, #72]	; 0x48
 800503c:	e185      	b.n	800534a <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800503e:	4baa      	ldr	r3, [pc, #680]	; (80052e8 <BSP_TS_GetState+0x2ec>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	4aa9      	ldr	r2, [pc, #676]	; (80052ec <BSP_TS_GetState+0x2f0>)
 8005046:	7812      	ldrb	r2, [r2, #0]
 8005048:	b290      	uxth	r0, r2
 800504a:	f107 0120 	add.w	r1, r7, #32
 800504e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005050:	0052      	lsls	r2, r2, #1
 8005052:	188c      	adds	r4, r1, r2
 8005054:	f107 0114 	add.w	r1, r7, #20
 8005058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800505a:	0052      	lsls	r2, r2, #1
 800505c:	440a      	add	r2, r1
 800505e:	4621      	mov	r1, r4
 8005060:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8005062:	4ba3      	ldr	r3, [pc, #652]	; (80052f0 <BSP_TS_GetState+0x2f4>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d117      	bne.n	800509a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 800506a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	3350      	adds	r3, #80	; 0x50
 8005070:	443b      	add	r3, r7
 8005072:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	3350      	adds	r3, #80	; 0x50
 800507c:	443b      	add	r3, r7
 800507e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8005082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	3350      	adds	r3, #80	; 0x50
 8005088:	443b      	add	r3, r7
 800508a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800508e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	3350      	adds	r3, #80	; 0x50
 8005094:	443b      	add	r3, r7
 8005096:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800509a:	4b95      	ldr	r3, [pc, #596]	; (80052f0 <BSP_TS_GetState+0x2f4>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00e      	beq.n	80050c4 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 80050a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	3350      	adds	r3, #80	; 0x50
 80050ac:	443b      	add	r3, r7
 80050ae:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80050b2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	3350      	adds	r3, #80	; 0x50
 80050be:	443b      	add	r3, r7
 80050c0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80050c4:	4b8a      	ldr	r3, [pc, #552]	; (80052f0 <BSP_TS_GetState+0x2f4>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00e      	beq.n	80050ee <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 80050d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	3350      	adds	r3, #80	; 0x50
 80050d6:	443b      	add	r3, r7
 80050d8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80050dc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	3350      	adds	r3, #80	; 0x50
 80050e8:	443b      	add	r3, r7
 80050ea:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80050ee:	4b80      	ldr	r3, [pc, #512]	; (80052f0 <BSP_TS_GetState+0x2f4>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d017      	beq.n	800512a <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 80050fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	3350      	adds	r3, #80	; 0x50
 8005100:	443b      	add	r3, r7
 8005102:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	3350      	adds	r3, #80	; 0x50
 800510c:	443b      	add	r3, r7
 800510e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8005112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	3350      	adds	r3, #80	; 0x50
 8005118:	443b      	add	r3, r7
 800511a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800511e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	3350      	adds	r3, #80	; 0x50
 8005124:	443b      	add	r3, r7
 8005126:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800512a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	3350      	adds	r3, #80	; 0x50
 8005130:	443b      	add	r3, r7
 8005132:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005136:	4619      	mov	r1, r3
 8005138:	4a6e      	ldr	r2, [pc, #440]	; (80052f4 <BSP_TS_GetState+0x2f8>)
 800513a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005140:	4299      	cmp	r1, r3
 8005142:	d90d      	bls.n	8005160 <BSP_TS_GetState+0x164>
 8005144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	3350      	adds	r3, #80	; 0x50
 800514a:	443b      	add	r3, r7
 800514c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8005150:	4968      	ldr	r1, [pc, #416]	; (80052f4 <BSP_TS_GetState+0x2f8>)
 8005152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005154:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005158:	b29b      	uxth	r3, r3
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	b29b      	uxth	r3, r3
 800515e:	e00c      	b.n	800517a <BSP_TS_GetState+0x17e>
 8005160:	4a64      	ldr	r2, [pc, #400]	; (80052f4 <BSP_TS_GetState+0x2f8>)
 8005162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005168:	b29a      	uxth	r2, r3
 800516a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	3350      	adds	r3, #80	; 0x50
 8005170:	443b      	add	r3, r7
 8005172:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	b29b      	uxth	r3, r3
 800517a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	3350      	adds	r3, #80	; 0x50
 8005184:	443b      	add	r3, r7
 8005186:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800518a:	4619      	mov	r1, r3
 800518c:	4a5a      	ldr	r2, [pc, #360]	; (80052f8 <BSP_TS_GetState+0x2fc>)
 800518e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005194:	4299      	cmp	r1, r3
 8005196:	d90d      	bls.n	80051b4 <BSP_TS_GetState+0x1b8>
 8005198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	3350      	adds	r3, #80	; 0x50
 800519e:	443b      	add	r3, r7
 80051a0:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80051a4:	4954      	ldr	r1, [pc, #336]	; (80052f8 <BSP_TS_GetState+0x2fc>)
 80051a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	e00c      	b.n	80051ce <BSP_TS_GetState+0x1d2>
 80051b4:	4a50      	ldr	r2, [pc, #320]	; (80052f8 <BSP_TS_GetState+0x2fc>)
 80051b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051bc:	b29a      	uxth	r2, r3
 80051be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	3350      	adds	r3, #80	; 0x50
 80051c4:	443b      	add	r3, r7
 80051c6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80051d2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80051d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051da:	4413      	add	r3, r2
 80051dc:	2b05      	cmp	r3, #5
 80051de:	dd15      	ble.n	800520c <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 80051e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	3350      	adds	r3, #80	; 0x50
 80051e6:	443b      	add	r3, r7
 80051e8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80051ec:	4619      	mov	r1, r3
 80051ee:	4a41      	ldr	r2, [pc, #260]	; (80052f4 <BSP_TS_GetState+0x2f8>)
 80051f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80051f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	3350      	adds	r3, #80	; 0x50
 80051fc:	443b      	add	r3, r7
 80051fe:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005202:	4619      	mov	r1, r3
 8005204:	4a3c      	ldr	r2, [pc, #240]	; (80052f8 <BSP_TS_GetState+0x2fc>)
 8005206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800520c:	4b37      	ldr	r3, [pc, #220]	; (80052ec <BSP_TS_GetState+0x2f0>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b70      	cmp	r3, #112	; 0x70
 8005212:	d119      	bne.n	8005248 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8005214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	3350      	adds	r3, #80	; 0x50
 800521a:	443b      	add	r3, r7
 800521c:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	4413      	add	r3, r2
 8005228:	460a      	mov	r2, r1
 800522a:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800522c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	3350      	adds	r3, #80	; 0x50
 8005232:	443b      	add	r3, r7
 8005234:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800523c:	3304      	adds	r3, #4
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	4413      	add	r3, r2
 8005242:	460a      	mov	r2, r1
 8005244:	809a      	strh	r2, [r3, #4]
 8005246:	e022      	b.n	800528e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005248:	4b2c      	ldr	r3, [pc, #176]	; (80052fc <BSP_TS_GetState+0x300>)
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	4619      	mov	r1, r3
 800524e:	4a29      	ldr	r2, [pc, #164]	; (80052f4 <BSP_TS_GetState+0x2f8>)
 8005250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	0b1b      	lsrs	r3, r3, #12
 800525c:	b299      	uxth	r1, r3
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4413      	add	r3, r2
 8005266:	460a      	mov	r2, r1
 8005268:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800526a:	4b25      	ldr	r3, [pc, #148]	; (8005300 <BSP_TS_GetState+0x304>)
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	4619      	mov	r1, r3
 8005270:	4a21      	ldr	r2, [pc, #132]	; (80052f8 <BSP_TS_GetState+0x2fc>)
 8005272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	0b1b      	lsrs	r3, r3, #12
 800527e:	b299      	uxth	r1, r3
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005284:	3304      	adds	r3, #4
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4413      	add	r3, r2
 800528a:	460a      	mov	r2, r1
 800528c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <BSP_TS_GetState+0x2f0>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	b298      	uxth	r0, r3
 8005294:	f107 010c 	add.w	r1, r7, #12
 8005298:	f107 0210 	add.w	r2, r7, #16
 800529c:	f107 0308 	add.w	r3, r7, #8
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	460b      	mov	r3, r1
 80052a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80052a6:	f7fd fc1d 	bl	8002ae4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	b2d9      	uxtb	r1, r3
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b2:	4413      	add	r3, r2
 80052b4:	3316      	adds	r3, #22
 80052b6:	460a      	mov	r2, r1
 80052b8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	b2d9      	uxtb	r1, r3
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c2:	4413      	add	r3, r2
 80052c4:	3320      	adds	r3, #32
 80052c6:	460a      	mov	r2, r1
 80052c8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d835      	bhi.n	800533c <BSP_TS_GetState+0x340>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <BSP_TS_GetState+0x2dc>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	08005305 	.word	0x08005305
 80052dc:	08005313 	.word	0x08005313
 80052e0:	08005321 	.word	0x08005321
 80052e4:	0800532f 	.word	0x0800532f
 80052e8:	20000f44 	.word	0x20000f44
 80052ec:	20000f4d 	.word	0x20000f4d
 80052f0:	20000f4c 	.word	0x20000f4c
 80052f4:	20000f50 	.word	0x20000f50
 80052f8:	20000f64 	.word	0x20000f64
 80052fc:	20000f48 	.word	0x20000f48
 8005300:	20000f4a 	.word	0x20000f4a
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005308:	4413      	add	r3, r2
 800530a:	331b      	adds	r3, #27
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
          break;
 8005310:	e018      	b.n	8005344 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005316:	4413      	add	r3, r2
 8005318:	331b      	adds	r3, #27
 800531a:	2202      	movs	r2, #2
 800531c:	701a      	strb	r2, [r3, #0]
          break;
 800531e:	e011      	b.n	8005344 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005324:	4413      	add	r3, r2
 8005326:	331b      	adds	r3, #27
 8005328:	2203      	movs	r2, #3
 800532a:	701a      	strb	r2, [r3, #0]
          break;
 800532c:	e00a      	b.n	8005344 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005332:	4413      	add	r3, r2
 8005334:	331b      	adds	r3, #27
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
          break;
 800533a:	e003      	b.n	8005344 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8005342:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005346:	3301      	adds	r3, #1
 8005348:	64bb      	str	r3, [r7, #72]	; 0x48
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005352:	4293      	cmp	r3, r2
 8005354:	f4ff ae73 	bcc.w	800503e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f809 	bl	8005370 <BSP_TS_Get_GestureId>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005364:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005368:	4618      	mov	r0, r3
 800536a:	3754      	adds	r7, #84	; 0x54
 800536c:	46bd      	mov	sp, r7
 800536e:	bd90      	pop	{r4, r7, pc}

08005370 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005380:	4b3b      	ldr	r3, [pc, #236]	; (8005470 <BSP_TS_Get_GestureId+0x100>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f107 0208 	add.w	r2, r7, #8
 800538a:	4611      	mov	r1, r2
 800538c:	4618      	mov	r0, r3
 800538e:	f7fd fb90 	bl	8002ab2 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b49      	cmp	r3, #73	; 0x49
 8005396:	d05e      	beq.n	8005456 <BSP_TS_Get_GestureId+0xe6>
 8005398:	2b49      	cmp	r3, #73	; 0x49
 800539a:	d860      	bhi.n	800545e <BSP_TS_Get_GestureId+0xee>
 800539c:	2b1c      	cmp	r3, #28
 800539e:	d83f      	bhi.n	8005420 <BSP_TS_Get_GestureId+0xb0>
 80053a0:	2b1c      	cmp	r3, #28
 80053a2:	d85c      	bhi.n	800545e <BSP_TS_Get_GestureId+0xee>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <BSP_TS_Get_GestureId+0x3c>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	08005427 	.word	0x08005427
 80053b0:	0800545f 	.word	0x0800545f
 80053b4:	0800545f 	.word	0x0800545f
 80053b8:	0800545f 	.word	0x0800545f
 80053bc:	0800545f 	.word	0x0800545f
 80053c0:	0800545f 	.word	0x0800545f
 80053c4:	0800545f 	.word	0x0800545f
 80053c8:	0800545f 	.word	0x0800545f
 80053cc:	0800545f 	.word	0x0800545f
 80053d0:	0800545f 	.word	0x0800545f
 80053d4:	0800545f 	.word	0x0800545f
 80053d8:	0800545f 	.word	0x0800545f
 80053dc:	0800545f 	.word	0x0800545f
 80053e0:	0800545f 	.word	0x0800545f
 80053e4:	0800545f 	.word	0x0800545f
 80053e8:	0800545f 	.word	0x0800545f
 80053ec:	0800542f 	.word	0x0800542f
 80053f0:	0800545f 	.word	0x0800545f
 80053f4:	0800545f 	.word	0x0800545f
 80053f8:	0800545f 	.word	0x0800545f
 80053fc:	08005437 	.word	0x08005437
 8005400:	0800545f 	.word	0x0800545f
 8005404:	0800545f 	.word	0x0800545f
 8005408:	0800545f 	.word	0x0800545f
 800540c:	0800543f 	.word	0x0800543f
 8005410:	0800545f 	.word	0x0800545f
 8005414:	0800545f 	.word	0x0800545f
 8005418:	0800545f 	.word	0x0800545f
 800541c:	08005447 	.word	0x08005447
 8005420:	2b40      	cmp	r3, #64	; 0x40
 8005422:	d014      	beq.n	800544e <BSP_TS_Get_GestureId+0xde>
 8005424:	e01b      	b.n	800545e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800542c:	e01a      	b.n	8005464 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005434:	e016      	b.n	8005464 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2202      	movs	r2, #2
 800543a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800543c:	e012      	b.n	8005464 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2203      	movs	r2, #3
 8005442:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005444:	e00e      	b.n	8005464 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2204      	movs	r2, #4
 800544a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800544c:	e00a      	b.n	8005464 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2205      	movs	r2, #5
 8005452:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005454:	e006      	b.n	8005464 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2206      	movs	r2, #6
 800545a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800545c:	e002      	b.n	8005464 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
      break;
 8005462:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000f4d 	.word	0x20000f4d

08005474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800547a:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <HAL_MspInit+0x4c>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	4a10      	ldr	r2, [pc, #64]	; (80054c0 <HAL_MspInit+0x4c>)
 8005480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005484:	6413      	str	r3, [r2, #64]	; 0x40
 8005486:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <HAL_MspInit+0x4c>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548e:	607b      	str	r3, [r7, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005492:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <HAL_MspInit+0x4c>)
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	4a0a      	ldr	r2, [pc, #40]	; (80054c0 <HAL_MspInit+0x4c>)
 8005498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800549c:	6453      	str	r3, [r2, #68]	; 0x44
 800549e:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <HAL_MspInit+0x4c>)
 80054a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80054aa:	2200      	movs	r2, #0
 80054ac:	210f      	movs	r1, #15
 80054ae:	f06f 0001 	mvn.w	r0, #1
 80054b2:	f001 fa01 	bl	80068b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800

080054c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08e      	sub	sp, #56	; 0x38
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80054d4:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <HAL_InitTick+0xe0>)
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	4a32      	ldr	r2, [pc, #200]	; (80055a4 <HAL_InitTick+0xe0>)
 80054da:	f043 0310 	orr.w	r3, r3, #16
 80054de:	6413      	str	r3, [r2, #64]	; 0x40
 80054e0:	4b30      	ldr	r3, [pc, #192]	; (80055a4 <HAL_InitTick+0xe0>)
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80054ec:	f107 0210 	add.w	r2, r7, #16
 80054f0:	f107 0314 	add.w	r3, r7, #20
 80054f4:	4611      	mov	r1, r2
 80054f6:	4618      	mov	r0, r3
 80054f8:	f004 fe02 	bl	800a100 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005506:	f004 fdd3 	bl	800a0b0 <HAL_RCC_GetPCLK1Freq>
 800550a:	6378      	str	r0, [r7, #52]	; 0x34
 800550c:	e004      	b.n	8005518 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800550e:	f004 fdcf 	bl	800a0b0 <HAL_RCC_GetPCLK1Freq>
 8005512:	4603      	mov	r3, r0
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	4a23      	ldr	r2, [pc, #140]	; (80055a8 <HAL_InitTick+0xe4>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	0c9b      	lsrs	r3, r3, #18
 8005522:	3b01      	subs	r3, #1
 8005524:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005526:	4b21      	ldr	r3, [pc, #132]	; (80055ac <HAL_InitTick+0xe8>)
 8005528:	4a21      	ldr	r2, [pc, #132]	; (80055b0 <HAL_InitTick+0xec>)
 800552a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800552c:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <HAL_InitTick+0xe8>)
 800552e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005532:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005534:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <HAL_InitTick+0xe8>)
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800553a:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <HAL_InitTick+0xe8>)
 800553c:	2200      	movs	r2, #0
 800553e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005540:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <HAL_InitTick+0xe8>)
 8005542:	2200      	movs	r2, #0
 8005544:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005546:	4b19      	ldr	r3, [pc, #100]	; (80055ac <HAL_InitTick+0xe8>)
 8005548:	2200      	movs	r2, #0
 800554a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800554c:	4817      	ldr	r0, [pc, #92]	; (80055ac <HAL_InitTick+0xe8>)
 800554e:	f005 ff0b 	bl	800b368 <HAL_TIM_Base_Init>
 8005552:	4603      	mov	r3, r0
 8005554:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005558:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800555c:	2b00      	cmp	r3, #0
 800555e:	d11b      	bne.n	8005598 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005560:	4812      	ldr	r0, [pc, #72]	; (80055ac <HAL_InitTick+0xe8>)
 8005562:	f005 ff59 	bl	800b418 <HAL_TIM_Base_Start_IT>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800556c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005570:	2b00      	cmp	r3, #0
 8005572:	d111      	bne.n	8005598 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005574:	2036      	movs	r0, #54	; 0x36
 8005576:	f001 f9bb 	bl	80068f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b0f      	cmp	r3, #15
 800557e:	d808      	bhi.n	8005592 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005580:	2200      	movs	r2, #0
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	2036      	movs	r0, #54	; 0x36
 8005586:	f001 f997 	bl	80068b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800558a:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <HAL_InitTick+0xf0>)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	e002      	b.n	8005598 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005598:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800559c:	4618      	mov	r0, r3
 800559e:	3738      	adds	r7, #56	; 0x38
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40023800 	.word	0x40023800
 80055a8:	431bde83 	.word	0x431bde83
 80055ac:	20000f78 	.word	0x20000f78
 80055b0:	40001000 	.word	0x40001000
 80055b4:	2000004c 	.word	0x2000004c

080055b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80055bc:	e7fe      	b.n	80055bc <NMI_Handler+0x4>

080055be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055be:	b480      	push	{r7}
 80055c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055c2:	e7fe      	b.n	80055c2 <HardFault_Handler+0x4>

080055c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055c8:	e7fe      	b.n	80055c8 <MemManage_Handler+0x4>

080055ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055ca:	b480      	push	{r7}
 80055cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055ce:	e7fe      	b.n	80055ce <BusFault_Handler+0x4>

080055d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055d4:	e7fe      	b.n	80055d4 <UsageFault_Handler+0x4>

080055d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055da:	bf00      	nop
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80055e8:	4804      	ldr	r0, [pc, #16]	; (80055fc <DMA1_Stream5_IRQHandler+0x18>)
 80055ea:	f001 fe07 	bl	80071fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
  HAL_GPIO_TogglePin(LED17_GPIO_Port, LED17_Pin);
 80055ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055f2:	4803      	ldr	r0, [pc, #12]	; (8005600 <DMA1_Stream5_IRQHandler+0x1c>)
 80055f4:	f002 fed9 	bl	80083aa <HAL_GPIO_TogglePin>
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80055f8:	bf00      	nop
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	2000017c 	.word	0x2000017c
 8005600:	40021c00 	.word	0x40021c00

08005604 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8005608:	4b06      	ldr	r3, [pc, #24]	; (8005624 <TIM6_DAC_IRQHandler+0x20>)
 800560a:	791b      	ldrb	r3, [r3, #4]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8005612:	4804      	ldr	r0, [pc, #16]	; (8005624 <TIM6_DAC_IRQHandler+0x20>)
 8005614:	f001 fab0 	bl	8006b78 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8005618:	4803      	ldr	r0, [pc, #12]	; (8005628 <TIM6_DAC_IRQHandler+0x24>)
 800561a:	f005 ff75 	bl	800b508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800561e:	bf00      	nop
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000168 	.word	0x20000168
 8005628:	20000f78 	.word	0x20000f78

0800562c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005630:	4802      	ldr	r0, [pc, #8]	; (800563c <TIM7_IRQHandler+0x10>)
 8005632:	f005 ff69 	bl	800b508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005636:	bf00      	nop
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	200010ac 	.word	0x200010ac

08005640 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005644:	4802      	ldr	r0, [pc, #8]	; (8005650 <LTDC_IRQHandler+0x10>)
 8005646:	f003 fdc9 	bl	80091dc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800564a:	bf00      	nop
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000b7c 	.word	0x20000b7c

08005654 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005658:	4802      	ldr	r0, [pc, #8]	; (8005664 <DMA2D_IRQHandler+0x10>)
 800565a:	f002 f997 	bl	800798c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800565e:	bf00      	nop
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	200001dc 	.word	0x200001dc

08005668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005670:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <_sbrk+0x5c>)
 8005672:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <_sbrk+0x60>)
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800567c:	4b13      	ldr	r3, [pc, #76]	; (80056cc <_sbrk+0x64>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005684:	4b11      	ldr	r3, [pc, #68]	; (80056cc <_sbrk+0x64>)
 8005686:	4a12      	ldr	r2, [pc, #72]	; (80056d0 <_sbrk+0x68>)
 8005688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800568a:	4b10      	ldr	r3, [pc, #64]	; (80056cc <_sbrk+0x64>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4413      	add	r3, r2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	429a      	cmp	r2, r3
 8005696:	d207      	bcs.n	80056a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005698:	f009 f9b4 	bl	800ea04 <__errno>
 800569c:	4603      	mov	r3, r0
 800569e:	220c      	movs	r2, #12
 80056a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056a6:	e009      	b.n	80056bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056a8:	4b08      	ldr	r3, [pc, #32]	; (80056cc <_sbrk+0x64>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056ae:	4b07      	ldr	r3, [pc, #28]	; (80056cc <_sbrk+0x64>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4413      	add	r3, r2
 80056b6:	4a05      	ldr	r2, [pc, #20]	; (80056cc <_sbrk+0x64>)
 80056b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056ba:	68fb      	ldr	r3, [r7, #12]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20050000 	.word	0x20050000
 80056c8:	00000400 	.word	0x00000400
 80056cc:	20000fc4 	.word	0x20000fc4
 80056d0:	20005040 	.word	0x20005040

080056d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056d8:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <SystemInit+0x20>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	4a05      	ldr	r2, [pc, #20]	; (80056f4 <SystemInit+0x20>)
 80056e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056e8:	bf00      	nop
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	e000ed00 	.word	0xe000ed00

080056f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056fe:	f107 0310 	add.w	r3, r7, #16
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	605a      	str	r2, [r3, #4]
 8005708:	609a      	str	r2, [r3, #8]
 800570a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800570c:	1d3b      	adds	r3, r7, #4
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005716:	4b20      	ldr	r3, [pc, #128]	; (8005798 <MX_TIM1_Init+0xa0>)
 8005718:	4a20      	ldr	r2, [pc, #128]	; (800579c <MX_TIM1_Init+0xa4>)
 800571a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800571c:	4b1e      	ldr	r3, [pc, #120]	; (8005798 <MX_TIM1_Init+0xa0>)
 800571e:	2200      	movs	r2, #0
 8005720:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005722:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <MX_TIM1_Init+0xa0>)
 8005724:	2200      	movs	r2, #0
 8005726:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <MX_TIM1_Init+0xa0>)
 800572a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800572e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005730:	4b19      	ldr	r3, [pc, #100]	; (8005798 <MX_TIM1_Init+0xa0>)
 8005732:	2200      	movs	r2, #0
 8005734:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <MX_TIM1_Init+0xa0>)
 8005738:	2200      	movs	r2, #0
 800573a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800573c:	4b16      	ldr	r3, [pc, #88]	; (8005798 <MX_TIM1_Init+0xa0>)
 800573e:	2200      	movs	r2, #0
 8005740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005742:	4815      	ldr	r0, [pc, #84]	; (8005798 <MX_TIM1_Init+0xa0>)
 8005744:	f005 fe10 	bl	800b368 <HAL_TIM_Base_Init>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800574e:	f7fe f94f 	bl	80039f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005756:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005758:	f107 0310 	add.w	r3, r7, #16
 800575c:	4619      	mov	r1, r3
 800575e:	480e      	ldr	r0, [pc, #56]	; (8005798 <MX_TIM1_Init+0xa0>)
 8005760:	f005 fff2 	bl	800b748 <HAL_TIM_ConfigClockSource>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800576a:	f7fe f941 	bl	80039f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800576e:	2300      	movs	r3, #0
 8005770:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005772:	2300      	movs	r3, #0
 8005774:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	4619      	mov	r1, r3
 800577e:	4806      	ldr	r0, [pc, #24]	; (8005798 <MX_TIM1_Init+0xa0>)
 8005780:	f006 fa0e 	bl	800bba0 <HAL_TIMEx_MasterConfigSynchronization>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800578a:	f7fe f931 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800578e:	bf00      	nop
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000fc8 	.word	0x20000fc8
 800579c:	40010000 	.word	0x40010000

080057a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057a6:	f107 0310 	add.w	r3, r7, #16
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	605a      	str	r2, [r3, #4]
 80057b0:	609a      	str	r2, [r3, #8]
 80057b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	605a      	str	r2, [r3, #4]
 80057bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <MX_TIM2_Init+0x98>)
 80057c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80057c6:	4b1c      	ldr	r3, [pc, #112]	; (8005838 <MX_TIM2_Init+0x98>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057cc:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <MX_TIM2_Init+0x98>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80057d2:	4b19      	ldr	r3, [pc, #100]	; (8005838 <MX_TIM2_Init+0x98>)
 80057d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057da:	4b17      	ldr	r3, [pc, #92]	; (8005838 <MX_TIM2_Init+0x98>)
 80057dc:	2200      	movs	r2, #0
 80057de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057e0:	4b15      	ldr	r3, [pc, #84]	; (8005838 <MX_TIM2_Init+0x98>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80057e6:	4814      	ldr	r0, [pc, #80]	; (8005838 <MX_TIM2_Init+0x98>)
 80057e8:	f005 fdbe 	bl	800b368 <HAL_TIM_Base_Init>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80057f2:	f7fe f8fd 	bl	80039f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057fc:	f107 0310 	add.w	r3, r7, #16
 8005800:	4619      	mov	r1, r3
 8005802:	480d      	ldr	r0, [pc, #52]	; (8005838 <MX_TIM2_Init+0x98>)
 8005804:	f005 ffa0 	bl	800b748 <HAL_TIM_ConfigClockSource>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800580e:	f7fe f8ef 	bl	80039f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005812:	2300      	movs	r3, #0
 8005814:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4806      	ldr	r0, [pc, #24]	; (8005838 <MX_TIM2_Init+0x98>)
 8005820:	f006 f9be 	bl	800bba0 <HAL_TIMEx_MasterConfigSynchronization>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800582a:	f7fe f8e1 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800582e:	bf00      	nop
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20001014 	.word	0x20001014

0800583c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005842:	f107 0310 	add.w	r3, r7, #16
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	605a      	str	r2, [r3, #4]
 800584c:	609a      	str	r2, [r3, #8]
 800584e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	605a      	str	r2, [r3, #4]
 8005858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800585a:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <MX_TIM3_Init+0x94>)
 800585c:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <MX_TIM3_Init+0x98>)
 800585e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <MX_TIM3_Init+0x94>)
 8005862:	2200      	movs	r2, #0
 8005864:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005866:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <MX_TIM3_Init+0x94>)
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800586c:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <MX_TIM3_Init+0x94>)
 800586e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005872:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005874:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <MX_TIM3_Init+0x94>)
 8005876:	2200      	movs	r2, #0
 8005878:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <MX_TIM3_Init+0x94>)
 800587c:	2200      	movs	r2, #0
 800587e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005880:	4813      	ldr	r0, [pc, #76]	; (80058d0 <MX_TIM3_Init+0x94>)
 8005882:	f005 fd71 	bl	800b368 <HAL_TIM_Base_Init>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800588c:	f7fe f8b0 	bl	80039f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005894:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005896:	f107 0310 	add.w	r3, r7, #16
 800589a:	4619      	mov	r1, r3
 800589c:	480c      	ldr	r0, [pc, #48]	; (80058d0 <MX_TIM3_Init+0x94>)
 800589e:	f005 ff53 	bl	800b748 <HAL_TIM_ConfigClockSource>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80058a8:	f7fe f8a2 	bl	80039f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058ac:	2300      	movs	r3, #0
 80058ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80058b4:	1d3b      	adds	r3, r7, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	4805      	ldr	r0, [pc, #20]	; (80058d0 <MX_TIM3_Init+0x94>)
 80058ba:	f006 f971 	bl	800bba0 <HAL_TIMEx_MasterConfigSynchronization>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80058c4:	f7fe f894 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80058c8:	bf00      	nop
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20001060 	.word	0x20001060
 80058d4:	40000400 	.word	0x40000400

080058d8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058de:	1d3b      	adds	r3, r7, #4
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	605a      	str	r2, [r3, #4]
 80058e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <MX_TIM7_Init+0x64>)
 80058ea:	4a15      	ldr	r2, [pc, #84]	; (8005940 <MX_TIM7_Init+0x68>)
 80058ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <MX_TIM7_Init+0x64>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058f4:	4b11      	ldr	r3, [pc, #68]	; (800593c <MX_TIM7_Init+0x64>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5555;
 80058fa:	4b10      	ldr	r3, [pc, #64]	; (800593c <MX_TIM7_Init+0x64>)
 80058fc:	f241 52b3 	movw	r2, #5555	; 0x15b3
 8005900:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005902:	4b0e      	ldr	r3, [pc, #56]	; (800593c <MX_TIM7_Init+0x64>)
 8005904:	2200      	movs	r2, #0
 8005906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005908:	480c      	ldr	r0, [pc, #48]	; (800593c <MX_TIM7_Init+0x64>)
 800590a:	f005 fd2d 	bl	800b368 <HAL_TIM_Base_Init>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005914:	f7fe f86c 	bl	80039f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005918:	2320      	movs	r3, #32
 800591a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005920:	1d3b      	adds	r3, r7, #4
 8005922:	4619      	mov	r1, r3
 8005924:	4805      	ldr	r0, [pc, #20]	; (800593c <MX_TIM7_Init+0x64>)
 8005926:	f006 f93b 	bl	800bba0 <HAL_TIMEx_MasterConfigSynchronization>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005930:	f7fe f85e 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	200010ac 	.word	0x200010ac
 8005940:	40001400 	.word	0x40001400

08005944 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800594a:	f107 0310 	add.w	r3, r7, #16
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	605a      	str	r2, [r3, #4]
 8005954:	609a      	str	r2, [r3, #8]
 8005956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005962:	4b20      	ldr	r3, [pc, #128]	; (80059e4 <MX_TIM8_Init+0xa0>)
 8005964:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <MX_TIM8_Init+0xa4>)
 8005966:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005968:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <MX_TIM8_Init+0xa0>)
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800596e:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <MX_TIM8_Init+0xa0>)
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005974:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <MX_TIM8_Init+0xa0>)
 8005976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800597a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <MX_TIM8_Init+0xa0>)
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <MX_TIM8_Init+0xa0>)
 8005984:	2200      	movs	r2, #0
 8005986:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005988:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <MX_TIM8_Init+0xa0>)
 800598a:	2200      	movs	r2, #0
 800598c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800598e:	4815      	ldr	r0, [pc, #84]	; (80059e4 <MX_TIM8_Init+0xa0>)
 8005990:	f005 fcea 	bl	800b368 <HAL_TIM_Base_Init>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800599a:	f7fe f829 	bl	80039f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800599e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80059a4:	f107 0310 	add.w	r3, r7, #16
 80059a8:	4619      	mov	r1, r3
 80059aa:	480e      	ldr	r0, [pc, #56]	; (80059e4 <MX_TIM8_Init+0xa0>)
 80059ac:	f005 fecc 	bl	800b748 <HAL_TIM_ConfigClockSource>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80059b6:	f7fe f81b 	bl	80039f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80059c6:	1d3b      	adds	r3, r7, #4
 80059c8:	4619      	mov	r1, r3
 80059ca:	4806      	ldr	r0, [pc, #24]	; (80059e4 <MX_TIM8_Init+0xa0>)
 80059cc:	f006 f8e8 	bl	800bba0 <HAL_TIMEx_MasterConfigSynchronization>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80059d6:	f7fe f80b 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80059da:	bf00      	nop
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200010f8 	.word	0x200010f8
 80059e8:	40010400 	.word	0x40010400

080059ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08e      	sub	sp, #56	; 0x38
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a3f      	ldr	r2, [pc, #252]	; (8005b08 <HAL_TIM_Base_MspInit+0x11c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d10c      	bne.n	8005a28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005a0e:	4b3f      	ldr	r3, [pc, #252]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	4a3e      	ldr	r2, [pc, #248]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	6453      	str	r3, [r2, #68]	; 0x44
 8005a1a:	4b3c      	ldr	r3, [pc, #240]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	623b      	str	r3, [r7, #32]
 8005a24:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005a26:	e06a      	b.n	8005afe <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM2)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a30:	d10c      	bne.n	8005a4c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a32:	4b36      	ldr	r3, [pc, #216]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	4a35      	ldr	r2, [pc, #212]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a38:	f043 0301 	orr.w	r3, r3, #1
 8005a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a3e:	4b33      	ldr	r3, [pc, #204]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	69fb      	ldr	r3, [r7, #28]
}
 8005a4a:	e058      	b.n	8005afe <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM3)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2f      	ldr	r2, [pc, #188]	; (8005b10 <HAL_TIM_Base_MspInit+0x124>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d10c      	bne.n	8005a70 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a56:	4b2d      	ldr	r3, [pc, #180]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	4a2c      	ldr	r2, [pc, #176]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a5c:	f043 0302 	orr.w	r3, r3, #2
 8005a60:	6413      	str	r3, [r2, #64]	; 0x40
 8005a62:	4b2a      	ldr	r3, [pc, #168]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	69bb      	ldr	r3, [r7, #24]
}
 8005a6e:	e046      	b.n	8005afe <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM7)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a27      	ldr	r2, [pc, #156]	; (8005b14 <HAL_TIM_Base_MspInit+0x128>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d114      	bne.n	8005aa4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005a7a:	4b24      	ldr	r3, [pc, #144]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	4a23      	ldr	r2, [pc, #140]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a80:	f043 0320 	orr.w	r3, r3, #32
 8005a84:	6413      	str	r3, [r2, #64]	; 0x40
 8005a86:	4b21      	ldr	r3, [pc, #132]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005a92:	2200      	movs	r2, #0
 8005a94:	2105      	movs	r1, #5
 8005a96:	2037      	movs	r0, #55	; 0x37
 8005a98:	f000 ff0e 	bl	80068b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005a9c:	2037      	movs	r0, #55	; 0x37
 8005a9e:	f000 ff27 	bl	80068f0 <HAL_NVIC_EnableIRQ>
}
 8005aa2:	e02c      	b.n	8005afe <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM8)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <HAL_TIM_Base_MspInit+0x12c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d127      	bne.n	8005afe <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005aae:	4b17      	ldr	r3, [pc, #92]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab2:	4a16      	ldr	r2, [pc, #88]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005ab4:	f043 0302 	orr.w	r3, r3, #2
 8005ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8005aba:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005ac6:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	4a10      	ldr	r2, [pc, #64]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ad2:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <HAL_TIM_Base_MspInit+0x120>)
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005ade:	2304      	movs	r3, #4
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aea:	2300      	movs	r3, #0
 8005aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005aee:	2303      	movs	r3, #3
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af6:	4619      	mov	r1, r3
 8005af8:	4808      	ldr	r0, [pc, #32]	; (8005b1c <HAL_TIM_Base_MspInit+0x130>)
 8005afa:	f002 f985 	bl	8007e08 <HAL_GPIO_Init>
}
 8005afe:	bf00      	nop
 8005b00:	3738      	adds	r7, #56	; 0x38
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40001400 	.word	0x40001400
 8005b18:	40010400 	.word	0x40010400
 8005b1c:	40022000 	.word	0x40022000

08005b20 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005b24:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <MX_UART7_Init+0x58>)
 8005b26:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <MX_UART7_Init+0x5c>)
 8005b28:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8005b2a:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <MX_UART7_Init+0x58>)
 8005b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b30:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005b32:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <MX_UART7_Init+0x58>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8005b38:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <MX_UART7_Init+0x58>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <MX_UART7_Init+0x58>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005b44:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <MX_UART7_Init+0x58>)
 8005b46:	220c      	movs	r2, #12
 8005b48:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b4a:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <MX_UART7_Init+0x58>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b50:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <MX_UART7_Init+0x58>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <MX_UART7_Init+0x58>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b5c:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <MX_UART7_Init+0x58>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005b62:	4805      	ldr	r0, [pc, #20]	; (8005b78 <MX_UART7_Init+0x58>)
 8005b64:	f006 f8c8 	bl	800bcf8 <HAL_UART_Init>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8005b6e:	f7fd ff3f 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005b72:	bf00      	nop
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20001144 	.word	0x20001144
 8005b7c:	40007800 	.word	0x40007800

08005b80 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005b84:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <MX_USART1_UART_Init+0x58>)
 8005b86:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <MX_USART1_UART_Init+0x5c>)
 8005b88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005b8a:	4b13      	ldr	r3, [pc, #76]	; (8005bd8 <MX_USART1_UART_Init+0x58>)
 8005b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005b92:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <MX_USART1_UART_Init+0x58>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b98:	4b0f      	ldr	r3, [pc, #60]	; (8005bd8 <MX_USART1_UART_Init+0x58>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <MX_USART1_UART_Init+0x58>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ba4:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <MX_USART1_UART_Init+0x58>)
 8005ba6:	220c      	movs	r2, #12
 8005ba8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005baa:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <MX_USART1_UART_Init+0x58>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bb0:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <MX_USART1_UART_Init+0x58>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005bb6:	4b08      	ldr	r3, [pc, #32]	; (8005bd8 <MX_USART1_UART_Init+0x58>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <MX_USART1_UART_Init+0x58>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005bc2:	4805      	ldr	r0, [pc, #20]	; (8005bd8 <MX_USART1_UART_Init+0x58>)
 8005bc4:	f006 f898 	bl	800bcf8 <HAL_UART_Init>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005bce:	f7fd ff0f 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005bd2:	bf00      	nop
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	200011cc 	.word	0x200011cc
 8005bdc:	40011000 	.word	0x40011000

08005be0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005be4:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <MX_USART6_UART_Init+0x58>)
 8005be6:	4a15      	ldr	r2, [pc, #84]	; (8005c3c <MX_USART6_UART_Init+0x5c>)
 8005be8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005bea:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <MX_USART6_UART_Init+0x58>)
 8005bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bf0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005bf2:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <MX_USART6_UART_Init+0x58>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <MX_USART6_UART_Init+0x58>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <MX_USART6_UART_Init+0x58>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <MX_USART6_UART_Init+0x58>)
 8005c06:	220c      	movs	r2, #12
 8005c08:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <MX_USART6_UART_Init+0x58>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c10:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <MX_USART6_UART_Init+0x58>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <MX_USART6_UART_Init+0x58>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c1c:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <MX_USART6_UART_Init+0x58>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005c22:	4805      	ldr	r0, [pc, #20]	; (8005c38 <MX_USART6_UART_Init+0x58>)
 8005c24:	f006 f868 	bl	800bcf8 <HAL_UART_Init>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8005c2e:	f7fd fedf 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005c32:	bf00      	nop
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20001254 	.word	0x20001254
 8005c3c:	40011400 	.word	0x40011400

08005c40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b0b0      	sub	sp, #192	; 0xc0
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	605a      	str	r2, [r3, #4]
 8005c52:	609a      	str	r2, [r3, #8]
 8005c54:	60da      	str	r2, [r3, #12]
 8005c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c5c:	2284      	movs	r2, #132	; 0x84
 8005c5e:	2100      	movs	r1, #0
 8005c60:	4618      	mov	r0, r3
 8005c62:	f008 ff09 	bl	800ea78 <memset>
  if(uartHandle->Instance==UART7)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a75      	ldr	r2, [pc, #468]	; (8005e40 <HAL_UART_MspInit+0x200>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d13d      	bne.n	8005cec <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c74:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005c76:	2300      	movs	r3, #0
 8005c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c80:	4618      	mov	r0, r3
 8005c82:	f004 fa6f 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005c8c:	f7fd feb0 	bl	80039f0 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005c90:	4b6c      	ldr	r3, [pc, #432]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	4a6b      	ldr	r2, [pc, #428]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c9c:	4b69      	ldr	r3, [pc, #420]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005ca8:	4b66      	ldr	r3, [pc, #408]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	4a65      	ldr	r2, [pc, #404]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005cae:	f043 0320 	orr.w	r3, r3, #32
 8005cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8005cb4:	4b63      	ldr	r3, [pc, #396]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	623b      	str	r3, [r7, #32]
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005cc0:	23c0      	movs	r3, #192	; 0xc0
 8005cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005cd8:	2308      	movs	r3, #8
 8005cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005cde:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4858      	ldr	r0, [pc, #352]	; (8005e48 <HAL_UART_MspInit+0x208>)
 8005ce6:	f002 f88f 	bl	8007e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005cea:	e0a4      	b.n	8005e36 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a56      	ldr	r2, [pc, #344]	; (8005e4c <HAL_UART_MspInit+0x20c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d15d      	bne.n	8005db2 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005cf6:	2340      	movs	r3, #64	; 0x40
 8005cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d02:	4618      	mov	r0, r3
 8005d04:	f004 fa2e 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8005d0e:	f7fd fe6f 	bl	80039f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d12:	4b4c      	ldr	r3, [pc, #304]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d16:	4a4b      	ldr	r2, [pc, #300]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005d18:	f043 0310 	orr.w	r3, r3, #16
 8005d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d1e:	4b49      	ldr	r3, [pc, #292]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d2a:	4b46      	ldr	r3, [pc, #280]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	4a45      	ldr	r2, [pc, #276]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005d30:	f043 0302 	orr.w	r3, r3, #2
 8005d34:	6313      	str	r3, [r2, #48]	; 0x30
 8005d36:	4b43      	ldr	r3, [pc, #268]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d42:	4b40      	ldr	r3, [pc, #256]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	4a3f      	ldr	r2, [pc, #252]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d4e:	4b3d      	ldr	r3, [pc, #244]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d60:	2302      	movs	r3, #2
 8005d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005d72:	2307      	movs	r3, #7
 8005d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005d78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4834      	ldr	r0, [pc, #208]	; (8005e50 <HAL_UART_MspInit+0x210>)
 8005d80:	f002 f842 	bl	8007e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005d9e:	2307      	movs	r3, #7
 8005da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005da4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005da8:	4619      	mov	r1, r3
 8005daa:	482a      	ldr	r0, [pc, #168]	; (8005e54 <HAL_UART_MspInit+0x214>)
 8005dac:	f002 f82c 	bl	8007e08 <HAL_GPIO_Init>
}
 8005db0:	e041      	b.n	8005e36 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <HAL_UART_MspInit+0x218>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d13c      	bne.n	8005e36 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005dbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f004 f9c9 	bl	800a164 <HAL_RCCEx_PeriphCLKConfig>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8005dd8:	f7fd fe0a 	bl	80039f0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005ddc:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de0:	4a18      	ldr	r2, [pc, #96]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005de2:	f043 0320 	orr.w	r3, r3, #32
 8005de6:	6453      	str	r3, [r2, #68]	; 0x44
 8005de8:	4b16      	ldr	r3, [pc, #88]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005df4:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	4a12      	ldr	r2, [pc, #72]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005dfa:	f043 0304 	orr.w	r3, r3, #4
 8005dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8005e00:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <HAL_UART_MspInit+0x204>)
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8005e0c:	23c0      	movs	r3, #192	; 0xc0
 8005e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e12:	2302      	movs	r3, #2
 8005e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005e24:	2308      	movs	r3, #8
 8005e26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005e2e:	4619      	mov	r1, r3
 8005e30:	480a      	ldr	r0, [pc, #40]	; (8005e5c <HAL_UART_MspInit+0x21c>)
 8005e32:	f001 ffe9 	bl	8007e08 <HAL_GPIO_Init>
}
 8005e36:	bf00      	nop
 8005e38:	37c0      	adds	r7, #192	; 0xc0
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	40007800 	.word	0x40007800
 8005e44:	40023800 	.word	0x40023800
 8005e48:	40021400 	.word	0x40021400
 8005e4c:	40011000 	.word	0x40011000
 8005e50:	40020400 	.word	0x40020400
 8005e54:	40020000 	.word	0x40020000
 8005e58:	40011400 	.word	0x40011400
 8005e5c:	40020800 	.word	0x40020800

08005e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e64:	480d      	ldr	r0, [pc, #52]	; (8005e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005e66:	490e      	ldr	r1, [pc, #56]	; (8005ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005e68:	4a0e      	ldr	r2, [pc, #56]	; (8005ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e6c:	e002      	b.n	8005e74 <LoopCopyDataInit>

08005e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e72:	3304      	adds	r3, #4

08005e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e78:	d3f9      	bcc.n	8005e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e7a:	4a0b      	ldr	r2, [pc, #44]	; (8005ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005e7c:	4c0b      	ldr	r4, [pc, #44]	; (8005eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8005e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e80:	e001      	b.n	8005e86 <LoopFillZerobss>

08005e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e84:	3204      	adds	r2, #4

08005e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e88:	d3fb      	bcc.n	8005e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005e8a:	f7ff fc23 	bl	80056d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e8e:	f008 fdbf 	bl	800ea10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e92:	f7fd fca7 	bl	80037e4 <main>
  bx  lr    
 8005e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005e98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ea0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8005ea4:	08012b38 	.word	0x08012b38
  ldr r2, =_sbss
 8005ea8:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8005eac:	2000503c 	.word	0x2000503c

08005eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005eb0:	e7fe      	b.n	8005eb0 <ADC_IRQHandler>

08005eb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eb6:	2003      	movs	r0, #3
 8005eb8:	f000 fcf3 	bl	80068a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ebc:	200f      	movs	r0, #15
 8005ebe:	f7ff fb01 	bl	80054c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ec2:	f7ff fad7 	bl	8005474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ed0:	4b06      	ldr	r3, [pc, #24]	; (8005eec <HAL_IncTick+0x20>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <HAL_IncTick+0x24>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4413      	add	r3, r2
 8005edc:	4a04      	ldr	r2, [pc, #16]	; (8005ef0 <HAL_IncTick+0x24>)
 8005ede:	6013      	str	r3, [r2, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	20000050 	.word	0x20000050
 8005ef0:	200012dc 	.word	0x200012dc

08005ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8005ef8:	4b03      	ldr	r3, [pc, #12]	; (8005f08 <HAL_GetTick+0x14>)
 8005efa:	681b      	ldr	r3, [r3, #0]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	200012dc 	.word	0x200012dc

08005f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f14:	f7ff ffee 	bl	8005ef4 <HAL_GetTick>
 8005f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f24:	d005      	beq.n	8005f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f26:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <HAL_Delay+0x44>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f32:	bf00      	nop
 8005f34:	f7ff ffde 	bl	8005ef4 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d8f7      	bhi.n	8005f34 <HAL_Delay+0x28>
  {
  }
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000050 	.word	0x20000050

08005f54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e031      	b.n	8005fce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fb f876 	bl	8001064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d116      	bne.n	8005fc0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f96:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <HAL_ADC_Init+0x84>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	f043 0202 	orr.w	r2, r3, #2
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fad6 	bl	8006554 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	f023 0303 	bic.w	r3, r3, #3
 8005fb6:	f043 0201 	orr.w	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8005fbe:	e001      	b.n	8005fc4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	ffffeefd 	.word	0xffffeefd

08005fdc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_ADC_Start+0x1a>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e0ad      	b.n	8006152 <HAL_ADC_Start+0x176>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d018      	beq.n	800603e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800601c:	4b50      	ldr	r3, [pc, #320]	; (8006160 <HAL_ADC_Start+0x184>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a50      	ldr	r2, [pc, #320]	; (8006164 <HAL_ADC_Start+0x188>)
 8006022:	fba2 2303 	umull	r2, r3, r2, r3
 8006026:	0c9a      	lsrs	r2, r3, #18
 8006028:	4613      	mov	r3, r2
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	4413      	add	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006030:	e002      	b.n	8006038 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3b01      	subs	r3, #1
 8006036:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f9      	bne.n	8006032 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b01      	cmp	r3, #1
 800604a:	d175      	bne.n	8006138 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006050:	4b45      	ldr	r3, [pc, #276]	; (8006168 <HAL_ADC_Start+0x18c>)
 8006052:	4013      	ands	r3, r2
 8006054:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006066:	2b00      	cmp	r3, #0
 8006068:	d007      	beq.n	800607a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006072:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006086:	d106      	bne.n	8006096 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608c:	f023 0206 	bic.w	r2, r3, #6
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	645a      	str	r2, [r3, #68]	; 0x44
 8006094:	e002      	b.n	800609c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80060ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80060ae:	4b2f      	ldr	r3, [pc, #188]	; (800616c <HAL_ADC_Start+0x190>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10f      	bne.n	80060da <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d143      	bne.n	8006150 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060d6:	609a      	str	r2, [r3, #8]
 80060d8:	e03a      	b.n	8006150 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a24      	ldr	r2, [pc, #144]	; (8006170 <HAL_ADC_Start+0x194>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d10e      	bne.n	8006102 <HAL_ADC_Start+0x126>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d107      	bne.n	8006102 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006100:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8006102:	4b1a      	ldr	r3, [pc, #104]	; (800616c <HAL_ADC_Start+0x190>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	2b00      	cmp	r3, #0
 800610c:	d120      	bne.n	8006150 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a18      	ldr	r2, [pc, #96]	; (8006174 <HAL_ADC_Start+0x198>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d11b      	bne.n	8006150 <HAL_ADC_Start+0x174>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d114      	bne.n	8006150 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006134:	609a      	str	r2, [r3, #8]
 8006136:	e00b      	b.n	8006150 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	f043 0210 	orr.w	r2, r3, #16
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006148:	f043 0201 	orr.w	r2, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	20000048 	.word	0x20000048
 8006164:	431bde83 	.word	0x431bde83
 8006168:	fffff8fe 	.word	0xfffff8fe
 800616c:	40012300 	.word	0x40012300
 8006170:	40012000 	.word	0x40012000
 8006174:	40012200 	.word	0x40012200

08006178 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006194:	d113      	bne.n	80061be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80061a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a4:	d10b      	bne.n	80061be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f043 0220 	orr.w	r2, r3, #32
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e063      	b.n	8006286 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80061be:	f7ff fe99 	bl	8005ef4 <HAL_GetTick>
 80061c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80061c4:	e021      	b.n	800620a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061cc:	d01d      	beq.n	800620a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <HAL_ADC_PollForConversion+0x6c>
 80061d4:	f7ff fe8e 	bl	8005ef4 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d212      	bcs.n	800620a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d00b      	beq.n	800620a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f043 0204 	orr.w	r2, r3, #4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e03d      	b.n	8006286 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b02      	cmp	r3, #2
 8006216:	d1d6      	bne.n	80061c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0212 	mvn.w	r2, #18
 8006220:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d123      	bne.n	8006284 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11f      	bne.n	8006284 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800624e:	2b00      	cmp	r3, #0
 8006250:	d006      	beq.n	8006260 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800625c:	2b00      	cmp	r3, #0
 800625e:	d111      	bne.n	8006284 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d105      	bne.n	8006284 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	f043 0201 	orr.w	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_ADC_ConfigChannel+0x1c>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e136      	b.n	8006532 <HAL_ADC_ConfigChannel+0x28a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b09      	cmp	r3, #9
 80062d2:	d93a      	bls.n	800634a <HAL_ADC_ConfigChannel+0xa2>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062dc:	d035      	beq.n	800634a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68d9      	ldr	r1, [r3, #12]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	4613      	mov	r3, r2
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	4413      	add	r3, r2
 80062f2:	3b1e      	subs	r3, #30
 80062f4:	2207      	movs	r2, #7
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	43da      	mvns	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	400a      	ands	r2, r1
 8006302:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a8d      	ldr	r2, [pc, #564]	; (8006540 <HAL_ADC_ConfigChannel+0x298>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d10a      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68d9      	ldr	r1, [r3, #12]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	061a      	lsls	r2, r3, #24
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006322:	e035      	b.n	8006390 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68d9      	ldr	r1, [r3, #12]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	4618      	mov	r0, r3
 8006336:	4603      	mov	r3, r0
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	4403      	add	r3, r0
 800633c:	3b1e      	subs	r3, #30
 800633e:	409a      	lsls	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006348:	e022      	b.n	8006390 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6919      	ldr	r1, [r3, #16]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	b29b      	uxth	r3, r3
 8006356:	461a      	mov	r2, r3
 8006358:	4613      	mov	r3, r2
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	4413      	add	r3, r2
 800635e:	2207      	movs	r2, #7
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	43da      	mvns	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	400a      	ands	r2, r1
 800636c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6919      	ldr	r1, [r3, #16]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	4618      	mov	r0, r3
 8006380:	4603      	mov	r3, r0
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	4403      	add	r3, r0
 8006386:	409a      	lsls	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b06      	cmp	r3, #6
 8006396:	d824      	bhi.n	80063e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	3b05      	subs	r3, #5
 80063aa:	221f      	movs	r2, #31
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	43da      	mvns	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	400a      	ands	r2, r1
 80063b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	4618      	mov	r0, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	3b05      	subs	r3, #5
 80063d4:	fa00 f203 	lsl.w	r2, r0, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	635a      	str	r2, [r3, #52]	; 0x34
 80063e0:	e04c      	b.n	800647c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2b0c      	cmp	r3, #12
 80063e8:	d824      	bhi.n	8006434 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	3b23      	subs	r3, #35	; 0x23
 80063fc:	221f      	movs	r2, #31
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43da      	mvns	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	400a      	ands	r2, r1
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	4618      	mov	r0, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	3b23      	subs	r3, #35	; 0x23
 8006426:	fa00 f203 	lsl.w	r2, r0, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	631a      	str	r2, [r3, #48]	; 0x30
 8006432:	e023      	b.n	800647c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	3b41      	subs	r3, #65	; 0x41
 8006446:	221f      	movs	r2, #31
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	43da      	mvns	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	400a      	ands	r2, r1
 8006454:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	4618      	mov	r0, r3
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	3b41      	subs	r3, #65	; 0x41
 8006470:	fa00 f203 	lsl.w	r2, r0, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a30      	ldr	r2, [pc, #192]	; (8006544 <HAL_ADC_ConfigChannel+0x29c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d10a      	bne.n	800649c <HAL_ADC_ConfigChannel+0x1f4>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800648e:	d105      	bne.n	800649c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006490:	4b2d      	ldr	r3, [pc, #180]	; (8006548 <HAL_ADC_ConfigChannel+0x2a0>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	4a2c      	ldr	r2, [pc, #176]	; (8006548 <HAL_ADC_ConfigChannel+0x2a0>)
 8006496:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800649a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a28      	ldr	r2, [pc, #160]	; (8006544 <HAL_ADC_ConfigChannel+0x29c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d10f      	bne.n	80064c6 <HAL_ADC_ConfigChannel+0x21e>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b12      	cmp	r3, #18
 80064ac:	d10b      	bne.n	80064c6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80064ae:	4b26      	ldr	r3, [pc, #152]	; (8006548 <HAL_ADC_ConfigChannel+0x2a0>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	4a25      	ldr	r2, [pc, #148]	; (8006548 <HAL_ADC_ConfigChannel+0x2a0>)
 80064b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80064b8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80064ba:	4b23      	ldr	r3, [pc, #140]	; (8006548 <HAL_ADC_ConfigChannel+0x2a0>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	4a22      	ldr	r2, [pc, #136]	; (8006548 <HAL_ADC_ConfigChannel+0x2a0>)
 80064c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1e      	ldr	r2, [pc, #120]	; (8006544 <HAL_ADC_ConfigChannel+0x29c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d12b      	bne.n	8006528 <HAL_ADC_ConfigChannel+0x280>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1a      	ldr	r2, [pc, #104]	; (8006540 <HAL_ADC_ConfigChannel+0x298>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d003      	beq.n	80064e2 <HAL_ADC_ConfigChannel+0x23a>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b11      	cmp	r3, #17
 80064e0:	d122      	bne.n	8006528 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80064e2:	4b19      	ldr	r3, [pc, #100]	; (8006548 <HAL_ADC_ConfigChannel+0x2a0>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	4a18      	ldr	r2, [pc, #96]	; (8006548 <HAL_ADC_ConfigChannel+0x2a0>)
 80064e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80064ec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80064ee:	4b16      	ldr	r3, [pc, #88]	; (8006548 <HAL_ADC_ConfigChannel+0x2a0>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	4a15      	ldr	r2, [pc, #84]	; (8006548 <HAL_ADC_ConfigChannel+0x2a0>)
 80064f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064f8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a10      	ldr	r2, [pc, #64]	; (8006540 <HAL_ADC_ConfigChannel+0x298>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d111      	bne.n	8006528 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006504:	4b11      	ldr	r3, [pc, #68]	; (800654c <HAL_ADC_ConfigChannel+0x2a4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a11      	ldr	r2, [pc, #68]	; (8006550 <HAL_ADC_ConfigChannel+0x2a8>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	0c9a      	lsrs	r2, r3, #18
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800651a:	e002      	b.n	8006522 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3b01      	subs	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1f9      	bne.n	800651c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	10000012 	.word	0x10000012
 8006544:	40012000 	.word	0x40012000
 8006548:	40012300 	.word	0x40012300
 800654c:	20000048 	.word	0x20000048
 8006550:	431bde83 	.word	0x431bde83

08006554 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800655c:	4b78      	ldr	r3, [pc, #480]	; (8006740 <ADC_Init+0x1ec>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4a77      	ldr	r2, [pc, #476]	; (8006740 <ADC_Init+0x1ec>)
 8006562:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006566:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006568:	4b75      	ldr	r3, [pc, #468]	; (8006740 <ADC_Init+0x1ec>)
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4973      	ldr	r1, [pc, #460]	; (8006740 <ADC_Init+0x1ec>)
 8006572:	4313      	orrs	r3, r2
 8006574:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6859      	ldr	r1, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	021a      	lsls	r2, r3, #8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80065a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6859      	ldr	r1, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6899      	ldr	r1, [r3, #8]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	4a58      	ldr	r2, [pc, #352]	; (8006744 <ADC_Init+0x1f0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d022      	beq.n	800662e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6899      	ldr	r1, [r3, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6899      	ldr	r1, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	609a      	str	r2, [r3, #8]
 800662c:	e00f      	b.n	800664e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800663c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800664c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0202 	bic.w	r2, r2, #2
 800665c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6899      	ldr	r1, [r3, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	005a      	lsls	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01b      	beq.n	80066b4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800668a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800669a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6859      	ldr	r1, [r3, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	3b01      	subs	r3, #1
 80066a8:	035a      	lsls	r2, r3, #13
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	e007      	b.n	80066c4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80066d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	3b01      	subs	r3, #1
 80066e0:	051a      	lsls	r2, r3, #20
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6899      	ldr	r1, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006706:	025a      	lsls	r2, r3, #9
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6899      	ldr	r1, [r3, #8]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	029a      	lsls	r2, r3, #10
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	609a      	str	r2, [r3, #8]
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	40012300 	.word	0x40012300
 8006744:	0f000001 	.word	0x0f000001

08006748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <__NVIC_SetPriorityGrouping+0x40>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006764:	4013      	ands	r3, r2
 8006766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006770:	4b06      	ldr	r3, [pc, #24]	; (800678c <__NVIC_SetPriorityGrouping+0x44>)
 8006772:	4313      	orrs	r3, r2
 8006774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006776:	4a04      	ldr	r2, [pc, #16]	; (8006788 <__NVIC_SetPriorityGrouping+0x40>)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	60d3      	str	r3, [r2, #12]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	e000ed00 	.word	0xe000ed00
 800678c:	05fa0000 	.word	0x05fa0000

08006790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	0a1b      	lsrs	r3, r3, #8
 800679a:	f003 0307 	and.w	r3, r3, #7
}
 800679e:	4618      	mov	r0, r3
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	e000ed00 	.word	0xe000ed00

080067ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	db0b      	blt.n	80067d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	f003 021f 	and.w	r2, r3, #31
 80067c4:	4907      	ldr	r1, [pc, #28]	; (80067e4 <__NVIC_EnableIRQ+0x38>)
 80067c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	2001      	movs	r0, #1
 80067ce:	fa00 f202 	lsl.w	r2, r0, r2
 80067d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	e000e100 	.word	0xe000e100

080067e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	6039      	str	r1, [r7, #0]
 80067f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	db0a      	blt.n	8006812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	490c      	ldr	r1, [pc, #48]	; (8006834 <__NVIC_SetPriority+0x4c>)
 8006802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006806:	0112      	lsls	r2, r2, #4
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	440b      	add	r3, r1
 800680c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006810:	e00a      	b.n	8006828 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	4908      	ldr	r1, [pc, #32]	; (8006838 <__NVIC_SetPriority+0x50>)
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	3b04      	subs	r3, #4
 8006820:	0112      	lsls	r2, r2, #4
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	440b      	add	r3, r1
 8006826:	761a      	strb	r2, [r3, #24]
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	e000e100 	.word	0xe000e100
 8006838:	e000ed00 	.word	0xe000ed00

0800683c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800683c:	b480      	push	{r7}
 800683e:	b089      	sub	sp, #36	; 0x24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f1c3 0307 	rsb	r3, r3, #7
 8006856:	2b04      	cmp	r3, #4
 8006858:	bf28      	it	cs
 800685a:	2304      	movcs	r3, #4
 800685c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	3304      	adds	r3, #4
 8006862:	2b06      	cmp	r3, #6
 8006864:	d902      	bls.n	800686c <NVIC_EncodePriority+0x30>
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	3b03      	subs	r3, #3
 800686a:	e000      	b.n	800686e <NVIC_EncodePriority+0x32>
 800686c:	2300      	movs	r3, #0
 800686e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	fa02 f303 	lsl.w	r3, r2, r3
 800687a:	43da      	mvns	r2, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	401a      	ands	r2, r3
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	fa01 f303 	lsl.w	r3, r1, r3
 800688e:	43d9      	mvns	r1, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006894:	4313      	orrs	r3, r2
         );
}
 8006896:	4618      	mov	r0, r3
 8006898:	3724      	adds	r7, #36	; 0x24
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b082      	sub	sp, #8
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff ff4c 	bl	8006748 <__NVIC_SetPriorityGrouping>
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068ca:	f7ff ff61 	bl	8006790 <__NVIC_GetPriorityGrouping>
 80068ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	6978      	ldr	r0, [r7, #20]
 80068d6:	f7ff ffb1 	bl	800683c <NVIC_EncodePriority>
 80068da:	4602      	mov	r2, r0
 80068dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e0:	4611      	mov	r1, r2
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff ff80 	bl	80067e8 <__NVIC_SetPriority>
}
 80068e8:	bf00      	nop
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff ff54 	bl	80067ac <__NVIC_EnableIRQ>
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e014      	b.n	8006948 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	791b      	ldrb	r3, [r3, #4]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d105      	bne.n	8006934 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fa fc30 	bl	8001194 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	795b      	ldrb	r3, [r3, #5]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_DAC_Start_DMA+0x1e>
 800696a:	2302      	movs	r3, #2
 800696c:	e0ab      	b.n	8006ac6 <HAL_DAC_Start_DMA+0x176>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2202      	movs	r2, #2
 8006978:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d12f      	bne.n	80069e0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4a52      	ldr	r2, [pc, #328]	; (8006ad0 <HAL_DAC_Start_DMA+0x180>)
 8006986:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	4a51      	ldr	r2, [pc, #324]	; (8006ad4 <HAL_DAC_Start_DMA+0x184>)
 800698e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	4a50      	ldr	r2, [pc, #320]	; (8006ad8 <HAL_DAC_Start_DMA+0x188>)
 8006996:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069a6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d013      	beq.n	80069d6 <HAL_DAC_Start_DMA+0x86>
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d845      	bhi.n	8006a40 <HAL_DAC_Start_DMA+0xf0>
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_DAC_Start_DMA+0x72>
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d005      	beq.n	80069cc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80069c0:	e03e      	b.n	8006a40 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	613b      	str	r3, [r7, #16]
        break;
 80069ca:	e03c      	b.n	8006a46 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	613b      	str	r3, [r7, #16]
        break;
 80069d4:	e037      	b.n	8006a46 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3310      	adds	r3, #16
 80069dc:	613b      	str	r3, [r7, #16]
        break;
 80069de:	e032      	b.n	8006a46 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4a3d      	ldr	r2, [pc, #244]	; (8006adc <HAL_DAC_Start_DMA+0x18c>)
 80069e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	4a3c      	ldr	r2, [pc, #240]	; (8006ae0 <HAL_DAC_Start_DMA+0x190>)
 80069ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4a3b      	ldr	r2, [pc, #236]	; (8006ae4 <HAL_DAC_Start_DMA+0x194>)
 80069f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a06:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d013      	beq.n	8006a36 <HAL_DAC_Start_DMA+0xe6>
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d817      	bhi.n	8006a44 <HAL_DAC_Start_DMA+0xf4>
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_DAC_Start_DMA+0xd2>
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d005      	beq.n	8006a2c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8006a20:	e010      	b.n	8006a44 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3314      	adds	r3, #20
 8006a28:	613b      	str	r3, [r7, #16]
        break;
 8006a2a:	e00c      	b.n	8006a46 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3318      	adds	r3, #24
 8006a32:	613b      	str	r3, [r7, #16]
        break;
 8006a34:	e007      	b.n	8006a46 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	331c      	adds	r3, #28
 8006a3c:	613b      	str	r3, [r7, #16]
        break;
 8006a3e:	e002      	b.n	8006a46 <HAL_DAC_Start_DMA+0xf6>
        break;
 8006a40:	bf00      	nop
 8006a42:	e000      	b.n	8006a46 <HAL_DAC_Start_DMA+0xf6>
        break;
 8006a44:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d111      	bne.n	8006a70 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6898      	ldr	r0, [r3, #8]
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	f000 faf9 	bl	800705c <HAL_DMA_Start_IT>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75fb      	strb	r3, [r7, #23]
 8006a6e:	e010      	b.n	8006a92 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006a7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68d8      	ldr	r0, [r3, #12]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	f000 fae7 	bl	800705c <HAL_DMA_Start_IT>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6819      	ldr	r1, [r3, #0]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	2201      	movs	r2, #1
 8006aac:	409a      	lsls	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	e005      	b.n	8006ac4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f043 0204 	orr.w	r2, r3, #4
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	08006d1b 	.word	0x08006d1b
 8006ad4:	08006d3d 	.word	0x08006d3d
 8006ad8:	08006d59 	.word	0x08006d59
 8006adc:	08006dd7 	.word	0x08006dd7
 8006ae0:	08006df9 	.word	0x08006df9
 8006ae4:	08006e15 	.word	0x08006e15

08006ae8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6819      	ldr	r1, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	43da      	mvns	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	400a      	ands	r2, r1
 8006b0e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6819      	ldr	r1, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	43da      	mvns	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	400a      	ands	r2, r1
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10d      	bne.n	8006b4e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 faf0 	bl	800711c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	e00c      	b.n	8006b68 <HAL_DAC_Stop_DMA+0x80>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fae2 	bl	800711c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006b66:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8e:	d120      	bne.n	8006bd2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9e:	d118      	bne.n	8006bd2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f043 0201 	orr.w	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bca:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f84b 	bl	8006c68 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be0:	d120      	bne.n	8006c24 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf0:	d118      	bne.n	8006c24 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	f043 0202 	orr.w	r2, r3, #2
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006c0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c1c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f8cf 	bl	8006dc2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	795b      	ldrb	r3, [r3, #5]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_DAC_ConfigChannel+0x18>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e03c      	b.n	8006d0e <HAL_DAC_ConfigChannel+0x92>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb6:	43db      	mvns	r3, r3
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6819      	ldr	r1, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f003 0310 	and.w	r3, r3, #16
 8006cf0:	22c0      	movs	r2, #192	; 0xc0
 8006cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf6:	43da      	mvns	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	400a      	ands	r2, r1
 8006cfe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2201      	movs	r2, #1
 8006d04:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d26:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7ff ff7f 	bl	8006c2c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	711a      	strb	r2, [r3, #4]
}
 8006d34:	bf00      	nop
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7ff ff78 	bl	8006c40 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f043 0204 	orr.w	r2, r3, #4
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff ff6e 	bl	8006c54 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	711a      	strb	r2, [r3, #4]
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff ffce 	bl	8006d86 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2201      	movs	r2, #1
 8006dee:	711a      	strb	r2, [r3, #4]
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff ffc7 	bl	8006d9a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f043 0204 	orr.w	r2, r3, #4
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff ffbd 	bl	8006dae <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	711a      	strb	r2, [r3, #4]
}
 8006e3a:	bf00      	nop
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006e50:	f7ff f850 	bl	8005ef4 <HAL_GetTick>
 8006e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e099      	b.n	8006f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0201 	bic.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e80:	e00f      	b.n	8006ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e82:	f7ff f837 	bl	8005ef4 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b05      	cmp	r3, #5
 8006e8e:	d908      	bls.n	8006ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2203      	movs	r2, #3
 8006e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e078      	b.n	8006f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e8      	bne.n	8006e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	4b38      	ldr	r3, [pc, #224]	; (8006f9c <HAL_DMA_Init+0x158>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d107      	bne.n	8006f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	4313      	orrs	r3, r2
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0307 	bic.w	r3, r3, #7
 8006f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d117      	bne.n	8006f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00e      	beq.n	8006f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fb45 	bl	80075d8 <DMA_CheckFifoParam>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d008      	beq.n	8006f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2240      	movs	r2, #64	; 0x40
 8006f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006f62:	2301      	movs	r3, #1
 8006f64:	e016      	b.n	8006f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fafc 	bl	800756c <DMA_CalcBaseAndBitshift>
 8006f74:	4603      	mov	r3, r0
 8006f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7c:	223f      	movs	r2, #63	; 0x3f
 8006f7e:	409a      	lsls	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	f010803f 	.word	0xf010803f

08006fa0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e050      	b.n	8007054 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d101      	bne.n	8006fc2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e048      	b.n	8007054 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0201 	bic.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2221      	movs	r2, #33	; 0x21
 8007000:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fab2 	bl	800756c <DMA_CalcBaseAndBitshift>
 8007008:	4603      	mov	r3, r0
 800700a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007010:	223f      	movs	r2, #63	; 0x3f
 8007012:	409a      	lsls	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007072:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_DMA_Start_IT+0x26>
 800707e:	2302      	movs	r3, #2
 8007080:	e048      	b.n	8007114 <HAL_DMA_Start_IT+0xb8>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b01      	cmp	r3, #1
 8007094:	d137      	bne.n	8007106 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2202      	movs	r2, #2
 800709a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fa30 	bl	8007510 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b4:	223f      	movs	r2, #63	; 0x3f
 80070b6:	409a      	lsls	r2, r3
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0216 	orr.w	r2, r2, #22
 80070ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695a      	ldr	r2, [r3, #20]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0208 	orr.w	r2, r2, #8
 80070f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0201 	orr.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	e005      	b.n	8007112 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800710e:	2302      	movs	r3, #2
 8007110:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007112:	7dfb      	ldrb	r3, [r7, #23]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007128:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800712a:	f7fe fee3 	bl	8005ef4 <HAL_GetTick>
 800712e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d008      	beq.n	800714e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2280      	movs	r2, #128	; 0x80
 8007140:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e052      	b.n	80071f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0216 	bic.w	r2, r2, #22
 800715c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	695a      	ldr	r2, [r3, #20]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800716c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d103      	bne.n	800717e <HAL_DMA_Abort+0x62>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717a:	2b00      	cmp	r3, #0
 800717c:	d007      	beq.n	800718e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0208 	bic.w	r2, r2, #8
 800718c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 0201 	bic.w	r2, r2, #1
 800719c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800719e:	e013      	b.n	80071c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071a0:	f7fe fea8 	bl	8005ef4 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	d90c      	bls.n	80071c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2203      	movs	r2, #3
 80071b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e015      	b.n	80071f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e4      	bne.n	80071a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071da:	223f      	movs	r2, #63	; 0x3f
 80071dc:	409a      	lsls	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007208:	4b8e      	ldr	r3, [pc, #568]	; (8007444 <HAL_DMA_IRQHandler+0x248>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a8e      	ldr	r2, [pc, #568]	; (8007448 <HAL_DMA_IRQHandler+0x24c>)
 800720e:	fba2 2303 	umull	r2, r3, r2, r3
 8007212:	0a9b      	lsrs	r3, r3, #10
 8007214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007226:	2208      	movs	r2, #8
 8007228:	409a      	lsls	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4013      	ands	r3, r2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01a      	beq.n	8007268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d013      	beq.n	8007268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0204 	bic.w	r2, r2, #4
 800724e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007254:	2208      	movs	r2, #8
 8007256:	409a      	lsls	r2, r3
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007260:	f043 0201 	orr.w	r2, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726c:	2201      	movs	r2, #1
 800726e:	409a      	lsls	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4013      	ands	r3, r2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d012      	beq.n	800729e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728a:	2201      	movs	r2, #1
 800728c:	409a      	lsls	r2, r3
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007296:	f043 0202 	orr.w	r2, r3, #2
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a2:	2204      	movs	r2, #4
 80072a4:	409a      	lsls	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4013      	ands	r3, r2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d012      	beq.n	80072d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00b      	beq.n	80072d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c0:	2204      	movs	r2, #4
 80072c2:	409a      	lsls	r2, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072cc:	f043 0204 	orr.w	r2, r3, #4
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d8:	2210      	movs	r2, #16
 80072da:	409a      	lsls	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4013      	ands	r3, r2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d043      	beq.n	800736c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d03c      	beq.n	800736c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f6:	2210      	movs	r2, #16
 80072f8:	409a      	lsls	r2, r3
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d018      	beq.n	800733e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d108      	bne.n	800732c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d024      	beq.n	800736c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
 800732a:	e01f      	b.n	800736c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01b      	beq.n	800736c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
 800733c:	e016      	b.n	800736c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007348:	2b00      	cmp	r3, #0
 800734a:	d107      	bne.n	800735c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0208 	bic.w	r2, r2, #8
 800735a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007370:	2220      	movs	r2, #32
 8007372:	409a      	lsls	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 808f 	beq.w	800749c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0310 	and.w	r3, r3, #16
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8087 	beq.w	800749c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007392:	2220      	movs	r2, #32
 8007394:	409a      	lsls	r2, r3
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b05      	cmp	r3, #5
 80073a4:	d136      	bne.n	8007414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0216 	bic.w	r2, r2, #22
 80073b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695a      	ldr	r2, [r3, #20]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d103      	bne.n	80073d6 <HAL_DMA_IRQHandler+0x1da>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d007      	beq.n	80073e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0208 	bic.w	r2, r2, #8
 80073e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ea:	223f      	movs	r2, #63	; 0x3f
 80073ec:	409a      	lsls	r2, r3
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007406:	2b00      	cmp	r3, #0
 8007408:	d07e      	beq.n	8007508 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	4798      	blx	r3
        }
        return;
 8007412:	e079      	b.n	8007508 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01d      	beq.n	800745e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10d      	bne.n	800744c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007434:	2b00      	cmp	r3, #0
 8007436:	d031      	beq.n	800749c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	4798      	blx	r3
 8007440:	e02c      	b.n	800749c <HAL_DMA_IRQHandler+0x2a0>
 8007442:	bf00      	nop
 8007444:	20000048 	.word	0x20000048
 8007448:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d023      	beq.n	800749c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
 800745c:	e01e      	b.n	800749c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10f      	bne.n	800748c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0210 	bic.w	r2, r2, #16
 800747a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d032      	beq.n	800750a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d022      	beq.n	80074f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2205      	movs	r2, #5
 80074b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0201 	bic.w	r2, r2, #1
 80074c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	3301      	adds	r3, #1
 80074cc:	60bb      	str	r3, [r7, #8]
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d307      	bcc.n	80074e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f2      	bne.n	80074c8 <HAL_DMA_IRQHandler+0x2cc>
 80074e2:	e000      	b.n	80074e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80074e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3
 8007506:	e000      	b.n	800750a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007508:	bf00      	nop
    }
  }
}
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800752c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	2b40      	cmp	r3, #64	; 0x40
 800753c:	d108      	bne.n	8007550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800754e:	e007      	b.n	8007560 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	60da      	str	r2, [r3, #12]
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	3b10      	subs	r3, #16
 800757c:	4a13      	ldr	r2, [pc, #76]	; (80075cc <DMA_CalcBaseAndBitshift+0x60>)
 800757e:	fba2 2303 	umull	r2, r3, r2, r3
 8007582:	091b      	lsrs	r3, r3, #4
 8007584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007586:	4a12      	ldr	r2, [pc, #72]	; (80075d0 <DMA_CalcBaseAndBitshift+0x64>)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b03      	cmp	r3, #3
 8007598:	d908      	bls.n	80075ac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <DMA_CalcBaseAndBitshift+0x68>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	1d1a      	adds	r2, r3, #4
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	659a      	str	r2, [r3, #88]	; 0x58
 80075aa:	e006      	b.n	80075ba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	461a      	mov	r2, r3
 80075b2:	4b08      	ldr	r3, [pc, #32]	; (80075d4 <DMA_CalcBaseAndBitshift+0x68>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	aaaaaaab 	.word	0xaaaaaaab
 80075d0:	080128b4 	.word	0x080128b4
 80075d4:	fffffc00 	.word	0xfffffc00

080075d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d11f      	bne.n	8007632 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d856      	bhi.n	80076a6 <DMA_CheckFifoParam+0xce>
 80075f8:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <DMA_CheckFifoParam+0x28>)
 80075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fe:	bf00      	nop
 8007600:	08007611 	.word	0x08007611
 8007604:	08007623 	.word	0x08007623
 8007608:	08007611 	.word	0x08007611
 800760c:	080076a7 	.word	0x080076a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d046      	beq.n	80076aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007620:	e043      	b.n	80076aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800762a:	d140      	bne.n	80076ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007630:	e03d      	b.n	80076ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800763a:	d121      	bne.n	8007680 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b03      	cmp	r3, #3
 8007640:	d837      	bhi.n	80076b2 <DMA_CheckFifoParam+0xda>
 8007642:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <DMA_CheckFifoParam+0x70>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	08007659 	.word	0x08007659
 800764c:	0800765f 	.word	0x0800765f
 8007650:	08007659 	.word	0x08007659
 8007654:	08007671 	.word	0x08007671
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
      break;
 800765c:	e030      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d025      	beq.n	80076b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800766e:	e022      	b.n	80076b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007678:	d11f      	bne.n	80076ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800767e:	e01c      	b.n	80076ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b02      	cmp	r3, #2
 8007684:	d903      	bls.n	800768e <DMA_CheckFifoParam+0xb6>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b03      	cmp	r3, #3
 800768a:	d003      	beq.n	8007694 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800768c:	e018      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	73fb      	strb	r3, [r7, #15]
      break;
 8007692:	e015      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00e      	beq.n	80076be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]
      break;
 80076a4:	e00b      	b.n	80076be <DMA_CheckFifoParam+0xe6>
      break;
 80076a6:	bf00      	nop
 80076a8:	e00a      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
      break;
 80076aa:	bf00      	nop
 80076ac:	e008      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
      break;
 80076ae:	bf00      	nop
 80076b0:	e006      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
      break;
 80076b2:	bf00      	nop
 80076b4:	e004      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
      break;
 80076b6:	bf00      	nop
 80076b8:	e002      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <DMA_CheckFifoParam+0xe8>
      break;
 80076be:	bf00      	nop
    }
  } 
  
  return status; 
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop

080076d0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e039      	b.n	8007756 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7f9 fe18 	bl	800132c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007720:	f023 0107 	bic.w	r1, r3, #7
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007736:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <HAL_DMA2D_Init+0x90>)
 8007738:	4013      	ands	r3, r2
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	68d1      	ldr	r1, [r2, #12]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	430b      	orrs	r3, r1
 8007744:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	ffffc000 	.word	0xffffc000

08007764 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af02      	add	r7, sp, #8
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_DMA2D_Start+0x1c>
 800777c:	2302      	movs	r3, #2
 800777e:	e018      	b.n	80077b2 <HAL_DMA2D_Start+0x4e>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	68b9      	ldr	r1, [r7, #8]
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fa98 	bl	8007cd0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0201 	orr.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b086      	sub	sp, #24
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d056      	beq.n	8007884 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80077d6:	f7fe fb8d 	bl	8005ef4 <HAL_GetTick>
 80077da:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80077dc:	e04b      	b.n	8007876 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d023      	beq.n	8007838 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d005      	beq.n	8007806 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fe:	f043 0202 	orr.w	r2, r3, #2
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007814:	f043 0201 	orr.w	r2, r3, #1
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2221      	movs	r2, #33	; 0x21
 8007822:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2204      	movs	r2, #4
 8007828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e0a5      	b.n	8007984 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800783e:	d01a      	beq.n	8007876 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007840:	f7fe fb58 	bl	8005ef4 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	429a      	cmp	r2, r3
 800784e:	d302      	bcc.n	8007856 <HAL_DMA2D_PollForTransfer+0x9c>
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10f      	bne.n	8007876 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785a:	f043 0220 	orr.w	r2, r3, #32
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2203      	movs	r2, #3
 8007866:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e086      	b.n	8007984 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0ac      	beq.n	80077de <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f003 0320 	and.w	r3, r3, #32
 800788e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	4313      	orrs	r3, r2
 800789e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d061      	beq.n	800796a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80078a6:	f7fe fb25 	bl	8005ef4 <HAL_GetTick>
 80078aa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80078ac:	e056      	b.n	800795c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d02e      	beq.n	800791e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d005      	beq.n	80078d6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ce:	f043 0204 	orr.w	r2, r3, #4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d005      	beq.n	80078ec <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e4:	f043 0202 	orr.w	r2, r3, #2
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fa:	f043 0201 	orr.w	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2229      	movs	r2, #41	; 0x29
 8007908:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2204      	movs	r2, #4
 800790e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e032      	b.n	8007984 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007924:	d01a      	beq.n	800795c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007926:	f7fe fae5 	bl	8005ef4 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d302      	bcc.n	800793c <HAL_DMA2D_PollForTransfer+0x182>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10f      	bne.n	800795c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007940:	f043 0220 	orr.w	r2, r3, #32
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2203      	movs	r2, #3
 800794c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e013      	b.n	8007984 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f003 0310 	and.w	r3, r3, #16
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0a1      	beq.n	80078ae <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2212      	movs	r2, #18
 8007970:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d026      	beq.n	80079fc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d021      	beq.n	80079fc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079c6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079cc:	f043 0201 	orr.w	r2, r3, #1
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2201      	movs	r2, #1
 80079da:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2204      	movs	r2, #4
 80079e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d026      	beq.n	8007a54 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d021      	beq.n	8007a54 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a1e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2220      	movs	r2, #32
 8007a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2c:	f043 0202 	orr.w	r2, r3, #2
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2204      	movs	r2, #4
 8007a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f003 0308 	and.w	r3, r3, #8
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d026      	beq.n	8007aac <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d021      	beq.n	8007aac <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a76:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a84:	f043 0204 	orr.w	r2, r3, #4
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2204      	movs	r2, #4
 8007a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f003 0304 	and.w	r3, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d013      	beq.n	8007ade <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00e      	beq.n	8007ade <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ace:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2204      	movs	r2, #4
 8007ad6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f853 	bl	8007b84 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d024      	beq.n	8007b32 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01f      	beq.n	8007b32 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b00:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2202      	movs	r2, #2
 8007b08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f003 0310 	and.w	r3, r3, #16
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01f      	beq.n	8007b7c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d01a      	beq.n	8007b7c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b54:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f80e 	bl	8007b98 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_DMA2D_ConfigLayer+0x20>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e079      	b.n	8007cc0 <HAL_DMA2D_ConfigLayer+0x114>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	3318      	adds	r3, #24
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	4413      	add	r3, r2
 8007be6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	041b      	lsls	r3, r3, #16
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007bf6:	4b35      	ldr	r3, [pc, #212]	; (8007ccc <HAL_DMA2D_ConfigLayer+0x120>)
 8007bf8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	2b0a      	cmp	r3, #10
 8007c00:	d003      	beq.n	8007c0a <HAL_DMA2D_ConfigLayer+0x5e>
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b09      	cmp	r3, #9
 8007c08:	d107      	bne.n	8007c1a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	e005      	b.n	8007c26 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	061b      	lsls	r3, r3, #24
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d120      	bne.n	8007c6e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	43db      	mvns	r3, r3
 8007c36:	ea02 0103 	and.w	r1, r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	6812      	ldr	r2, [r2, #0]
 8007c4c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2b0a      	cmp	r3, #10
 8007c54:	d003      	beq.n	8007c5e <HAL_DMA2D_ConfigLayer+0xb2>
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b09      	cmp	r3, #9
 8007c5c:	d127      	bne.n	8007cae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8007c6c:	e01f      	b.n	8007cae <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69da      	ldr	r2, [r3, #28]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	43db      	mvns	r3, r3
 8007c78:	ea02 0103 	and.w	r1, r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b0a      	cmp	r3, #10
 8007c96:	d003      	beq.n	8007ca0 <HAL_DMA2D_ConfigLayer+0xf4>
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b09      	cmp	r3, #9
 8007c9e:	d106      	bne.n	8007cae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007cac:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	371c      	adds	r7, #28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	ff03000f 	.word	0xff03000f

08007cd0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b08b      	sub	sp, #44	; 0x2c
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	041a      	lsls	r2, r3, #16
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d08:	d174      	bne.n	8007df4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d10:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d18:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d20:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d108      	bne.n	8007d42 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	431a      	orrs	r2, r3
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d40:	e053      	b.n	8007dea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d106      	bne.n	8007d58 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	627b      	str	r3, [r7, #36]	; 0x24
 8007d56:	e048      	b.n	8007dea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d111      	bne.n	8007d84 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	0cdb      	lsrs	r3, r3, #19
 8007d64:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	0a9b      	lsrs	r3, r3, #10
 8007d6a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	08db      	lsrs	r3, r3, #3
 8007d70:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	02db      	lsls	r3, r3, #11
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	627b      	str	r3, [r7, #36]	; 0x24
 8007d82:	e032      	b.n	8007dea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d117      	bne.n	8007dbc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	0fdb      	lsrs	r3, r3, #31
 8007d90:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	0cdb      	lsrs	r3, r3, #19
 8007d96:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	0adb      	lsrs	r3, r3, #11
 8007d9c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	08db      	lsrs	r3, r3, #3
 8007da2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	029b      	lsls	r3, r3, #10
 8007dac:	431a      	orrs	r2, r3
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	03db      	lsls	r3, r3, #15
 8007db2:	4313      	orrs	r3, r2
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
 8007dba:	e016      	b.n	8007dea <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	0f1b      	lsrs	r3, r3, #28
 8007dc0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	0d1b      	lsrs	r3, r3, #20
 8007dc6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	0b1b      	lsrs	r3, r3, #12
 8007dcc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	091b      	lsrs	r3, r3, #4
 8007dd2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	011a      	lsls	r2, r3, #4
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	031b      	lsls	r3, r3, #12
 8007de2:	4313      	orrs	r3, r2
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007df2:	e003      	b.n	8007dfc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	60da      	str	r2, [r3, #12]
}
 8007dfc:	bf00      	nop
 8007dfe:	372c      	adds	r7, #44	; 0x2c
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b089      	sub	sp, #36	; 0x24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007e16:	2300      	movs	r3, #0
 8007e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e22:	2300      	movs	r3, #0
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	e175      	b.n	8008114 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007e28:	2201      	movs	r2, #1
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	f040 8164 	bne.w	800810e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d005      	beq.n	8007e5e <HAL_GPIO_Init+0x56>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d130      	bne.n	8007ec0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	2203      	movs	r2, #3
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	4013      	ands	r3, r2
 8007e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e94:	2201      	movs	r2, #1
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	091b      	lsrs	r3, r3, #4
 8007eaa:	f003 0201 	and.w	r2, r3, #1
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d017      	beq.n	8007efc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	43db      	mvns	r3, r3
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d123      	bne.n	8007f50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	08da      	lsrs	r2, r3, #3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3208      	adds	r2, #8
 8007f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	220f      	movs	r2, #15
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	43db      	mvns	r3, r3
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	08da      	lsrs	r2, r3, #3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3208      	adds	r2, #8
 8007f4a:	69b9      	ldr	r1, [r7, #24]
 8007f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	43db      	mvns	r3, r3
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	4013      	ands	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f003 0203 	and.w	r2, r3, #3
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	fa02 f303 	lsl.w	r3, r2, r3
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 80be 	beq.w	800810e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f92:	4b66      	ldr	r3, [pc, #408]	; (800812c <HAL_GPIO_Init+0x324>)
 8007f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f96:	4a65      	ldr	r2, [pc, #404]	; (800812c <HAL_GPIO_Init+0x324>)
 8007f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f9e:	4b63      	ldr	r3, [pc, #396]	; (800812c <HAL_GPIO_Init+0x324>)
 8007fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007faa:	4a61      	ldr	r2, [pc, #388]	; (8008130 <HAL_GPIO_Init+0x328>)
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	089b      	lsrs	r3, r3, #2
 8007fb0:	3302      	adds	r3, #2
 8007fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	220f      	movs	r2, #15
 8007fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc6:	43db      	mvns	r3, r3
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a58      	ldr	r2, [pc, #352]	; (8008134 <HAL_GPIO_Init+0x32c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d037      	beq.n	8008046 <HAL_GPIO_Init+0x23e>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a57      	ldr	r2, [pc, #348]	; (8008138 <HAL_GPIO_Init+0x330>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d031      	beq.n	8008042 <HAL_GPIO_Init+0x23a>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a56      	ldr	r2, [pc, #344]	; (800813c <HAL_GPIO_Init+0x334>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d02b      	beq.n	800803e <HAL_GPIO_Init+0x236>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a55      	ldr	r2, [pc, #340]	; (8008140 <HAL_GPIO_Init+0x338>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d025      	beq.n	800803a <HAL_GPIO_Init+0x232>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a54      	ldr	r2, [pc, #336]	; (8008144 <HAL_GPIO_Init+0x33c>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d01f      	beq.n	8008036 <HAL_GPIO_Init+0x22e>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a53      	ldr	r2, [pc, #332]	; (8008148 <HAL_GPIO_Init+0x340>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d019      	beq.n	8008032 <HAL_GPIO_Init+0x22a>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a52      	ldr	r2, [pc, #328]	; (800814c <HAL_GPIO_Init+0x344>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d013      	beq.n	800802e <HAL_GPIO_Init+0x226>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a51      	ldr	r2, [pc, #324]	; (8008150 <HAL_GPIO_Init+0x348>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00d      	beq.n	800802a <HAL_GPIO_Init+0x222>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a50      	ldr	r2, [pc, #320]	; (8008154 <HAL_GPIO_Init+0x34c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d007      	beq.n	8008026 <HAL_GPIO_Init+0x21e>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a4f      	ldr	r2, [pc, #316]	; (8008158 <HAL_GPIO_Init+0x350>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d101      	bne.n	8008022 <HAL_GPIO_Init+0x21a>
 800801e:	2309      	movs	r3, #9
 8008020:	e012      	b.n	8008048 <HAL_GPIO_Init+0x240>
 8008022:	230a      	movs	r3, #10
 8008024:	e010      	b.n	8008048 <HAL_GPIO_Init+0x240>
 8008026:	2308      	movs	r3, #8
 8008028:	e00e      	b.n	8008048 <HAL_GPIO_Init+0x240>
 800802a:	2307      	movs	r3, #7
 800802c:	e00c      	b.n	8008048 <HAL_GPIO_Init+0x240>
 800802e:	2306      	movs	r3, #6
 8008030:	e00a      	b.n	8008048 <HAL_GPIO_Init+0x240>
 8008032:	2305      	movs	r3, #5
 8008034:	e008      	b.n	8008048 <HAL_GPIO_Init+0x240>
 8008036:	2304      	movs	r3, #4
 8008038:	e006      	b.n	8008048 <HAL_GPIO_Init+0x240>
 800803a:	2303      	movs	r3, #3
 800803c:	e004      	b.n	8008048 <HAL_GPIO_Init+0x240>
 800803e:	2302      	movs	r3, #2
 8008040:	e002      	b.n	8008048 <HAL_GPIO_Init+0x240>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <HAL_GPIO_Init+0x240>
 8008046:	2300      	movs	r3, #0
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	f002 0203 	and.w	r2, r2, #3
 800804e:	0092      	lsls	r2, r2, #2
 8008050:	4093      	lsls	r3, r2
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	4313      	orrs	r3, r2
 8008056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008058:	4935      	ldr	r1, [pc, #212]	; (8008130 <HAL_GPIO_Init+0x328>)
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	089b      	lsrs	r3, r3, #2
 800805e:	3302      	adds	r3, #2
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008066:	4b3d      	ldr	r3, [pc, #244]	; (800815c <HAL_GPIO_Init+0x354>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	43db      	mvns	r3, r3
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	4013      	ands	r3, r2
 8008074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800808a:	4a34      	ldr	r2, [pc, #208]	; (800815c <HAL_GPIO_Init+0x354>)
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008090:	4b32      	ldr	r3, [pc, #200]	; (800815c <HAL_GPIO_Init+0x354>)
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	43db      	mvns	r3, r3
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	4013      	ands	r3, r2
 800809e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080b4:	4a29      	ldr	r2, [pc, #164]	; (800815c <HAL_GPIO_Init+0x354>)
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080ba:	4b28      	ldr	r3, [pc, #160]	; (800815c <HAL_GPIO_Init+0x354>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	43db      	mvns	r3, r3
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	4013      	ands	r3, r2
 80080c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	4313      	orrs	r3, r2
 80080dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080de:	4a1f      	ldr	r2, [pc, #124]	; (800815c <HAL_GPIO_Init+0x354>)
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080e4:	4b1d      	ldr	r3, [pc, #116]	; (800815c <HAL_GPIO_Init+0x354>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	43db      	mvns	r3, r3
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	4013      	ands	r3, r2
 80080f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008108:	4a14      	ldr	r2, [pc, #80]	; (800815c <HAL_GPIO_Init+0x354>)
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	3301      	adds	r3, #1
 8008112:	61fb      	str	r3, [r7, #28]
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	2b0f      	cmp	r3, #15
 8008118:	f67f ae86 	bls.w	8007e28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	3724      	adds	r7, #36	; 0x24
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40023800 	.word	0x40023800
 8008130:	40013800 	.word	0x40013800
 8008134:	40020000 	.word	0x40020000
 8008138:	40020400 	.word	0x40020400
 800813c:	40020800 	.word	0x40020800
 8008140:	40020c00 	.word	0x40020c00
 8008144:	40021000 	.word	0x40021000
 8008148:	40021400 	.word	0x40021400
 800814c:	40021800 	.word	0x40021800
 8008150:	40021c00 	.word	0x40021c00
 8008154:	40022000 	.word	0x40022000
 8008158:	40022400 	.word	0x40022400
 800815c:	40013c00 	.word	0x40013c00

08008160 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800816a:	2300      	movs	r3, #0
 800816c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008172:	2300      	movs	r3, #0
 8008174:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008176:	2300      	movs	r3, #0
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	e0d9      	b.n	8008330 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800817c:	2201      	movs	r2, #1
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	fa02 f303 	lsl.w	r3, r2, r3
 8008184:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	4013      	ands	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	429a      	cmp	r2, r3
 8008194:	f040 80c9 	bne.w	800832a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008198:	4a6b      	ldr	r2, [pc, #428]	; (8008348 <HAL_GPIO_DeInit+0x1e8>)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	089b      	lsrs	r3, r3, #2
 800819e:	3302      	adds	r3, #2
 80081a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	220f      	movs	r2, #15
 80081b0:	fa02 f303 	lsl.w	r3, r2, r3
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	4013      	ands	r3, r2
 80081b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a63      	ldr	r2, [pc, #396]	; (800834c <HAL_GPIO_DeInit+0x1ec>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d037      	beq.n	8008232 <HAL_GPIO_DeInit+0xd2>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a62      	ldr	r2, [pc, #392]	; (8008350 <HAL_GPIO_DeInit+0x1f0>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d031      	beq.n	800822e <HAL_GPIO_DeInit+0xce>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a61      	ldr	r2, [pc, #388]	; (8008354 <HAL_GPIO_DeInit+0x1f4>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d02b      	beq.n	800822a <HAL_GPIO_DeInit+0xca>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a60      	ldr	r2, [pc, #384]	; (8008358 <HAL_GPIO_DeInit+0x1f8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d025      	beq.n	8008226 <HAL_GPIO_DeInit+0xc6>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a5f      	ldr	r2, [pc, #380]	; (800835c <HAL_GPIO_DeInit+0x1fc>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d01f      	beq.n	8008222 <HAL_GPIO_DeInit+0xc2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a5e      	ldr	r2, [pc, #376]	; (8008360 <HAL_GPIO_DeInit+0x200>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d019      	beq.n	800821e <HAL_GPIO_DeInit+0xbe>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a5d      	ldr	r2, [pc, #372]	; (8008364 <HAL_GPIO_DeInit+0x204>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d013      	beq.n	800821a <HAL_GPIO_DeInit+0xba>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a5c      	ldr	r2, [pc, #368]	; (8008368 <HAL_GPIO_DeInit+0x208>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d00d      	beq.n	8008216 <HAL_GPIO_DeInit+0xb6>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a5b      	ldr	r2, [pc, #364]	; (800836c <HAL_GPIO_DeInit+0x20c>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d007      	beq.n	8008212 <HAL_GPIO_DeInit+0xb2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a5a      	ldr	r2, [pc, #360]	; (8008370 <HAL_GPIO_DeInit+0x210>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d101      	bne.n	800820e <HAL_GPIO_DeInit+0xae>
 800820a:	2309      	movs	r3, #9
 800820c:	e012      	b.n	8008234 <HAL_GPIO_DeInit+0xd4>
 800820e:	230a      	movs	r3, #10
 8008210:	e010      	b.n	8008234 <HAL_GPIO_DeInit+0xd4>
 8008212:	2308      	movs	r3, #8
 8008214:	e00e      	b.n	8008234 <HAL_GPIO_DeInit+0xd4>
 8008216:	2307      	movs	r3, #7
 8008218:	e00c      	b.n	8008234 <HAL_GPIO_DeInit+0xd4>
 800821a:	2306      	movs	r3, #6
 800821c:	e00a      	b.n	8008234 <HAL_GPIO_DeInit+0xd4>
 800821e:	2305      	movs	r3, #5
 8008220:	e008      	b.n	8008234 <HAL_GPIO_DeInit+0xd4>
 8008222:	2304      	movs	r3, #4
 8008224:	e006      	b.n	8008234 <HAL_GPIO_DeInit+0xd4>
 8008226:	2303      	movs	r3, #3
 8008228:	e004      	b.n	8008234 <HAL_GPIO_DeInit+0xd4>
 800822a:	2302      	movs	r3, #2
 800822c:	e002      	b.n	8008234 <HAL_GPIO_DeInit+0xd4>
 800822e:	2301      	movs	r3, #1
 8008230:	e000      	b.n	8008234 <HAL_GPIO_DeInit+0xd4>
 8008232:	2300      	movs	r3, #0
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	f002 0203 	and.w	r2, r2, #3
 800823a:	0092      	lsls	r2, r2, #2
 800823c:	4093      	lsls	r3, r2
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	429a      	cmp	r2, r3
 8008242:	d132      	bne.n	80082aa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008244:	4b4b      	ldr	r3, [pc, #300]	; (8008374 <HAL_GPIO_DeInit+0x214>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	43db      	mvns	r3, r3
 800824c:	4949      	ldr	r1, [pc, #292]	; (8008374 <HAL_GPIO_DeInit+0x214>)
 800824e:	4013      	ands	r3, r2
 8008250:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008252:	4b48      	ldr	r3, [pc, #288]	; (8008374 <HAL_GPIO_DeInit+0x214>)
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	43db      	mvns	r3, r3
 800825a:	4946      	ldr	r1, [pc, #280]	; (8008374 <HAL_GPIO_DeInit+0x214>)
 800825c:	4013      	ands	r3, r2
 800825e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008260:	4b44      	ldr	r3, [pc, #272]	; (8008374 <HAL_GPIO_DeInit+0x214>)
 8008262:	68da      	ldr	r2, [r3, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	43db      	mvns	r3, r3
 8008268:	4942      	ldr	r1, [pc, #264]	; (8008374 <HAL_GPIO_DeInit+0x214>)
 800826a:	4013      	ands	r3, r2
 800826c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800826e:	4b41      	ldr	r3, [pc, #260]	; (8008374 <HAL_GPIO_DeInit+0x214>)
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	43db      	mvns	r3, r3
 8008276:	493f      	ldr	r1, [pc, #252]	; (8008374 <HAL_GPIO_DeInit+0x214>)
 8008278:	4013      	ands	r3, r2
 800827a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	220f      	movs	r2, #15
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800828c:	4a2e      	ldr	r2, [pc, #184]	; (8008348 <HAL_GPIO_DeInit+0x1e8>)
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	089b      	lsrs	r3, r3, #2
 8008292:	3302      	adds	r3, #2
 8008294:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	43da      	mvns	r2, r3
 800829c:	482a      	ldr	r0, [pc, #168]	; (8008348 <HAL_GPIO_DeInit+0x1e8>)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	089b      	lsrs	r3, r3, #2
 80082a2:	400a      	ands	r2, r1
 80082a4:	3302      	adds	r3, #2
 80082a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	2103      	movs	r1, #3
 80082b4:	fa01 f303 	lsl.w	r3, r1, r3
 80082b8:	43db      	mvns	r3, r3
 80082ba:	401a      	ands	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	08da      	lsrs	r2, r3, #3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3208      	adds	r2, #8
 80082c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f003 0307 	and.w	r3, r3, #7
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	220f      	movs	r2, #15
 80082d6:	fa02 f303 	lsl.w	r3, r2, r3
 80082da:	43db      	mvns	r3, r3
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	08d2      	lsrs	r2, r2, #3
 80082e0:	4019      	ands	r1, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3208      	adds	r2, #8
 80082e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	2103      	movs	r1, #3
 80082f4:	fa01 f303 	lsl.w	r3, r1, r3
 80082f8:	43db      	mvns	r3, r3
 80082fa:	401a      	ands	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	2101      	movs	r1, #1
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	fa01 f303 	lsl.w	r3, r1, r3
 800830c:	43db      	mvns	r3, r3
 800830e:	401a      	ands	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	2103      	movs	r1, #3
 800831e:	fa01 f303 	lsl.w	r3, r1, r3
 8008322:	43db      	mvns	r3, r3
 8008324:	401a      	ands	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	3301      	adds	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b0f      	cmp	r3, #15
 8008334:	f67f af22 	bls.w	800817c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	40013800 	.word	0x40013800
 800834c:	40020000 	.word	0x40020000
 8008350:	40020400 	.word	0x40020400
 8008354:	40020800 	.word	0x40020800
 8008358:	40020c00 	.word	0x40020c00
 800835c:	40021000 	.word	0x40021000
 8008360:	40021400 	.word	0x40021400
 8008364:	40021800 	.word	0x40021800
 8008368:	40021c00 	.word	0x40021c00
 800836c:	40022000 	.word	0x40022000
 8008370:	40022400 	.word	0x40022400
 8008374:	40013c00 	.word	0x40013c00

08008378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	807b      	strh	r3, [r7, #2]
 8008384:	4613      	mov	r3, r2
 8008386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008388:	787b      	ldrb	r3, [r7, #1]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800838e:	887a      	ldrh	r2, [r7, #2]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008394:	e003      	b.n	800839e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008396:	887b      	ldrh	r3, [r7, #2]
 8008398:	041a      	lsls	r2, r3, #16
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	619a      	str	r2, [r3, #24]
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	460b      	mov	r3, r1
 80083b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80083bc:	887a      	ldrh	r2, [r7, #2]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4013      	ands	r3, r2
 80083c2:	041a      	lsls	r2, r3, #16
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	43d9      	mvns	r1, r3
 80083c8:	887b      	ldrh	r3, [r7, #2]
 80083ca:	400b      	ands	r3, r1
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	619a      	str	r2, [r3, #24]
}
 80083d2:	bf00      	nop
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
	...

080083e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e07f      	b.n	80084f2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d106      	bne.n	800840c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fa ff84 	bl	8003314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2224      	movs	r2, #36	; 0x24
 8008410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0201 	bic.w	r2, r2, #1
 8008422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689a      	ldr	r2, [r3, #8]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d107      	bne.n	800845a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689a      	ldr	r2, [r3, #8]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008456:	609a      	str	r2, [r3, #8]
 8008458:	e006      	b.n	8008468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689a      	ldr	r2, [r3, #8]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	2b02      	cmp	r3, #2
 800846e:	d104      	bne.n	800847a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6859      	ldr	r1, [r3, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	4b1d      	ldr	r3, [pc, #116]	; (80084fc <HAL_I2C_Init+0x11c>)
 8008486:	430b      	orrs	r3, r1
 8008488:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008498:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691a      	ldr	r2, [r3, #16]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	430a      	orrs	r2, r1
 80084b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	69d9      	ldr	r1, [r3, #28]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a1a      	ldr	r2, [r3, #32]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f042 0201 	orr.w	r2, r2, #1
 80084d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	02008000 	.word	0x02008000

08008500 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e021      	b.n	8008556 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2224      	movs	r2, #36	; 0x24
 8008516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 0201 	bic.w	r2, r2, #1
 8008528:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7fa ff9a 	bl	8003464 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af02      	add	r7, sp, #8
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	4608      	mov	r0, r1
 800856a:	4611      	mov	r1, r2
 800856c:	461a      	mov	r2, r3
 800856e:	4603      	mov	r3, r0
 8008570:	817b      	strh	r3, [r7, #10]
 8008572:	460b      	mov	r3, r1
 8008574:	813b      	strh	r3, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b20      	cmp	r3, #32
 8008584:	f040 80f9 	bne.w	800877a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <HAL_I2C_Mem_Write+0x34>
 800858e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800859a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e0ed      	b.n	800877c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <HAL_I2C_Mem_Write+0x4e>
 80085aa:	2302      	movs	r3, #2
 80085ac:	e0e6      	b.n	800877c <HAL_I2C_Mem_Write+0x21c>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085b6:	f7fd fc9d 	bl	8005ef4 <HAL_GetTick>
 80085ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	2319      	movs	r3, #25
 80085c2:	2201      	movs	r2, #1
 80085c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 fad1 	bl	8008b70 <I2C_WaitOnFlagUntilTimeout>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e0d1      	b.n	800877c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2221      	movs	r2, #33	; 0x21
 80085dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2240      	movs	r2, #64	; 0x40
 80085e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6a3a      	ldr	r2, [r7, #32]
 80085f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008600:	88f8      	ldrh	r0, [r7, #6]
 8008602:	893a      	ldrh	r2, [r7, #8]
 8008604:	8979      	ldrh	r1, [r7, #10]
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	4603      	mov	r3, r0
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 f9e1 	bl	80089d8 <I2C_RequestMemoryWrite>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e0a9      	b.n	800877c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800862c:	b29b      	uxth	r3, r3
 800862e:	2bff      	cmp	r3, #255	; 0xff
 8008630:	d90e      	bls.n	8008650 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	22ff      	movs	r2, #255	; 0xff
 8008636:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863c:	b2da      	uxtb	r2, r3
 800863e:	8979      	ldrh	r1, [r7, #10]
 8008640:	2300      	movs	r3, #0
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 fc2d 	bl	8008ea8 <I2C_TransferConfig>
 800864e:	e00f      	b.n	8008670 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008654:	b29a      	uxth	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800865e:	b2da      	uxtb	r2, r3
 8008660:	8979      	ldrh	r1, [r7, #10]
 8008662:	2300      	movs	r3, #0
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 fc1c 	bl	8008ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 fabb 	bl	8008bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e07b      	b.n	800877c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	781a      	ldrb	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800869e:	b29b      	uxth	r3, r3
 80086a0:	3b01      	subs	r3, #1
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d034      	beq.n	8008728 <HAL_I2C_Mem_Write+0x1c8>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d130      	bne.n	8008728 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	2200      	movs	r2, #0
 80086ce:	2180      	movs	r1, #128	; 0x80
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fa4d 	bl	8008b70 <I2C_WaitOnFlagUntilTimeout>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e04d      	b.n	800877c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	2bff      	cmp	r3, #255	; 0xff
 80086e8:	d90e      	bls.n	8008708 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	22ff      	movs	r2, #255	; 0xff
 80086ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	8979      	ldrh	r1, [r7, #10]
 80086f8:	2300      	movs	r3, #0
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 fbd1 	bl	8008ea8 <I2C_TransferConfig>
 8008706:	e00f      	b.n	8008728 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870c:	b29a      	uxth	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008716:	b2da      	uxtb	r2, r3
 8008718:	8979      	ldrh	r1, [r7, #10]
 800871a:	2300      	movs	r3, #0
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 fbc0 	bl	8008ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800872c:	b29b      	uxth	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d19e      	bne.n	8008670 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 fa9a 	bl	8008c70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e01a      	b.n	800877c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2220      	movs	r2, #32
 800874c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6859      	ldr	r1, [r3, #4]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <HAL_I2C_Mem_Write+0x224>)
 800875a:	400b      	ands	r3, r1
 800875c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2220      	movs	r2, #32
 8008762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	e000      	b.n	800877c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800877a:	2302      	movs	r3, #2
  }
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	fe00e800 	.word	0xfe00e800

08008788 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af02      	add	r7, sp, #8
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	4608      	mov	r0, r1
 8008792:	4611      	mov	r1, r2
 8008794:	461a      	mov	r2, r3
 8008796:	4603      	mov	r3, r0
 8008798:	817b      	strh	r3, [r7, #10]
 800879a:	460b      	mov	r3, r1
 800879c:	813b      	strh	r3, [r7, #8]
 800879e:	4613      	mov	r3, r2
 80087a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b20      	cmp	r3, #32
 80087ac:	f040 80fd 	bne.w	80089aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <HAL_I2C_Mem_Read+0x34>
 80087b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d105      	bne.n	80087c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e0f1      	b.n	80089ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_I2C_Mem_Read+0x4e>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e0ea      	b.n	80089ac <HAL_I2C_Mem_Read+0x224>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80087de:	f7fd fb89 	bl	8005ef4 <HAL_GetTick>
 80087e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	2319      	movs	r3, #25
 80087ea:	2201      	movs	r2, #1
 80087ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 f9bd 	bl	8008b70 <I2C_WaitOnFlagUntilTimeout>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e0d5      	b.n	80089ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2222      	movs	r2, #34	; 0x22
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2240      	movs	r2, #64	; 0x40
 800880c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6a3a      	ldr	r2, [r7, #32]
 800881a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008828:	88f8      	ldrh	r0, [r7, #6]
 800882a:	893a      	ldrh	r2, [r7, #8]
 800882c:	8979      	ldrh	r1, [r7, #10]
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	4603      	mov	r3, r0
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 f921 	bl	8008a80 <I2C_RequestMemoryRead>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e0ad      	b.n	80089ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008854:	b29b      	uxth	r3, r3
 8008856:	2bff      	cmp	r3, #255	; 0xff
 8008858:	d90e      	bls.n	8008878 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	22ff      	movs	r2, #255	; 0xff
 800885e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008864:	b2da      	uxtb	r2, r3
 8008866:	8979      	ldrh	r1, [r7, #10]
 8008868:	4b52      	ldr	r3, [pc, #328]	; (80089b4 <HAL_I2C_Mem_Read+0x22c>)
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 fb19 	bl	8008ea8 <I2C_TransferConfig>
 8008876:	e00f      	b.n	8008898 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008886:	b2da      	uxtb	r2, r3
 8008888:	8979      	ldrh	r1, [r7, #10]
 800888a:	4b4a      	ldr	r3, [pc, #296]	; (80089b4 <HAL_I2C_Mem_Read+0x22c>)
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 fb08 	bl	8008ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	2200      	movs	r2, #0
 80088a0:	2104      	movs	r1, #4
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 f964 	bl	8008b70 <I2C_WaitOnFlagUntilTimeout>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e07c      	b.n	80089ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	b2d2      	uxtb	r2, r2
 80088be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	1c5a      	adds	r2, r3, #1
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ce:	3b01      	subs	r3, #1
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d034      	beq.n	8008958 <HAL_I2C_Mem_Read+0x1d0>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d130      	bne.n	8008958 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	2200      	movs	r2, #0
 80088fe:	2180      	movs	r1, #128	; 0x80
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f935 	bl	8008b70 <I2C_WaitOnFlagUntilTimeout>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e04d      	b.n	80089ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008914:	b29b      	uxth	r3, r3
 8008916:	2bff      	cmp	r3, #255	; 0xff
 8008918:	d90e      	bls.n	8008938 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	22ff      	movs	r2, #255	; 0xff
 800891e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008924:	b2da      	uxtb	r2, r3
 8008926:	8979      	ldrh	r1, [r7, #10]
 8008928:	2300      	movs	r3, #0
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fab9 	bl	8008ea8 <I2C_TransferConfig>
 8008936:	e00f      	b.n	8008958 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800893c:	b29a      	uxth	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008946:	b2da      	uxtb	r2, r3
 8008948:	8979      	ldrh	r1, [r7, #10]
 800894a:	2300      	movs	r3, #0
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 faa8 	bl	8008ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895c:	b29b      	uxth	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d19a      	bne.n	8008898 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 f982 	bl	8008c70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e01a      	b.n	80089ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2220      	movs	r2, #32
 800897c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6859      	ldr	r1, [r3, #4]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <HAL_I2C_Mem_Read+0x230>)
 800898a:	400b      	ands	r3, r1
 800898c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2220      	movs	r2, #32
 8008992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e000      	b.n	80089ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80089aa:	2302      	movs	r3, #2
  }
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	80002400 	.word	0x80002400
 80089b8:	fe00e800 	.word	0xfe00e800

080089bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ca:	b2db      	uxtb	r3, r3
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af02      	add	r7, sp, #8
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	4608      	mov	r0, r1
 80089e2:	4611      	mov	r1, r2
 80089e4:	461a      	mov	r2, r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	817b      	strh	r3, [r7, #10]
 80089ea:	460b      	mov	r3, r1
 80089ec:	813b      	strh	r3, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80089f2:	88fb      	ldrh	r3, [r7, #6]
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	8979      	ldrh	r1, [r7, #10]
 80089f8:	4b20      	ldr	r3, [pc, #128]	; (8008a7c <I2C_RequestMemoryWrite+0xa4>)
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 fa51 	bl	8008ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a06:	69fa      	ldr	r2, [r7, #28]
 8008a08:	69b9      	ldr	r1, [r7, #24]
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 f8f0 	bl	8008bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e02c      	b.n	8008a74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a1a:	88fb      	ldrh	r3, [r7, #6]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d105      	bne.n	8008a2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a20:	893b      	ldrh	r3, [r7, #8]
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	629a      	str	r2, [r3, #40]	; 0x28
 8008a2a:	e015      	b.n	8008a58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008a2c:	893b      	ldrh	r3, [r7, #8]
 8008a2e:	0a1b      	lsrs	r3, r3, #8
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	69b9      	ldr	r1, [r7, #24]
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 f8d6 	bl	8008bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e012      	b.n	8008a74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a4e:	893b      	ldrh	r3, [r7, #8]
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2180      	movs	r1, #128	; 0x80
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 f884 	bl	8008b70 <I2C_WaitOnFlagUntilTimeout>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e000      	b.n	8008a74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	80002000 	.word	0x80002000

08008a80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af02      	add	r7, sp, #8
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	4608      	mov	r0, r1
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	4603      	mov	r3, r0
 8008a90:	817b      	strh	r3, [r7, #10]
 8008a92:	460b      	mov	r3, r1
 8008a94:	813b      	strh	r3, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008a9a:	88fb      	ldrh	r3, [r7, #6]
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	8979      	ldrh	r1, [r7, #10]
 8008aa0:	4b20      	ldr	r3, [pc, #128]	; (8008b24 <I2C_RequestMemoryRead+0xa4>)
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 f9fe 	bl	8008ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	69b9      	ldr	r1, [r7, #24]
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f000 f89d 	bl	8008bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e02c      	b.n	8008b1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ac0:	88fb      	ldrh	r3, [r7, #6]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d105      	bne.n	8008ad2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ac6:	893b      	ldrh	r3, [r7, #8]
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	629a      	str	r2, [r3, #40]	; 0x28
 8008ad0:	e015      	b.n	8008afe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ad2:	893b      	ldrh	r3, [r7, #8]
 8008ad4:	0a1b      	lsrs	r3, r3, #8
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	69b9      	ldr	r1, [r7, #24]
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f883 	bl	8008bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e012      	b.n	8008b1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008af4:	893b      	ldrh	r3, [r7, #8]
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	2200      	movs	r2, #0
 8008b06:	2140      	movs	r1, #64	; 0x40
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 f831 	bl	8008b70 <I2C_WaitOnFlagUntilTimeout>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e000      	b.n	8008b1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	80002000 	.word	0x80002000

08008b28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d103      	bne.n	8008b46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2200      	movs	r2, #0
 8008b44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d007      	beq.n	8008b64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699a      	ldr	r2, [r3, #24]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f042 0201 	orr.w	r2, r2, #1
 8008b62:	619a      	str	r2, [r3, #24]
  }
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	603b      	str	r3, [r7, #0]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b80:	e022      	b.n	8008bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b88:	d01e      	beq.n	8008bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b8a:	f7fd f9b3 	bl	8005ef4 <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d302      	bcc.n	8008ba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d113      	bne.n	8008bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ba4:	f043 0220 	orr.w	r2, r3, #32
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e00f      	b.n	8008be8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699a      	ldr	r2, [r3, #24]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2301      	moveq	r3, #1
 8008bda:	2300      	movne	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	461a      	mov	r2, r3
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d0cd      	beq.n	8008b82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008bfc:	e02c      	b.n	8008c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	68b9      	ldr	r1, [r7, #8]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f870 	bl	8008ce8 <I2C_IsErrorOccurred>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e02a      	b.n	8008c68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c18:	d01e      	beq.n	8008c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c1a:	f7fd f96b 	bl	8005ef4 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d302      	bcc.n	8008c30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d113      	bne.n	8008c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c34:	f043 0220 	orr.w	r2, r3, #32
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e007      	b.n	8008c68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d1cb      	bne.n	8008bfe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c7c:	e028      	b.n	8008cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	68b9      	ldr	r1, [r7, #8]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 f830 	bl	8008ce8 <I2C_IsErrorOccurred>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e026      	b.n	8008ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c92:	f7fd f92f 	bl	8005ef4 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d302      	bcc.n	8008ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d113      	bne.n	8008cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cac:	f043 0220 	orr.w	r2, r3, #32
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e007      	b.n	8008ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f003 0320 	and.w	r3, r3, #32
 8008cda:	2b20      	cmp	r3, #32
 8008cdc:	d1cf      	bne.n	8008c7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08a      	sub	sp, #40	; 0x28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	f003 0310 	and.w	r3, r3, #16
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d068      	beq.n	8008de6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2210      	movs	r2, #16
 8008d1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d1c:	e049      	b.n	8008db2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d24:	d045      	beq.n	8008db2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d26:	f7fd f8e5 	bl	8005ef4 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d302      	bcc.n	8008d3c <I2C_IsErrorOccurred+0x54>
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d13a      	bne.n	8008db2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d5e:	d121      	bne.n	8008da4 <I2C_IsErrorOccurred+0xbc>
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d66:	d01d      	beq.n	8008da4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008d68:	7cfb      	ldrb	r3, [r7, #19]
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	d01a      	beq.n	8008da4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008d7e:	f7fd f8b9 	bl	8005ef4 <HAL_GetTick>
 8008d82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d84:	e00e      	b.n	8008da4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008d86:	f7fd f8b5 	bl	8005ef4 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b19      	cmp	r3, #25
 8008d92:	d907      	bls.n	8008da4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	f043 0320 	orr.w	r3, r3, #32
 8008d9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008da2:	e006      	b.n	8008db2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	f003 0320 	and.w	r3, r3, #32
 8008dae:	2b20      	cmp	r3, #32
 8008db0:	d1e9      	bne.n	8008d86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	f003 0320 	and.w	r3, r3, #32
 8008dbc:	2b20      	cmp	r3, #32
 8008dbe:	d003      	beq.n	8008dc8 <I2C_IsErrorOccurred+0xe0>
 8008dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0aa      	beq.n	8008d1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d103      	bne.n	8008dd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	f043 0304 	orr.w	r3, r3, #4
 8008dde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00b      	beq.n	8008e32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	f043 0308 	orr.w	r3, r3, #8
 8008e20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00b      	beq.n	8008e54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	f043 0302 	orr.w	r3, r3, #2
 8008e42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01c      	beq.n	8008e96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f7ff fe63 	bl	8008b28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6859      	ldr	r1, [r3, #4]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ea4 <I2C_IsErrorOccurred+0x1bc>)
 8008e6e:	400b      	ands	r3, r1
 8008e70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3728      	adds	r7, #40	; 0x28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	fe00e800 	.word	0xfe00e800

08008ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	607b      	str	r3, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	817b      	strh	r3, [r7, #10]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008eba:	897b      	ldrh	r3, [r7, #10]
 8008ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ec0:	7a7b      	ldrb	r3, [r7, #9]
 8008ec2:	041b      	lsls	r3, r3, #16
 8008ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ec8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ed6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	0d5b      	lsrs	r3, r3, #21
 8008ee2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008ee6:	4b08      	ldr	r3, [pc, #32]	; (8008f08 <I2C_TransferConfig+0x60>)
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	43db      	mvns	r3, r3
 8008eec:	ea02 0103 	and.w	r1, r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008efa:	bf00      	nop
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	03ff63ff 	.word	0x03ff63ff

08008f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b20      	cmp	r3, #32
 8008f20:	d138      	bne.n	8008f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d101      	bne.n	8008f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e032      	b.n	8008f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2224      	movs	r2, #36	; 0x24
 8008f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f022 0201 	bic.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6819      	ldr	r1, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0201 	orr.w	r2, r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2220      	movs	r2, #32
 8008f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	e000      	b.n	8008f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f94:	2302      	movs	r3, #2
  }
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b085      	sub	sp, #20
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b20      	cmp	r3, #32
 8008fb6:	d139      	bne.n	800902c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d101      	bne.n	8008fc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	e033      	b.n	800902e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2224      	movs	r2, #36	; 0x24
 8008fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f022 0201 	bic.w	r2, r2, #1
 8008fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008ff4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	021b      	lsls	r3, r3, #8
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2220      	movs	r2, #32
 800901c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	e000      	b.n	800902e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800902c:	2302      	movs	r3, #2
  }
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
	...

0800903c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e0bf      	b.n	80091ce <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d106      	bne.n	8009068 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7fa fabc 	bl	80035e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800907e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6999      	ldr	r1, [r3, #24]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009094:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6899      	ldr	r1, [r3, #8]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	4b4a      	ldr	r3, [pc, #296]	; (80091d8 <HAL_LTDC_Init+0x19c>)
 80090b0:	400b      	ands	r3, r1
 80090b2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	041b      	lsls	r3, r3, #16
 80090ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6899      	ldr	r1, [r3, #8]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	431a      	orrs	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	430a      	orrs	r2, r1
 80090d0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68d9      	ldr	r1, [r3, #12]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	4b3e      	ldr	r3, [pc, #248]	; (80091d8 <HAL_LTDC_Init+0x19c>)
 80090de:	400b      	ands	r3, r1
 80090e0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	041b      	lsls	r3, r3, #16
 80090e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68d9      	ldr	r1, [r3, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a1a      	ldr	r2, [r3, #32]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	431a      	orrs	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	430a      	orrs	r2, r1
 80090fe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6919      	ldr	r1, [r3, #16]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	4b33      	ldr	r3, [pc, #204]	; (80091d8 <HAL_LTDC_Init+0x19c>)
 800910c:	400b      	ands	r3, r1
 800910e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	041b      	lsls	r3, r3, #16
 8009116:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6919      	ldr	r1, [r3, #16]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	431a      	orrs	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	430a      	orrs	r2, r1
 800912c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6959      	ldr	r1, [r3, #20]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	4b27      	ldr	r3, [pc, #156]	; (80091d8 <HAL_LTDC_Init+0x19c>)
 800913a:	400b      	ands	r3, r1
 800913c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009142:	041b      	lsls	r3, r3, #16
 8009144:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6959      	ldr	r1, [r3, #20]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	431a      	orrs	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	430a      	orrs	r2, r1
 800915a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009162:	021b      	lsls	r3, r3, #8
 8009164:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800916c:	041b      	lsls	r3, r3, #16
 800916e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800917e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4313      	orrs	r3, r2
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009192:	431a      	orrs	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0206 	orr.w	r2, r2, #6
 80091aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0201 	orr.w	r2, r2, #1
 80091ba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	f000f800 	.word	0xf000f800

080091dc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f003 0304 	and.w	r3, r3, #4
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d023      	beq.n	8009246 <HAL_LTDC_IRQHandler+0x6a>
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d01e      	beq.n	8009246 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0204 	bic.w	r2, r2, #4
 8009216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2204      	movs	r2, #4
 800921e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009226:	f043 0201 	orr.w	r2, r3, #1
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2204      	movs	r2, #4
 8009234:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f86f 	bl	8009324 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d023      	beq.n	8009298 <HAL_LTDC_IRQHandler+0xbc>
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	d01e      	beq.n	8009298 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0202 	bic.w	r2, r2, #2
 8009268:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2202      	movs	r2, #2
 8009270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009278:	f043 0202 	orr.w	r2, r3, #2
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2204      	movs	r2, #4
 8009286:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f846 	bl	8009324 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d01b      	beq.n	80092da <HAL_LTDC_IRQHandler+0xfe>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d016      	beq.n	80092da <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0201 	bic.w	r2, r2, #1
 80092ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2201      	movs	r2, #1
 80092c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f82f 	bl	8009338 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f003 0308 	and.w	r3, r3, #8
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d01b      	beq.n	800931c <HAL_LTDC_IRQHandler+0x140>
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f003 0308 	and.w	r3, r3, #8
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d016      	beq.n	800931c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0208 	bic.w	r2, r2, #8
 80092fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2208      	movs	r2, #8
 8009304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f818 	bl	800934c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800931c:	bf00      	nop
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009360:	b5b0      	push	{r4, r5, r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009372:	2b01      	cmp	r3, #1
 8009374:	d101      	bne.n	800937a <HAL_LTDC_ConfigLayer+0x1a>
 8009376:	2302      	movs	r3, #2
 8009378:	e02c      	b.n	80093d4 <HAL_LTDC_ConfigLayer+0x74>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2202      	movs	r2, #2
 8009386:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2134      	movs	r1, #52	; 0x34
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	4413      	add	r3, r2
 8009396:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	4614      	mov	r4, r2
 800939e:	461d      	mov	r5, r3
 80093a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	68b9      	ldr	r1, [r7, #8]
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 f81f 	bl	80093f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2201      	movs	r2, #1
 80093c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bdb0      	pop	{r4, r5, r7, pc}

080093dc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80093ea:	b2db      	uxtb	r3, r3
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b089      	sub	sp, #36	; 0x24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	0c1b      	lsrs	r3, r3, #16
 8009410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009414:	4413      	add	r3, r2
 8009416:	041b      	lsls	r3, r3, #16
 8009418:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	01db      	lsls	r3, r3, #7
 8009424:	4413      	add	r3, r2
 8009426:	3384      	adds	r3, #132	; 0x84
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	6812      	ldr	r2, [r2, #0]
 800942e:	4611      	mov	r1, r2
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	01d2      	lsls	r2, r2, #7
 8009434:	440a      	add	r2, r1
 8009436:	3284      	adds	r2, #132	; 0x84
 8009438:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800943c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	0c1b      	lsrs	r3, r3, #16
 800944a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800944e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009450:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4619      	mov	r1, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	01db      	lsls	r3, r3, #7
 800945c:	440b      	add	r3, r1
 800945e:	3384      	adds	r3, #132	; 0x84
 8009460:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009466:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	68da      	ldr	r2, [r3, #12]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009476:	4413      	add	r3, r2
 8009478:	041b      	lsls	r3, r3, #16
 800947a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	461a      	mov	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	01db      	lsls	r3, r3, #7
 8009486:	4413      	add	r3, r2
 8009488:	3384      	adds	r3, #132	; 0x84
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	6812      	ldr	r2, [r2, #0]
 8009490:	4611      	mov	r1, r2
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	01d2      	lsls	r2, r2, #7
 8009496:	440a      	add	r2, r1
 8009498:	3284      	adds	r2, #132	; 0x84
 800949a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800949e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094ae:	4413      	add	r3, r2
 80094b0:	1c5a      	adds	r2, r3, #1
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4619      	mov	r1, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	01db      	lsls	r3, r3, #7
 80094bc:	440b      	add	r3, r1
 80094be:	3384      	adds	r3, #132	; 0x84
 80094c0:	4619      	mov	r1, r3
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	01db      	lsls	r3, r3, #7
 80094d2:	4413      	add	r3, r2
 80094d4:	3384      	adds	r3, #132	; 0x84
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	6812      	ldr	r2, [r2, #0]
 80094dc:	4611      	mov	r1, r2
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	01d2      	lsls	r2, r2, #7
 80094e2:	440a      	add	r2, r1
 80094e4:	3284      	adds	r2, #132	; 0x84
 80094e6:	f023 0307 	bic.w	r3, r3, #7
 80094ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	01db      	lsls	r3, r3, #7
 80094f6:	4413      	add	r3, r2
 80094f8:	3384      	adds	r3, #132	; 0x84
 80094fa:	461a      	mov	r2, r3
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009512:	041b      	lsls	r3, r3, #16
 8009514:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	061b      	lsls	r3, r3, #24
 800951c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	01db      	lsls	r3, r3, #7
 8009528:	4413      	add	r3, r2
 800952a:	3384      	adds	r3, #132	; 0x84
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	01db      	lsls	r3, r3, #7
 8009538:	4413      	add	r3, r2
 800953a:	3384      	adds	r3, #132	; 0x84
 800953c:	461a      	mov	r2, r3
 800953e:	2300      	movs	r3, #0
 8009540:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009548:	461a      	mov	r2, r3
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	431a      	orrs	r2, r3
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	431a      	orrs	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4619      	mov	r1, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	01db      	lsls	r3, r3, #7
 800955c:	440b      	add	r3, r1
 800955e:	3384      	adds	r3, #132	; 0x84
 8009560:	4619      	mov	r1, r3
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	4313      	orrs	r3, r2
 8009566:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	01db      	lsls	r3, r3, #7
 8009572:	4413      	add	r3, r2
 8009574:	3384      	adds	r3, #132	; 0x84
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	4611      	mov	r1, r2
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	01d2      	lsls	r2, r2, #7
 8009582:	440a      	add	r2, r1
 8009584:	3284      	adds	r2, #132	; 0x84
 8009586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800958a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	01db      	lsls	r3, r3, #7
 8009596:	4413      	add	r3, r2
 8009598:	3384      	adds	r3, #132	; 0x84
 800959a:	461a      	mov	r2, r3
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	01db      	lsls	r3, r3, #7
 80095ac:	4413      	add	r3, r2
 80095ae:	3384      	adds	r3, #132	; 0x84
 80095b0:	69da      	ldr	r2, [r3, #28]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4619      	mov	r1, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	01db      	lsls	r3, r3, #7
 80095bc:	440b      	add	r3, r1
 80095be:	3384      	adds	r3, #132	; 0x84
 80095c0:	4619      	mov	r1, r3
 80095c2:	4b58      	ldr	r3, [pc, #352]	; (8009724 <LTDC_SetConfig+0x32c>)
 80095c4:	4013      	ands	r3, r2
 80095c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	69da      	ldr	r2, [r3, #28]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	68f9      	ldr	r1, [r7, #12]
 80095d2:	6809      	ldr	r1, [r1, #0]
 80095d4:	4608      	mov	r0, r1
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	01c9      	lsls	r1, r1, #7
 80095da:	4401      	add	r1, r0
 80095dc:	3184      	adds	r1, #132	; 0x84
 80095de:	4313      	orrs	r3, r2
 80095e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	01db      	lsls	r3, r3, #7
 80095ec:	4413      	add	r3, r2
 80095ee:	3384      	adds	r3, #132	; 0x84
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	461a      	mov	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	01db      	lsls	r3, r3, #7
 80095fc:	4413      	add	r3, r2
 80095fe:	3384      	adds	r3, #132	; 0x84
 8009600:	461a      	mov	r2, r3
 8009602:	2300      	movs	r3, #0
 8009604:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	01db      	lsls	r3, r3, #7
 8009610:	4413      	add	r3, r2
 8009612:	3384      	adds	r3, #132	; 0x84
 8009614:	461a      	mov	r2, r3
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d102      	bne.n	800962a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009624:	2304      	movs	r3, #4
 8009626:	61fb      	str	r3, [r7, #28]
 8009628:	e01b      	b.n	8009662 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d102      	bne.n	8009638 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009632:	2303      	movs	r3, #3
 8009634:	61fb      	str	r3, [r7, #28]
 8009636:	e014      	b.n	8009662 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	2b04      	cmp	r3, #4
 800963e:	d00b      	beq.n	8009658 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009644:	2b02      	cmp	r3, #2
 8009646:	d007      	beq.n	8009658 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800964c:	2b03      	cmp	r3, #3
 800964e:	d003      	beq.n	8009658 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009654:	2b07      	cmp	r3, #7
 8009656:	d102      	bne.n	800965e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009658:	2302      	movs	r3, #2
 800965a:	61fb      	str	r3, [r7, #28]
 800965c:	e001      	b.n	8009662 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800965e:	2301      	movs	r3, #1
 8009660:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	01db      	lsls	r3, r3, #7
 800966c:	4413      	add	r3, r2
 800966e:	3384      	adds	r3, #132	; 0x84
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	6812      	ldr	r2, [r2, #0]
 8009676:	4611      	mov	r1, r2
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	01d2      	lsls	r2, r2, #7
 800967c:	440a      	add	r2, r1
 800967e:	3284      	adds	r2, #132	; 0x84
 8009680:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009684:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968a:	69fa      	ldr	r2, [r7, #28]
 800968c:	fb02 f303 	mul.w	r3, r2, r3
 8009690:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	6859      	ldr	r1, [r3, #4]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	1acb      	subs	r3, r1, r3
 800969c:	69f9      	ldr	r1, [r7, #28]
 800969e:	fb01 f303 	mul.w	r3, r1, r3
 80096a2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80096a4:	68f9      	ldr	r1, [r7, #12]
 80096a6:	6809      	ldr	r1, [r1, #0]
 80096a8:	4608      	mov	r0, r1
 80096aa:	6879      	ldr	r1, [r7, #4]
 80096ac:	01c9      	lsls	r1, r1, #7
 80096ae:	4401      	add	r1, r0
 80096b0:	3184      	adds	r1, #132	; 0x84
 80096b2:	4313      	orrs	r3, r2
 80096b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	01db      	lsls	r3, r3, #7
 80096c0:	4413      	add	r3, r2
 80096c2:	3384      	adds	r3, #132	; 0x84
 80096c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4619      	mov	r1, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	01db      	lsls	r3, r3, #7
 80096d0:	440b      	add	r3, r1
 80096d2:	3384      	adds	r3, #132	; 0x84
 80096d4:	4619      	mov	r1, r3
 80096d6:	4b14      	ldr	r3, [pc, #80]	; (8009728 <LTDC_SetConfig+0x330>)
 80096d8:	4013      	ands	r3, r2
 80096da:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	461a      	mov	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	01db      	lsls	r3, r3, #7
 80096e6:	4413      	add	r3, r2
 80096e8:	3384      	adds	r3, #132	; 0x84
 80096ea:	461a      	mov	r2, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	01db      	lsls	r3, r3, #7
 80096fc:	4413      	add	r3, r2
 80096fe:	3384      	adds	r3, #132	; 0x84
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	6812      	ldr	r2, [r2, #0]
 8009706:	4611      	mov	r1, r2
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	01d2      	lsls	r2, r2, #7
 800970c:	440a      	add	r2, r1
 800970e:	3284      	adds	r2, #132	; 0x84
 8009710:	f043 0301 	orr.w	r3, r3, #1
 8009714:	6013      	str	r3, [r2, #0]
}
 8009716:	bf00      	nop
 8009718:	3724      	adds	r7, #36	; 0x24
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	fffff8f8 	.word	0xfffff8f8
 8009728:	fffff800 	.word	0xfffff800

0800972c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009730:	4b05      	ldr	r3, [pc, #20]	; (8009748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a04      	ldr	r2, [pc, #16]	; (8009748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800973a:	6013      	str	r3, [r2, #0]
}
 800973c:	bf00      	nop
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	40007000 	.word	0x40007000

0800974c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009756:	4b23      	ldr	r3, [pc, #140]	; (80097e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	4a22      	ldr	r2, [pc, #136]	; (80097e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800975c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009760:	6413      	str	r3, [r2, #64]	; 0x40
 8009762:	4b20      	ldr	r3, [pc, #128]	; (80097e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8009764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800976a:	603b      	str	r3, [r7, #0]
 800976c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800976e:	4b1e      	ldr	r3, [pc, #120]	; (80097e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a1d      	ldr	r2, [pc, #116]	; (80097e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009778:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800977a:	f7fc fbbb 	bl	8005ef4 <HAL_GetTick>
 800977e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009780:	e009      	b.n	8009796 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009782:	f7fc fbb7 	bl	8005ef4 <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009790:	d901      	bls.n	8009796 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e022      	b.n	80097dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009796:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800979e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097a2:	d1ee      	bne.n	8009782 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80097a4:	4b10      	ldr	r3, [pc, #64]	; (80097e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a0f      	ldr	r2, [pc, #60]	; (80097e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80097aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097b0:	f7fc fba0 	bl	8005ef4 <HAL_GetTick>
 80097b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80097b6:	e009      	b.n	80097cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80097b8:	f7fc fb9c 	bl	8005ef4 <HAL_GetTick>
 80097bc:	4602      	mov	r2, r0
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097c6:	d901      	bls.n	80097cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e007      	b.n	80097dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80097cc:	4b06      	ldr	r3, [pc, #24]	; (80097e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097d8:	d1ee      	bne.n	80097b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	40023800 	.word	0x40023800
 80097e8:	40007000 	.word	0x40007000

080097ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80097f4:	2300      	movs	r3, #0
 80097f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e291      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 8087 	beq.w	800991e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009810:	4b96      	ldr	r3, [pc, #600]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f003 030c 	and.w	r3, r3, #12
 8009818:	2b04      	cmp	r3, #4
 800981a:	d00c      	beq.n	8009836 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800981c:	4b93      	ldr	r3, [pc, #588]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f003 030c 	and.w	r3, r3, #12
 8009824:	2b08      	cmp	r3, #8
 8009826:	d112      	bne.n	800984e <HAL_RCC_OscConfig+0x62>
 8009828:	4b90      	ldr	r3, [pc, #576]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009834:	d10b      	bne.n	800984e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009836:	4b8d      	ldr	r3, [pc, #564]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d06c      	beq.n	800991c <HAL_RCC_OscConfig+0x130>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d168      	bne.n	800991c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e26b      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009856:	d106      	bne.n	8009866 <HAL_RCC_OscConfig+0x7a>
 8009858:	4b84      	ldr	r3, [pc, #528]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a83      	ldr	r2, [pc, #524]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 800985e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	e02e      	b.n	80098c4 <HAL_RCC_OscConfig+0xd8>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10c      	bne.n	8009888 <HAL_RCC_OscConfig+0x9c>
 800986e:	4b7f      	ldr	r3, [pc, #508]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a7e      	ldr	r2, [pc, #504]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009878:	6013      	str	r3, [r2, #0]
 800987a:	4b7c      	ldr	r3, [pc, #496]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a7b      	ldr	r2, [pc, #492]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	e01d      	b.n	80098c4 <HAL_RCC_OscConfig+0xd8>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009890:	d10c      	bne.n	80098ac <HAL_RCC_OscConfig+0xc0>
 8009892:	4b76      	ldr	r3, [pc, #472]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a75      	ldr	r2, [pc, #468]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	4b73      	ldr	r3, [pc, #460]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a72      	ldr	r2, [pc, #456]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80098a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	e00b      	b.n	80098c4 <HAL_RCC_OscConfig+0xd8>
 80098ac:	4b6f      	ldr	r3, [pc, #444]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a6e      	ldr	r2, [pc, #440]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80098b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	4b6c      	ldr	r3, [pc, #432]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a6b      	ldr	r2, [pc, #428]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80098be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d013      	beq.n	80098f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098cc:	f7fc fb12 	bl	8005ef4 <HAL_GetTick>
 80098d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098d2:	e008      	b.n	80098e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098d4:	f7fc fb0e 	bl	8005ef4 <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	2b64      	cmp	r3, #100	; 0x64
 80098e0:	d901      	bls.n	80098e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e21f      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098e6:	4b61      	ldr	r3, [pc, #388]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d0f0      	beq.n	80098d4 <HAL_RCC_OscConfig+0xe8>
 80098f2:	e014      	b.n	800991e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f4:	f7fc fafe 	bl	8005ef4 <HAL_GetTick>
 80098f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098fa:	e008      	b.n	800990e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098fc:	f7fc fafa 	bl	8005ef4 <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	2b64      	cmp	r3, #100	; 0x64
 8009908:	d901      	bls.n	800990e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e20b      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800990e:	4b57      	ldr	r3, [pc, #348]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1f0      	bne.n	80098fc <HAL_RCC_OscConfig+0x110>
 800991a:	e000      	b.n	800991e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800991c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b00      	cmp	r3, #0
 8009928:	d069      	beq.n	80099fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800992a:	4b50      	ldr	r3, [pc, #320]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f003 030c 	and.w	r3, r3, #12
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00b      	beq.n	800994e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009936:	4b4d      	ldr	r3, [pc, #308]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f003 030c 	and.w	r3, r3, #12
 800993e:	2b08      	cmp	r3, #8
 8009940:	d11c      	bne.n	800997c <HAL_RCC_OscConfig+0x190>
 8009942:	4b4a      	ldr	r3, [pc, #296]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d116      	bne.n	800997c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800994e:	4b47      	ldr	r3, [pc, #284]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0302 	and.w	r3, r3, #2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d005      	beq.n	8009966 <HAL_RCC_OscConfig+0x17a>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d001      	beq.n	8009966 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e1df      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009966:	4b41      	ldr	r3, [pc, #260]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	493d      	ldr	r1, [pc, #244]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009976:	4313      	orrs	r3, r2
 8009978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800997a:	e040      	b.n	80099fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d023      	beq.n	80099cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009984:	4b39      	ldr	r3, [pc, #228]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a38      	ldr	r2, [pc, #224]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 800998a:	f043 0301 	orr.w	r3, r3, #1
 800998e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009990:	f7fc fab0 	bl	8005ef4 <HAL_GetTick>
 8009994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009996:	e008      	b.n	80099aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009998:	f7fc faac 	bl	8005ef4 <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d901      	bls.n	80099aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e1bd      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099aa:	4b30      	ldr	r3, [pc, #192]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0f0      	beq.n	8009998 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099b6:	4b2d      	ldr	r3, [pc, #180]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	00db      	lsls	r3, r3, #3
 80099c4:	4929      	ldr	r1, [pc, #164]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	600b      	str	r3, [r1, #0]
 80099ca:	e018      	b.n	80099fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099cc:	4b27      	ldr	r3, [pc, #156]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a26      	ldr	r2, [pc, #152]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80099d2:	f023 0301 	bic.w	r3, r3, #1
 80099d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099d8:	f7fc fa8c 	bl	8005ef4 <HAL_GetTick>
 80099dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099de:	e008      	b.n	80099f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099e0:	f7fc fa88 	bl	8005ef4 <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d901      	bls.n	80099f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80099ee:	2303      	movs	r3, #3
 80099f0:	e199      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099f2:	4b1e      	ldr	r3, [pc, #120]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1f0      	bne.n	80099e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0308 	and.w	r3, r3, #8
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d038      	beq.n	8009a7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d019      	beq.n	8009a46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a12:	4b16      	ldr	r3, [pc, #88]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a16:	4a15      	ldr	r2, [pc, #84]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009a18:	f043 0301 	orr.w	r3, r3, #1
 8009a1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a1e:	f7fc fa69 	bl	8005ef4 <HAL_GetTick>
 8009a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a24:	e008      	b.n	8009a38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a26:	f7fc fa65 	bl	8005ef4 <HAL_GetTick>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d901      	bls.n	8009a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e176      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a38:	4b0c      	ldr	r3, [pc, #48]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a3c:	f003 0302 	and.w	r3, r3, #2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d0f0      	beq.n	8009a26 <HAL_RCC_OscConfig+0x23a>
 8009a44:	e01a      	b.n	8009a7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a46:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a4a:	4a08      	ldr	r2, [pc, #32]	; (8009a6c <HAL_RCC_OscConfig+0x280>)
 8009a4c:	f023 0301 	bic.w	r3, r3, #1
 8009a50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a52:	f7fc fa4f 	bl	8005ef4 <HAL_GetTick>
 8009a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a58:	e00a      	b.n	8009a70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a5a:	f7fc fa4b 	bl	8005ef4 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d903      	bls.n	8009a70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e15c      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
 8009a6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a70:	4b91      	ldr	r3, [pc, #580]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a74:	f003 0302 	and.w	r3, r3, #2
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1ee      	bne.n	8009a5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 80a4 	beq.w	8009bd2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a8a:	4b8b      	ldr	r3, [pc, #556]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10d      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a96:	4b88      	ldr	r3, [pc, #544]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9a:	4a87      	ldr	r2, [pc, #540]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8009aa2:	4b85      	ldr	r3, [pc, #532]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aaa:	60bb      	str	r3, [r7, #8]
 8009aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ab2:	4b82      	ldr	r3, [pc, #520]	; (8009cbc <HAL_RCC_OscConfig+0x4d0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d118      	bne.n	8009af0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009abe:	4b7f      	ldr	r3, [pc, #508]	; (8009cbc <HAL_RCC_OscConfig+0x4d0>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a7e      	ldr	r2, [pc, #504]	; (8009cbc <HAL_RCC_OscConfig+0x4d0>)
 8009ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009aca:	f7fc fa13 	bl	8005ef4 <HAL_GetTick>
 8009ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ad0:	e008      	b.n	8009ae4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ad2:	f7fc fa0f 	bl	8005ef4 <HAL_GetTick>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	2b64      	cmp	r3, #100	; 0x64
 8009ade:	d901      	bls.n	8009ae4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	e120      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ae4:	4b75      	ldr	r3, [pc, #468]	; (8009cbc <HAL_RCC_OscConfig+0x4d0>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0f0      	beq.n	8009ad2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d106      	bne.n	8009b06 <HAL_RCC_OscConfig+0x31a>
 8009af8:	4b6f      	ldr	r3, [pc, #444]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009afc:	4a6e      	ldr	r2, [pc, #440]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009afe:	f043 0301 	orr.w	r3, r3, #1
 8009b02:	6713      	str	r3, [r2, #112]	; 0x70
 8009b04:	e02d      	b.n	8009b62 <HAL_RCC_OscConfig+0x376>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10c      	bne.n	8009b28 <HAL_RCC_OscConfig+0x33c>
 8009b0e:	4b6a      	ldr	r3, [pc, #424]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b12:	4a69      	ldr	r2, [pc, #420]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b14:	f023 0301 	bic.w	r3, r3, #1
 8009b18:	6713      	str	r3, [r2, #112]	; 0x70
 8009b1a:	4b67      	ldr	r3, [pc, #412]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b1e:	4a66      	ldr	r2, [pc, #408]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b20:	f023 0304 	bic.w	r3, r3, #4
 8009b24:	6713      	str	r3, [r2, #112]	; 0x70
 8009b26:	e01c      	b.n	8009b62 <HAL_RCC_OscConfig+0x376>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	2b05      	cmp	r3, #5
 8009b2e:	d10c      	bne.n	8009b4a <HAL_RCC_OscConfig+0x35e>
 8009b30:	4b61      	ldr	r3, [pc, #388]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b34:	4a60      	ldr	r2, [pc, #384]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b36:	f043 0304 	orr.w	r3, r3, #4
 8009b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009b3c:	4b5e      	ldr	r3, [pc, #376]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b40:	4a5d      	ldr	r2, [pc, #372]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b42:	f043 0301 	orr.w	r3, r3, #1
 8009b46:	6713      	str	r3, [r2, #112]	; 0x70
 8009b48:	e00b      	b.n	8009b62 <HAL_RCC_OscConfig+0x376>
 8009b4a:	4b5b      	ldr	r3, [pc, #364]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	4a5a      	ldr	r2, [pc, #360]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b50:	f023 0301 	bic.w	r3, r3, #1
 8009b54:	6713      	str	r3, [r2, #112]	; 0x70
 8009b56:	4b58      	ldr	r3, [pc, #352]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5a:	4a57      	ldr	r2, [pc, #348]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b5c:	f023 0304 	bic.w	r3, r3, #4
 8009b60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d015      	beq.n	8009b96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b6a:	f7fc f9c3 	bl	8005ef4 <HAL_GetTick>
 8009b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b70:	e00a      	b.n	8009b88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b72:	f7fc f9bf 	bl	8005ef4 <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e0ce      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b88:	4b4b      	ldr	r3, [pc, #300]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0ee      	beq.n	8009b72 <HAL_RCC_OscConfig+0x386>
 8009b94:	e014      	b.n	8009bc0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b96:	f7fc f9ad 	bl	8005ef4 <HAL_GetTick>
 8009b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b9c:	e00a      	b.n	8009bb4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b9e:	f7fc f9a9 	bl	8005ef4 <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d901      	bls.n	8009bb4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e0b8      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bb4:	4b40      	ldr	r3, [pc, #256]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb8:	f003 0302 	and.w	r3, r3, #2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1ee      	bne.n	8009b9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d105      	bne.n	8009bd2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bc6:	4b3c      	ldr	r3, [pc, #240]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	4a3b      	ldr	r2, [pc, #236]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 80a4 	beq.w	8009d24 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009bdc:	4b36      	ldr	r3, [pc, #216]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f003 030c 	and.w	r3, r3, #12
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	d06b      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d149      	bne.n	8009c84 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bf0:	4b31      	ldr	r3, [pc, #196]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a30      	ldr	r2, [pc, #192]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bfc:	f7fc f97a 	bl	8005ef4 <HAL_GetTick>
 8009c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c02:	e008      	b.n	8009c16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c04:	f7fc f976 	bl	8005ef4 <HAL_GetTick>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d901      	bls.n	8009c16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e087      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c16:	4b28      	ldr	r3, [pc, #160]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1f0      	bne.n	8009c04 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	69da      	ldr	r2, [r3, #28]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	019b      	lsls	r3, r3, #6
 8009c32:	431a      	orrs	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c38:	085b      	lsrs	r3, r3, #1
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	041b      	lsls	r3, r3, #16
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	061b      	lsls	r3, r3, #24
 8009c46:	4313      	orrs	r3, r2
 8009c48:	4a1b      	ldr	r2, [pc, #108]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009c4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c4e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c50:	4b19      	ldr	r3, [pc, #100]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a18      	ldr	r2, [pc, #96]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c5c:	f7fc f94a 	bl	8005ef4 <HAL_GetTick>
 8009c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c62:	e008      	b.n	8009c76 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c64:	f7fc f946 	bl	8005ef4 <HAL_GetTick>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d901      	bls.n	8009c76 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e057      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c76:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0f0      	beq.n	8009c64 <HAL_RCC_OscConfig+0x478>
 8009c82:	e04f      	b.n	8009d24 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c84:	4b0c      	ldr	r3, [pc, #48]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a0b      	ldr	r2, [pc, #44]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c90:	f7fc f930 	bl	8005ef4 <HAL_GetTick>
 8009c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c96:	e008      	b.n	8009caa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c98:	f7fc f92c 	bl	8005ef4 <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d901      	bls.n	8009caa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e03d      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009caa:	4b03      	ldr	r3, [pc, #12]	; (8009cb8 <HAL_RCC_OscConfig+0x4cc>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1f0      	bne.n	8009c98 <HAL_RCC_OscConfig+0x4ac>
 8009cb6:	e035      	b.n	8009d24 <HAL_RCC_OscConfig+0x538>
 8009cb8:	40023800 	.word	0x40023800
 8009cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009cc0:	4b1b      	ldr	r3, [pc, #108]	; (8009d30 <HAL_RCC_OscConfig+0x544>)
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d028      	beq.n	8009d20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d121      	bne.n	8009d20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d11a      	bne.n	8009d20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009cf6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d111      	bne.n	8009d20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d06:	085b      	lsrs	r3, r3, #1
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d107      	bne.n	8009d20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d001      	beq.n	8009d24 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e000      	b.n	8009d26 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	40023800 	.word	0x40023800

08009d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e0d0      	b.n	8009eee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d4c:	4b6a      	ldr	r3, [pc, #424]	; (8009ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 030f 	and.w	r3, r3, #15
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d910      	bls.n	8009d7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d5a:	4b67      	ldr	r3, [pc, #412]	; (8009ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f023 020f 	bic.w	r2, r3, #15
 8009d62:	4965      	ldr	r1, [pc, #404]	; (8009ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d6a:	4b63      	ldr	r3, [pc, #396]	; (8009ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 030f 	and.w	r3, r3, #15
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d001      	beq.n	8009d7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e0b8      	b.n	8009eee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 0302 	and.w	r3, r3, #2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d020      	beq.n	8009dca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d94:	4b59      	ldr	r3, [pc, #356]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	4a58      	ldr	r2, [pc, #352]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009d9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009d9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0308 	and.w	r3, r3, #8
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d005      	beq.n	8009db8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009dac:	4b53      	ldr	r3, [pc, #332]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	4a52      	ldr	r2, [pc, #328]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009db6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009db8:	4b50      	ldr	r3, [pc, #320]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	494d      	ldr	r1, [pc, #308]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 0301 	and.w	r3, r3, #1
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d040      	beq.n	8009e58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d107      	bne.n	8009dee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dde:	4b47      	ldr	r3, [pc, #284]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d115      	bne.n	8009e16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e07f      	b.n	8009eee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d107      	bne.n	8009e06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009df6:	4b41      	ldr	r3, [pc, #260]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d109      	bne.n	8009e16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e073      	b.n	8009eee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e06:	4b3d      	ldr	r3, [pc, #244]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0302 	and.w	r3, r3, #2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d101      	bne.n	8009e16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e06b      	b.n	8009eee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e16:	4b39      	ldr	r3, [pc, #228]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f023 0203 	bic.w	r2, r3, #3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	4936      	ldr	r1, [pc, #216]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009e24:	4313      	orrs	r3, r2
 8009e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e28:	f7fc f864 	bl	8005ef4 <HAL_GetTick>
 8009e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e2e:	e00a      	b.n	8009e46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e30:	f7fc f860 	bl	8005ef4 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d901      	bls.n	8009e46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e053      	b.n	8009eee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e46:	4b2d      	ldr	r3, [pc, #180]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	f003 020c 	and.w	r2, r3, #12
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d1eb      	bne.n	8009e30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e58:	4b27      	ldr	r3, [pc, #156]	; (8009ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 030f 	and.w	r3, r3, #15
 8009e60:	683a      	ldr	r2, [r7, #0]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d210      	bcs.n	8009e88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e66:	4b24      	ldr	r3, [pc, #144]	; (8009ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f023 020f 	bic.w	r2, r3, #15
 8009e6e:	4922      	ldr	r1, [pc, #136]	; (8009ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e76:	4b20      	ldr	r3, [pc, #128]	; (8009ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 030f 	and.w	r3, r3, #15
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d001      	beq.n	8009e88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e032      	b.n	8009eee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d008      	beq.n	8009ea6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e94:	4b19      	ldr	r3, [pc, #100]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	4916      	ldr	r1, [pc, #88]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 0308 	and.w	r3, r3, #8
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d009      	beq.n	8009ec6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009eb2:	4b12      	ldr	r3, [pc, #72]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	00db      	lsls	r3, r3, #3
 8009ec0:	490e      	ldr	r1, [pc, #56]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009ec6:	f000 f821 	bl	8009f0c <HAL_RCC_GetSysClockFreq>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <HAL_RCC_ClockConfig+0x1c8>)
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	091b      	lsrs	r3, r3, #4
 8009ed2:	f003 030f 	and.w	r3, r3, #15
 8009ed6:	490a      	ldr	r1, [pc, #40]	; (8009f00 <HAL_RCC_ClockConfig+0x1cc>)
 8009ed8:	5ccb      	ldrb	r3, [r1, r3]
 8009eda:	fa22 f303 	lsr.w	r3, r2, r3
 8009ede:	4a09      	ldr	r2, [pc, #36]	; (8009f04 <HAL_RCC_ClockConfig+0x1d0>)
 8009ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009ee2:	4b09      	ldr	r3, [pc, #36]	; (8009f08 <HAL_RCC_ClockConfig+0x1d4>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fb faec 	bl	80054c4 <HAL_InitTick>

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	40023c00 	.word	0x40023c00
 8009efc:	40023800 	.word	0x40023800
 8009f00:	0801289c 	.word	0x0801289c
 8009f04:	20000048 	.word	0x20000048
 8009f08:	2000004c 	.word	0x2000004c

08009f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f10:	b090      	sub	sp, #64	; 0x40
 8009f12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	637b      	str	r3, [r7, #52]	; 0x34
 8009f18:	2300      	movs	r3, #0
 8009f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f24:	4b59      	ldr	r3, [pc, #356]	; (800a08c <HAL_RCC_GetSysClockFreq+0x180>)
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f003 030c 	and.w	r3, r3, #12
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d00d      	beq.n	8009f4c <HAL_RCC_GetSysClockFreq+0x40>
 8009f30:	2b08      	cmp	r3, #8
 8009f32:	f200 80a1 	bhi.w	800a078 <HAL_RCC_GetSysClockFreq+0x16c>
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <HAL_RCC_GetSysClockFreq+0x34>
 8009f3a:	2b04      	cmp	r3, #4
 8009f3c:	d003      	beq.n	8009f46 <HAL_RCC_GetSysClockFreq+0x3a>
 8009f3e:	e09b      	b.n	800a078 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f40:	4b53      	ldr	r3, [pc, #332]	; (800a090 <HAL_RCC_GetSysClockFreq+0x184>)
 8009f42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009f44:	e09b      	b.n	800a07e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f46:	4b53      	ldr	r3, [pc, #332]	; (800a094 <HAL_RCC_GetSysClockFreq+0x188>)
 8009f48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009f4a:	e098      	b.n	800a07e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f4c:	4b4f      	ldr	r3, [pc, #316]	; (800a08c <HAL_RCC_GetSysClockFreq+0x180>)
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f54:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009f56:	4b4d      	ldr	r3, [pc, #308]	; (800a08c <HAL_RCC_GetSysClockFreq+0x180>)
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d028      	beq.n	8009fb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f62:	4b4a      	ldr	r3, [pc, #296]	; (800a08c <HAL_RCC_GetSysClockFreq+0x180>)
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	099b      	lsrs	r3, r3, #6
 8009f68:	2200      	movs	r2, #0
 8009f6a:	623b      	str	r3, [r7, #32]
 8009f6c:	627a      	str	r2, [r7, #36]	; 0x24
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009f74:	2100      	movs	r1, #0
 8009f76:	4b47      	ldr	r3, [pc, #284]	; (800a094 <HAL_RCC_GetSysClockFreq+0x188>)
 8009f78:	fb03 f201 	mul.w	r2, r3, r1
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	fb00 f303 	mul.w	r3, r0, r3
 8009f82:	4413      	add	r3, r2
 8009f84:	4a43      	ldr	r2, [pc, #268]	; (800a094 <HAL_RCC_GetSysClockFreq+0x188>)
 8009f86:	fba0 1202 	umull	r1, r2, r0, r2
 8009f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f8c:	460a      	mov	r2, r1
 8009f8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8009f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f92:	4413      	add	r3, r2
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f98:	2200      	movs	r2, #0
 8009f9a:	61bb      	str	r3, [r7, #24]
 8009f9c:	61fa      	str	r2, [r7, #28]
 8009f9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009fa6:	f7f6 fe37 	bl	8000c18 <__aeabi_uldivmod>
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	4613      	mov	r3, r2
 8009fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fb2:	e053      	b.n	800a05c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fb4:	4b35      	ldr	r3, [pc, #212]	; (800a08c <HAL_RCC_GetSysClockFreq+0x180>)
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	099b      	lsrs	r3, r3, #6
 8009fba:	2200      	movs	r2, #0
 8009fbc:	613b      	str	r3, [r7, #16]
 8009fbe:	617a      	str	r2, [r7, #20]
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009fc6:	f04f 0b00 	mov.w	fp, #0
 8009fca:	4652      	mov	r2, sl
 8009fcc:	465b      	mov	r3, fp
 8009fce:	f04f 0000 	mov.w	r0, #0
 8009fd2:	f04f 0100 	mov.w	r1, #0
 8009fd6:	0159      	lsls	r1, r3, #5
 8009fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009fdc:	0150      	lsls	r0, r2, #5
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	ebb2 080a 	subs.w	r8, r2, sl
 8009fe6:	eb63 090b 	sbc.w	r9, r3, fp
 8009fea:	f04f 0200 	mov.w	r2, #0
 8009fee:	f04f 0300 	mov.w	r3, #0
 8009ff2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009ff6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009ffa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009ffe:	ebb2 0408 	subs.w	r4, r2, r8
 800a002:	eb63 0509 	sbc.w	r5, r3, r9
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	f04f 0300 	mov.w	r3, #0
 800a00e:	00eb      	lsls	r3, r5, #3
 800a010:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a014:	00e2      	lsls	r2, r4, #3
 800a016:	4614      	mov	r4, r2
 800a018:	461d      	mov	r5, r3
 800a01a:	eb14 030a 	adds.w	r3, r4, sl
 800a01e:	603b      	str	r3, [r7, #0]
 800a020:	eb45 030b 	adc.w	r3, r5, fp
 800a024:	607b      	str	r3, [r7, #4]
 800a026:	f04f 0200 	mov.w	r2, #0
 800a02a:	f04f 0300 	mov.w	r3, #0
 800a02e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a032:	4629      	mov	r1, r5
 800a034:	028b      	lsls	r3, r1, #10
 800a036:	4621      	mov	r1, r4
 800a038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a03c:	4621      	mov	r1, r4
 800a03e:	028a      	lsls	r2, r1, #10
 800a040:	4610      	mov	r0, r2
 800a042:	4619      	mov	r1, r3
 800a044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a046:	2200      	movs	r2, #0
 800a048:	60bb      	str	r3, [r7, #8]
 800a04a:	60fa      	str	r2, [r7, #12]
 800a04c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a050:	f7f6 fde2 	bl	8000c18 <__aeabi_uldivmod>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4613      	mov	r3, r2
 800a05a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a05c:	4b0b      	ldr	r3, [pc, #44]	; (800a08c <HAL_RCC_GetSysClockFreq+0x180>)
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	0c1b      	lsrs	r3, r3, #16
 800a062:	f003 0303 	and.w	r3, r3, #3
 800a066:	3301      	adds	r3, #1
 800a068:	005b      	lsls	r3, r3, #1
 800a06a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800a06c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	fbb2 f3f3 	udiv	r3, r2, r3
 800a074:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a076:	e002      	b.n	800a07e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a078:	4b05      	ldr	r3, [pc, #20]	; (800a090 <HAL_RCC_GetSysClockFreq+0x184>)
 800a07a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a07c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a080:	4618      	mov	r0, r3
 800a082:	3740      	adds	r7, #64	; 0x40
 800a084:	46bd      	mov	sp, r7
 800a086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a08a:	bf00      	nop
 800a08c:	40023800 	.word	0x40023800
 800a090:	00f42400 	.word	0x00f42400
 800a094:	017d7840 	.word	0x017d7840

0800a098 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a098:	b480      	push	{r7}
 800a09a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a09c:	4b03      	ldr	r3, [pc, #12]	; (800a0ac <HAL_RCC_GetHCLKFreq+0x14>)
 800a09e:	681b      	ldr	r3, [r3, #0]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	20000048 	.word	0x20000048

0800a0b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a0b4:	f7ff fff0 	bl	800a098 <HAL_RCC_GetHCLKFreq>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	4b05      	ldr	r3, [pc, #20]	; (800a0d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	0a9b      	lsrs	r3, r3, #10
 800a0c0:	f003 0307 	and.w	r3, r3, #7
 800a0c4:	4903      	ldr	r1, [pc, #12]	; (800a0d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0c6:	5ccb      	ldrb	r3, [r1, r3]
 800a0c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	40023800 	.word	0x40023800
 800a0d4:	080128ac 	.word	0x080128ac

0800a0d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a0dc:	f7ff ffdc 	bl	800a098 <HAL_RCC_GetHCLKFreq>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	0b5b      	lsrs	r3, r3, #13
 800a0e8:	f003 0307 	and.w	r3, r3, #7
 800a0ec:	4903      	ldr	r1, [pc, #12]	; (800a0fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0ee:	5ccb      	ldrb	r3, [r1, r3]
 800a0f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	40023800 	.word	0x40023800
 800a0fc:	080128ac 	.word	0x080128ac

0800a100 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	220f      	movs	r2, #15
 800a10e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a110:	4b12      	ldr	r3, [pc, #72]	; (800a15c <HAL_RCC_GetClockConfig+0x5c>)
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f003 0203 	and.w	r2, r3, #3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a11c:	4b0f      	ldr	r3, [pc, #60]	; (800a15c <HAL_RCC_GetClockConfig+0x5c>)
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a128:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <HAL_RCC_GetClockConfig+0x5c>)
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a134:	4b09      	ldr	r3, [pc, #36]	; (800a15c <HAL_RCC_GetClockConfig+0x5c>)
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	08db      	lsrs	r3, r3, #3
 800a13a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a142:	4b07      	ldr	r3, [pc, #28]	; (800a160 <HAL_RCC_GetClockConfig+0x60>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 020f 	and.w	r2, r3, #15
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	601a      	str	r2, [r3, #0]
}
 800a14e:	bf00      	nop
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	40023800 	.word	0x40023800
 800a160:	40023c00 	.word	0x40023c00

0800a164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b088      	sub	sp, #32
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a174:	2300      	movs	r3, #0
 800a176:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d012      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a18c:	4b69      	ldr	r3, [pc, #420]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	4a68      	ldr	r2, [pc, #416]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a192:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a196:	6093      	str	r3, [r2, #8]
 800a198:	4b66      	ldr	r3, [pc, #408]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a0:	4964      	ldr	r1, [pc, #400]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d017      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1be:	4b5d      	ldr	r3, [pc, #372]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1cc:	4959      	ldr	r1, [pc, #356]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1dc:	d101      	bne.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d017      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a1fa:	4b4e      	ldr	r3, [pc, #312]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a200:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a208:	494a      	ldr	r1, [pc, #296]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a218:	d101      	bne.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a21a:	2301      	movs	r3, #1
 800a21c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a226:	2301      	movs	r3, #1
 800a228:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a236:	2301      	movs	r3, #1
 800a238:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 808b 	beq.w	800a35e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a248:	4b3a      	ldr	r3, [pc, #232]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24c:	4a39      	ldr	r2, [pc, #228]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a24e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a252:	6413      	str	r3, [r2, #64]	; 0x40
 800a254:	4b37      	ldr	r3, [pc, #220]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a25c:	60bb      	str	r3, [r7, #8]
 800a25e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a260:	4b35      	ldr	r3, [pc, #212]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a34      	ldr	r2, [pc, #208]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a26a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a26c:	f7fb fe42 	bl	8005ef4 <HAL_GetTick>
 800a270:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a272:	e008      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a274:	f7fb fe3e 	bl	8005ef4 <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	2b64      	cmp	r3, #100	; 0x64
 800a280:	d901      	bls.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e357      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a286:	4b2c      	ldr	r3, [pc, #176]	; (800a338 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0f0      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a292:	4b28      	ldr	r3, [pc, #160]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a29a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d035      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d02e      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2b0:	4b20      	ldr	r3, [pc, #128]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a2ba:	4b1e      	ldr	r3, [pc, #120]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2be:	4a1d      	ldr	r2, [pc, #116]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a2c6:	4b1b      	ldr	r3, [pc, #108]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ca:	4a1a      	ldr	r2, [pc, #104]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a2d2:	4a18      	ldr	r2, [pc, #96]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a2d8:	4b16      	ldr	r3, [pc, #88]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d114      	bne.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2e4:	f7fb fe06 	bl	8005ef4 <HAL_GetTick>
 800a2e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2ea:	e00a      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2ec:	f7fb fe02 	bl	8005ef4 <HAL_GetTick>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d901      	bls.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e319      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a302:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a306:	f003 0302 	and.w	r3, r3, #2
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0ee      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a31a:	d111      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a328:	4b04      	ldr	r3, [pc, #16]	; (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a32a:	400b      	ands	r3, r1
 800a32c:	4901      	ldr	r1, [pc, #4]	; (800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	608b      	str	r3, [r1, #8]
 800a332:	e00b      	b.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a334:	40023800 	.word	0x40023800
 800a338:	40007000 	.word	0x40007000
 800a33c:	0ffffcff 	.word	0x0ffffcff
 800a340:	4baa      	ldr	r3, [pc, #680]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	4aa9      	ldr	r2, [pc, #676]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a346:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a34a:	6093      	str	r3, [r2, #8]
 800a34c:	4ba7      	ldr	r3, [pc, #668]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a34e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a358:	49a4      	ldr	r1, [pc, #656]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a35a:	4313      	orrs	r3, r2
 800a35c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0310 	and.w	r3, r3, #16
 800a366:	2b00      	cmp	r3, #0
 800a368:	d010      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a36a:	4ba0      	ldr	r3, [pc, #640]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a36c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a370:	4a9e      	ldr	r2, [pc, #632]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a376:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a37a:	4b9c      	ldr	r3, [pc, #624]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a37c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a384:	4999      	ldr	r1, [pc, #612]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a386:	4313      	orrs	r3, r2
 800a388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00a      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a398:	4b94      	ldr	r3, [pc, #592]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a39e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3a6:	4991      	ldr	r1, [pc, #580]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00a      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a3ba:	4b8c      	ldr	r3, [pc, #560]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3c8:	4988      	ldr	r1, [pc, #544]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00a      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a3dc:	4b83      	ldr	r3, [pc, #524]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ea:	4980      	ldr	r1, [pc, #512]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3fe:	4b7b      	ldr	r3, [pc, #492]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a404:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a40c:	4977      	ldr	r1, [pc, #476]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a40e:	4313      	orrs	r3, r2
 800a410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00a      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a420:	4b72      	ldr	r3, [pc, #456]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a426:	f023 0203 	bic.w	r2, r3, #3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a42e:	496f      	ldr	r1, [pc, #444]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a430:	4313      	orrs	r3, r2
 800a432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00a      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a442:	4b6a      	ldr	r3, [pc, #424]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a448:	f023 020c 	bic.w	r2, r3, #12
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a450:	4966      	ldr	r1, [pc, #408]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a452:	4313      	orrs	r3, r2
 800a454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00a      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a464:	4b61      	ldr	r3, [pc, #388]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a46a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a472:	495e      	ldr	r1, [pc, #376]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a474:	4313      	orrs	r3, r2
 800a476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00a      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a486:	4b59      	ldr	r3, [pc, #356]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a494:	4955      	ldr	r1, [pc, #340]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a496:	4313      	orrs	r3, r2
 800a498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00a      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a4a8:	4b50      	ldr	r3, [pc, #320]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b6:	494d      	ldr	r1, [pc, #308]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a4ca:	4b48      	ldr	r3, [pc, #288]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d8:	4944      	ldr	r1, [pc, #272]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00a      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a4ec:	4b3f      	ldr	r3, [pc, #252]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4fa:	493c      	ldr	r1, [pc, #240]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00a      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a50e:	4b37      	ldr	r3, [pc, #220]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a514:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a51c:	4933      	ldr	r1, [pc, #204]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00a      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a530:	4b2e      	ldr	r3, [pc, #184]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a536:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a53e:	492b      	ldr	r1, [pc, #172]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a540:	4313      	orrs	r3, r2
 800a542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d011      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a552:	4b26      	ldr	r3, [pc, #152]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a558:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a560:	4922      	ldr	r1, [pc, #136]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a562:	4313      	orrs	r3, r2
 800a564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a56c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a570:	d101      	bne.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a572:	2301      	movs	r3, #1
 800a574:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0308 	and.w	r3, r3, #8
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a582:	2301      	movs	r3, #1
 800a584:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00a      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a592:	4b16      	ldr	r3, [pc, #88]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a598:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5a0:	4912      	ldr	r1, [pc, #72]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00b      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a5b4:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5c4:	4909      	ldr	r1, [pc, #36]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d006      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 80d9 	beq.w	800a792 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a5e0:	4b02      	ldr	r3, [pc, #8]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a01      	ldr	r2, [pc, #4]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a5e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a5ea:	e001      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800a5ec:	40023800 	.word	0x40023800
 800a5f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5f2:	f7fb fc7f 	bl	8005ef4 <HAL_GetTick>
 800a5f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a5f8:	e008      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a5fa:	f7fb fc7b 	bl	8005ef4 <HAL_GetTick>
 800a5fe:	4602      	mov	r2, r0
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	2b64      	cmp	r3, #100	; 0x64
 800a606:	d901      	bls.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e194      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a60c:	4b6c      	ldr	r3, [pc, #432]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1f0      	bne.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d021      	beq.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d11d      	bne.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a62c:	4b64      	ldr	r3, [pc, #400]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a62e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a632:	0c1b      	lsrs	r3, r3, #16
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a63a:	4b61      	ldr	r3, [pc, #388]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a63c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a640:	0e1b      	lsrs	r3, r3, #24
 800a642:	f003 030f 	and.w	r3, r3, #15
 800a646:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	019a      	lsls	r2, r3, #6
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	041b      	lsls	r3, r3, #16
 800a652:	431a      	orrs	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	061b      	lsls	r3, r3, #24
 800a658:	431a      	orrs	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	071b      	lsls	r3, r3, #28
 800a660:	4957      	ldr	r1, [pc, #348]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a662:	4313      	orrs	r3, r2
 800a664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d004      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a67c:	d00a      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a686:	2b00      	cmp	r3, #0
 800a688:	d02e      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a692:	d129      	bne.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a694:	4b4a      	ldr	r3, [pc, #296]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a69a:	0c1b      	lsrs	r3, r3, #16
 800a69c:	f003 0303 	and.w	r3, r3, #3
 800a6a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a6a2:	4b47      	ldr	r3, [pc, #284]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6a8:	0f1b      	lsrs	r3, r3, #28
 800a6aa:	f003 0307 	and.w	r3, r3, #7
 800a6ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	019a      	lsls	r2, r3, #6
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	041b      	lsls	r3, r3, #16
 800a6ba:	431a      	orrs	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	061b      	lsls	r3, r3, #24
 800a6c2:	431a      	orrs	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	071b      	lsls	r3, r3, #28
 800a6c8:	493d      	ldr	r1, [pc, #244]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a6d0:	4b3b      	ldr	r3, [pc, #236]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6d6:	f023 021f 	bic.w	r2, r3, #31
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	4937      	ldr	r1, [pc, #220]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d01d      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a6f4:	4b32      	ldr	r3, [pc, #200]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6fa:	0e1b      	lsrs	r3, r3, #24
 800a6fc:	f003 030f 	and.w	r3, r3, #15
 800a700:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a702:	4b2f      	ldr	r3, [pc, #188]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a708:	0f1b      	lsrs	r3, r3, #28
 800a70a:	f003 0307 	and.w	r3, r3, #7
 800a70e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	019a      	lsls	r2, r3, #6
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	041b      	lsls	r3, r3, #16
 800a71c:	431a      	orrs	r2, r3
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	061b      	lsls	r3, r3, #24
 800a722:	431a      	orrs	r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	071b      	lsls	r3, r3, #28
 800a728:	4925      	ldr	r1, [pc, #148]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d011      	beq.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	019a      	lsls	r2, r3, #6
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	041b      	lsls	r3, r3, #16
 800a748:	431a      	orrs	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	061b      	lsls	r3, r3, #24
 800a750:	431a      	orrs	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	071b      	lsls	r3, r3, #28
 800a758:	4919      	ldr	r1, [pc, #100]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a75a:	4313      	orrs	r3, r2
 800a75c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a760:	4b17      	ldr	r3, [pc, #92]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a16      	ldr	r2, [pc, #88]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a766:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a76a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a76c:	f7fb fbc2 	bl	8005ef4 <HAL_GetTick>
 800a770:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a772:	e008      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a774:	f7fb fbbe 	bl	8005ef4 <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b64      	cmp	r3, #100	; 0x64
 800a780:	d901      	bls.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e0d7      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a786:	4b0e      	ldr	r3, [pc, #56]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0f0      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b01      	cmp	r3, #1
 800a796:	f040 80cd 	bne.w	800a934 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a79a:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a08      	ldr	r2, [pc, #32]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7a6:	f7fb fba5 	bl	8005ef4 <HAL_GetTick>
 800a7aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a7ac:	e00a      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a7ae:	f7fb fba1 	bl	8005ef4 <HAL_GetTick>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	2b64      	cmp	r3, #100	; 0x64
 800a7ba:	d903      	bls.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e0ba      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a7c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a7c4:	4b5e      	ldr	r3, [pc, #376]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7d0:	d0ed      	beq.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d003      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d009      	beq.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d02e      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d12a      	bne.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a7fa:	4b51      	ldr	r3, [pc, #324]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a800:	0c1b      	lsrs	r3, r3, #16
 800a802:	f003 0303 	and.w	r3, r3, #3
 800a806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a808:	4b4d      	ldr	r3, [pc, #308]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80e:	0f1b      	lsrs	r3, r3, #28
 800a810:	f003 0307 	and.w	r3, r3, #7
 800a814:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	019a      	lsls	r2, r3, #6
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	041b      	lsls	r3, r3, #16
 800a820:	431a      	orrs	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	061b      	lsls	r3, r3, #24
 800a828:	431a      	orrs	r2, r3
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	071b      	lsls	r3, r3, #28
 800a82e:	4944      	ldr	r1, [pc, #272]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a830:	4313      	orrs	r3, r2
 800a832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a836:	4b42      	ldr	r3, [pc, #264]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a83c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a844:	3b01      	subs	r3, #1
 800a846:	021b      	lsls	r3, r3, #8
 800a848:	493d      	ldr	r1, [pc, #244]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d022      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a864:	d11d      	bne.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a866:	4b36      	ldr	r3, [pc, #216]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86c:	0e1b      	lsrs	r3, r3, #24
 800a86e:	f003 030f 	and.w	r3, r3, #15
 800a872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a874:	4b32      	ldr	r3, [pc, #200]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a87a:	0f1b      	lsrs	r3, r3, #28
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	019a      	lsls	r2, r3, #6
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	041b      	lsls	r3, r3, #16
 800a88e:	431a      	orrs	r2, r3
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	061b      	lsls	r3, r3, #24
 800a894:	431a      	orrs	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	071b      	lsls	r3, r3, #28
 800a89a:	4929      	ldr	r1, [pc, #164]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a89c:	4313      	orrs	r3, r2
 800a89e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0308 	and.w	r3, r3, #8
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d028      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a8ae:	4b24      	ldr	r3, [pc, #144]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b4:	0e1b      	lsrs	r3, r3, #24
 800a8b6:	f003 030f 	and.w	r3, r3, #15
 800a8ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a8bc:	4b20      	ldr	r3, [pc, #128]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c2:	0c1b      	lsrs	r3, r3, #16
 800a8c4:	f003 0303 	and.w	r3, r3, #3
 800a8c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	019a      	lsls	r2, r3, #6
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	041b      	lsls	r3, r3, #16
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	061b      	lsls	r3, r3, #24
 800a8da:	431a      	orrs	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	69db      	ldr	r3, [r3, #28]
 800a8e0:	071b      	lsls	r3, r3, #28
 800a8e2:	4917      	ldr	r1, [pc, #92]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a8ea:	4b15      	ldr	r3, [pc, #84]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f8:	4911      	ldr	r1, [pc, #68]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a900:	4b0f      	ldr	r3, [pc, #60]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a0e      	ldr	r2, [pc, #56]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a90a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a90c:	f7fb faf2 	bl	8005ef4 <HAL_GetTick>
 800a910:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a912:	e008      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a914:	f7fb faee 	bl	8005ef4 <HAL_GetTick>
 800a918:	4602      	mov	r2, r0
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	2b64      	cmp	r3, #100	; 0x64
 800a920:	d901      	bls.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e007      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a926:	4b06      	ldr	r3, [pc, #24]	; (800a940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a92e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a932:	d1ef      	bne.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3720      	adds	r7, #32
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	40023800 	.word	0x40023800

0800a944 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e071      	b.n	800aa3e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	7f5b      	ldrb	r3, [r3, #29]
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d105      	bne.n	800a970 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7f9 f8ea 	bl	8003b44 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2202      	movs	r2, #2
 800a974:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	f003 0310 	and.w	r3, r3, #16
 800a980:	2b10      	cmp	r3, #16
 800a982:	d053      	beq.n	800aa2c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	22ca      	movs	r2, #202	; 0xca
 800a98a:	625a      	str	r2, [r3, #36]	; 0x24
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2253      	movs	r2, #83	; 0x53
 800a992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fac9 	bl	800af2c <RTC_EnterInitMode>
 800a99a:	4603      	mov	r3, r0
 800a99c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d12a      	bne.n	800a9fa <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6899      	ldr	r1, [r3, #8]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	4b26      	ldr	r3, [pc, #152]	; (800aa48 <HAL_RTC_Init+0x104>)
 800a9b0:	400b      	ands	r3, r1
 800a9b2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6899      	ldr	r1, [r3, #8]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	685a      	ldr	r2, [r3, #4]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	431a      	orrs	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	68d2      	ldr	r2, [r2, #12]
 800a9da:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6919      	ldr	r1, [r3, #16]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	041a      	lsls	r2, r3, #16
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fad2 	bl	800af9a <RTC_ExitInitMode>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d110      	bne.n	800aa22 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0208 	bic.w	r2, r2, #8
 800aa0e:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	699a      	ldr	r2, [r3, #24]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	22ff      	movs	r2, #255	; 0xff
 800aa28:	625a      	str	r2, [r3, #36]	; 0x24
 800aa2a:	e001      	b.n	800aa30 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d102      	bne.n	800aa3c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	ff8fffbf 	.word	0xff8fffbf

0800aa4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aa4c:	b590      	push	{r4, r7, lr}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	7f1b      	ldrb	r3, [r3, #28]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d101      	bne.n	800aa68 <HAL_RTC_SetTime+0x1c>
 800aa64:	2302      	movs	r3, #2
 800aa66:	e085      	b.n	800ab74 <HAL_RTC_SetTime+0x128>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2202      	movs	r2, #2
 800aa72:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d126      	bne.n	800aac8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d102      	bne.n	800aa8e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 faa6 	bl	800afe4 <RTC_ByteToBcd2>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	785b      	ldrb	r3, [r3, #1]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fa9f 	bl	800afe4 <RTC_ByteToBcd2>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800aaaa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	789b      	ldrb	r3, [r3, #2]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 fa97 	bl	800afe4 <RTC_ByteToBcd2>
 800aab6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aab8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	78db      	ldrb	r3, [r3, #3]
 800aac0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800aac2:	4313      	orrs	r3, r2
 800aac4:	617b      	str	r3, [r7, #20]
 800aac6:	e018      	b.n	800aafa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d102      	bne.n	800aadc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2200      	movs	r2, #0
 800aada:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	785b      	ldrb	r3, [r3, #1]
 800aae6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800aae8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800aaee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	78db      	ldrb	r3, [r3, #3]
 800aaf4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	22ca      	movs	r2, #202	; 0xca
 800ab00:	625a      	str	r2, [r3, #36]	; 0x24
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2253      	movs	r2, #83	; 0x53
 800ab08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f000 fa0e 	bl	800af2c <RTC_EnterInitMode>
 800ab10:	4603      	mov	r3, r0
 800ab12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ab14:	7cfb      	ldrb	r3, [r7, #19]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d11e      	bne.n	800ab58 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	6979      	ldr	r1, [r7, #20]
 800ab20:	4b16      	ldr	r3, [pc, #88]	; (800ab7c <HAL_RTC_SetTime+0x130>)
 800ab22:	400b      	ands	r3, r1
 800ab24:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	689a      	ldr	r2, [r3, #8]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6899      	ldr	r1, [r3, #8]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	68da      	ldr	r2, [r3, #12]
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	431a      	orrs	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	430a      	orrs	r2, r1
 800ab4c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f000 fa23 	bl	800af9a <RTC_ExitInitMode>
 800ab54:	4603      	mov	r3, r0
 800ab56:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ab58:	7cfb      	ldrb	r3, [r7, #19]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d102      	bne.n	800ab64 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2201      	movs	r2, #1
 800ab62:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	22ff      	movs	r2, #255	; 0xff
 800ab6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	771a      	strb	r2, [r3, #28]

  return status;
 800ab72:	7cfb      	ldrb	r3, [r7, #19]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	371c      	adds	r7, #28
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd90      	pop	{r4, r7, pc}
 800ab7c:	007f7f7f 	.word	0x007f7f7f

0800ab80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ab80:	b590      	push	{r4, r7, lr}
 800ab82:	b087      	sub	sp, #28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	7f1b      	ldrb	r3, [r3, #28]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d101      	bne.n	800ab9c <HAL_RTC_SetDate+0x1c>
 800ab98:	2302      	movs	r3, #2
 800ab9a:	e06f      	b.n	800ac7c <HAL_RTC_SetDate+0xfc>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2202      	movs	r2, #2
 800aba6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10e      	bne.n	800abcc <HAL_RTC_SetDate+0x4c>
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	785b      	ldrb	r3, [r3, #1]
 800abb2:	f003 0310 	and.w	r3, r3, #16
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d008      	beq.n	800abcc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	785b      	ldrb	r3, [r3, #1]
 800abbe:	f023 0310 	bic.w	r3, r3, #16
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	330a      	adds	r3, #10
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d11c      	bne.n	800ac0c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	78db      	ldrb	r3, [r3, #3]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fa04 	bl	800afe4 <RTC_ByteToBcd2>
 800abdc:	4603      	mov	r3, r0
 800abde:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	785b      	ldrb	r3, [r3, #1]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f000 f9fd 	bl	800afe4 <RTC_ByteToBcd2>
 800abea:	4603      	mov	r3, r0
 800abec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800abee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	789b      	ldrb	r3, [r3, #2]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 f9f5 	bl	800afe4 <RTC_ByteToBcd2>
 800abfa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800abfc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ac06:	4313      	orrs	r3, r2
 800ac08:	617b      	str	r3, [r7, #20]
 800ac0a:	e00e      	b.n	800ac2a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	78db      	ldrb	r3, [r3, #3]
 800ac10:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	785b      	ldrb	r3, [r3, #1]
 800ac16:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ac18:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ac1e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ac26:	4313      	orrs	r3, r2
 800ac28:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	22ca      	movs	r2, #202	; 0xca
 800ac30:	625a      	str	r2, [r3, #36]	; 0x24
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2253      	movs	r2, #83	; 0x53
 800ac38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 f976 	bl	800af2c <RTC_EnterInitMode>
 800ac40:	4603      	mov	r3, r0
 800ac42:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ac44:	7cfb      	ldrb	r3, [r7, #19]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10a      	bne.n	800ac60 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	6979      	ldr	r1, [r7, #20]
 800ac50:	4b0c      	ldr	r3, [pc, #48]	; (800ac84 <HAL_RTC_SetDate+0x104>)
 800ac52:	400b      	ands	r3, r1
 800ac54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f000 f99f 	bl	800af9a <RTC_ExitInitMode>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ac60:	7cfb      	ldrb	r3, [r7, #19]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d102      	bne.n	800ac6c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	22ff      	movs	r2, #255	; 0xff
 800ac72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2200      	movs	r2, #0
 800ac78:	771a      	strb	r2, [r3, #28]

  return status;
 800ac7a:	7cfb      	ldrb	r3, [r7, #19]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	371c      	adds	r7, #28
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd90      	pop	{r4, r7, pc}
 800ac84:	00ffff3f 	.word	0x00ffff3f

0800ac88 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ac88:	b590      	push	{r4, r7, lr}
 800ac8a:	b089      	sub	sp, #36	; 0x24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800ac94:	2300      	movs	r3, #0
 800ac96:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	7f1b      	ldrb	r3, [r3, #28]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d101      	bne.n	800acac <HAL_RTC_SetAlarm+0x24>
 800aca8:	2302      	movs	r3, #2
 800acaa:	e113      	b.n	800aed4 <HAL_RTC_SetAlarm+0x24c>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2201      	movs	r2, #1
 800acb0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2202      	movs	r2, #2
 800acb6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d137      	bne.n	800ad2e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d102      	bne.n	800acd2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2200      	movs	r2, #0
 800acd0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f984 	bl	800afe4 <RTC_ByteToBcd2>
 800acdc:	4603      	mov	r3, r0
 800acde:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	785b      	ldrb	r3, [r3, #1]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 f97d 	bl	800afe4 <RTC_ByteToBcd2>
 800acea:	4603      	mov	r3, r0
 800acec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800acee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	789b      	ldrb	r3, [r3, #2]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 f975 	bl	800afe4 <RTC_ByteToBcd2>
 800acfa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800acfc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	78db      	ldrb	r3, [r3, #3]
 800ad04:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ad06:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 f967 	bl	800afe4 <RTC_ByteToBcd2>
 800ad16:	4603      	mov	r3, r0
 800ad18:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800ad1a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ad22:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	61fb      	str	r3, [r7, #28]
 800ad2c:	e023      	b.n	800ad76 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d102      	bne.n	800ad42 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	785b      	ldrb	r3, [r3, #1]
 800ad4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ad4e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ad54:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	78db      	ldrb	r3, [r3, #3]
 800ad5a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ad5c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad64:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800ad66:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ad6c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ad72:	4313      	orrs	r3, r2
 800ad74:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	22ca      	movs	r2, #202	; 0xca
 800ad88:	625a      	str	r2, [r3, #36]	; 0x24
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2253      	movs	r2, #83	; 0x53
 800ad90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad9a:	d148      	bne.n	800ae2e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	689a      	ldr	r2, [r3, #8]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adaa:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800adba:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800adcc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800adce:	f7fb f891 	bl	8005ef4 <HAL_GetTick>
 800add2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800add4:	e013      	b.n	800adfe <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800add6:	f7fb f88d 	bl	8005ef4 <HAL_GetTick>
 800adda:	4602      	mov	r2, r0
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	1ad3      	subs	r3, r2, r3
 800ade0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ade4:	d90b      	bls.n	800adfe <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	22ff      	movs	r2, #255	; 0xff
 800adec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2203      	movs	r2, #3
 800adf2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e06a      	b.n	800aed4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	f003 0301 	and.w	r3, r3, #1
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0e4      	beq.n	800add6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	69fa      	ldr	r2, [r7, #28]
 800ae12:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	697a      	ldr	r2, [r7, #20]
 800ae1a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	689a      	ldr	r2, [r3, #8]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae2a:	609a      	str	r2, [r3, #8]
 800ae2c:	e047      	b.n	800aebe <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	689a      	ldr	r2, [r3, #8]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ae3c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689a      	ldr	r2, [r3, #8]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae4c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800ae5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ae60:	f7fb f848 	bl	8005ef4 <HAL_GetTick>
 800ae64:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800ae66:	e013      	b.n	800ae90 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ae68:	f7fb f844 	bl	8005ef4 <HAL_GetTick>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae76:	d90b      	bls.n	800ae90 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	22ff      	movs	r2, #255	; 0xff
 800ae7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2203      	movs	r2, #3
 800ae84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e021      	b.n	800aed4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f003 0302 	and.w	r3, r3, #2
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d0e4      	beq.n	800ae68 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	69fa      	ldr	r2, [r7, #28]
 800aea4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689a      	ldr	r2, [r3, #8]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aebc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	22ff      	movs	r2, #255	; 0xff
 800aec4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2201      	movs	r2, #1
 800aeca:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3724      	adds	r7, #36	; 0x24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd90      	pop	{r4, r7, pc}

0800aedc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68da      	ldr	r2, [r3, #12]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800aef6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aef8:	f7fa fffc 	bl	8005ef4 <HAL_GetTick>
 800aefc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aefe:	e009      	b.n	800af14 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800af00:	f7fa fff8 	bl	8005ef4 <HAL_GetTick>
 800af04:	4602      	mov	r2, r0
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af0e:	d901      	bls.n	800af14 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e007      	b.n	800af24 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	f003 0320 	and.w	r3, r3, #32
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0ee      	beq.n	800af00 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800af34:	2300      	movs	r3, #0
 800af36:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af46:	2b00      	cmp	r3, #0
 800af48:	d122      	bne.n	800af90 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68da      	ldr	r2, [r3, #12]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af58:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800af5a:	f7fa ffcb 	bl	8005ef4 <HAL_GetTick>
 800af5e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800af60:	e00c      	b.n	800af7c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800af62:	f7fa ffc7 	bl	8005ef4 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af70:	d904      	bls.n	800af7c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2204      	movs	r2, #4
 800af76:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af86:	2b00      	cmp	r3, #0
 800af88:	d102      	bne.n	800af90 <RTC_EnterInitMode+0x64>
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d1e8      	bne.n	800af62 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800af90:	7bfb      	ldrb	r3, [r7, #15]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b084      	sub	sp, #16
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68da      	ldr	r2, [r3, #12]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afb4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	f003 0320 	and.w	r3, r3, #32
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7ff ff89 	bl	800aedc <HAL_RTC_WaitForSynchro>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d004      	beq.n	800afda <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2204      	movs	r2, #4
 800afd4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800afda:	7bfb      	ldrb	r3, [r7, #15]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	4603      	mov	r3, r0
 800afec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800aff2:	e005      	b.n	800b000 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3301      	adds	r3, #1
 800aff8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	3b0a      	subs	r3, #10
 800affe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b000:	79fb      	ldrb	r3, [r7, #7]
 800b002:	2b09      	cmp	r3, #9
 800b004:	d8f6      	bhi.n	800aff4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	79fb      	ldrb	r3, [r7, #7]
 800b010:	4313      	orrs	r3, r2
 800b012:	b2db      	uxtb	r3, r3
}
 800b014:	4618      	mov	r0, r3
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800b020:	b480      	push	{r7}
 800b022:	b087      	sub	sp, #28
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b02c:	2300      	movs	r3, #0
 800b02e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	7f1b      	ldrb	r3, [r3, #28]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d101      	bne.n	800b03c <HAL_RTCEx_SetTimeStamp+0x1c>
 800b038:	2302      	movs	r3, #2
 800b03a:	e050      	b.n	800b0de <HAL_RTCEx_SetTimeStamp+0xbe>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2201      	movs	r2, #1
 800b040:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2202      	movs	r2, #2
 800b046:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f022 0206 	bic.w	r2, r2, #6
 800b056:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	430a      	orrs	r2, r1
 800b066:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	689a      	ldr	r2, [r3, #8]
 800b06e:	4b1f      	ldr	r3, [pc, #124]	; (800b0ec <HAL_RTCEx_SetTimeStamp+0xcc>)
 800b070:	4013      	ands	r3, r2
 800b072:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	4313      	orrs	r3, r2
 800b07a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	22ca      	movs	r2, #202	; 0xca
 800b082:	625a      	str	r2, [r3, #36]	; 0x24
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2253      	movs	r2, #83	; 0x53
 800b08a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800b0a4:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800b0b6:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	689a      	ldr	r2, [r3, #8]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0c6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	22ff      	movs	r2, #255	; 0xff
 800b0ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	371c      	adds	r7, #28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	fffff7f7 	.word	0xfffff7f7

0800b0f0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	e025      	b.n	800b150 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d106      	bne.n	800b11e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7f6 fa0d 	bl	8001538 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2202      	movs	r2, #2
 800b122:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f001 fa33 	bl	800c59c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6818      	ldr	r0, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	461a      	mov	r2, r3
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	f001 fa87 	bl	800c654 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b16a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d101      	bne.n	800b176 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b172:	2302      	movs	r3, #2
 800b174:	e021      	b.n	800b1ba <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b176:	7dfb      	ldrb	r3, [r7, #23]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d002      	beq.n	800b182 <HAL_SDRAM_SendCommand+0x2a>
 800b17c:	7dfb      	ldrb	r3, [r7, #23]
 800b17e:	2b05      	cmp	r3, #5
 800b180:	d118      	bne.n	800b1b4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2202      	movs	r2, #2
 800b186:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	68b9      	ldr	r1, [r7, #8]
 800b192:	4618      	mov	r0, r3
 800b194:	f001 fac8 	bl	800c728 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d104      	bne.n	800b1aa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2205      	movs	r2, #5
 800b1a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1a8:	e006      	b.n	800b1b8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1b2:	e001      	b.n	800b1b8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e000      	b.n	800b1ba <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b082      	sub	sp, #8
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d101      	bne.n	800b1dc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	e016      	b.n	800b20a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d10f      	bne.n	800b208 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f001 faba 	bl	800c770 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	e000      	b.n	800b20a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b084      	sub	sp, #16
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	e09d      	b.n	800b360 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d108      	bne.n	800b23e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b234:	d009      	beq.n	800b24a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	61da      	str	r2, [r3, #28]
 800b23c:	e005      	b.n	800b24a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d106      	bne.n	800b26a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7f8 fcd9 	bl	8003c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2202      	movs	r2, #2
 800b26e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b280:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b28a:	d902      	bls.n	800b292 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b28c:	2300      	movs	r3, #0
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	e002      	b.n	800b298 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b296:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b2a0:	d007      	beq.n	800b2b2 <HAL_SPI_Init+0xa0>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2aa:	d002      	beq.n	800b2b2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b2c2:	431a      	orrs	r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	f003 0302 	and.w	r3, r3, #2
 800b2cc:	431a      	orrs	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	431a      	orrs	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2e0:	431a      	orrs	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2ea:	431a      	orrs	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a1b      	ldr	r3, [r3, #32]
 800b2f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f4:	ea42 0103 	orr.w	r1, r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	430a      	orrs	r2, r1
 800b306:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	0c1b      	lsrs	r3, r3, #16
 800b30e:	f003 0204 	and.w	r2, r3, #4
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	f003 0310 	and.w	r3, r3, #16
 800b31a:	431a      	orrs	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b320:	f003 0308 	and.w	r3, r3, #8
 800b324:	431a      	orrs	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b32e:	ea42 0103 	orr.w	r1, r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	430a      	orrs	r2, r1
 800b33e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	69da      	ldr	r2, [r3, #28]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b34e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e049      	b.n	800b40e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b380:	b2db      	uxtb	r3, r3
 800b382:	2b00      	cmp	r3, #0
 800b384:	d106      	bne.n	800b394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7fa fb2c 	bl	80059ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2202      	movs	r2, #2
 800b398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	f000 fac0 	bl	800b92c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
	...

0800b418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b426:	b2db      	uxtb	r3, r3
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d001      	beq.n	800b430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	e054      	b.n	800b4da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2202      	movs	r2, #2
 800b434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68da      	ldr	r2, [r3, #12]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f042 0201 	orr.w	r2, r2, #1
 800b446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a26      	ldr	r2, [pc, #152]	; (800b4e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d022      	beq.n	800b498 <HAL_TIM_Base_Start_IT+0x80>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b45a:	d01d      	beq.n	800b498 <HAL_TIM_Base_Start_IT+0x80>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a22      	ldr	r2, [pc, #136]	; (800b4ec <HAL_TIM_Base_Start_IT+0xd4>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d018      	beq.n	800b498 <HAL_TIM_Base_Start_IT+0x80>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a21      	ldr	r2, [pc, #132]	; (800b4f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d013      	beq.n	800b498 <HAL_TIM_Base_Start_IT+0x80>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a1f      	ldr	r2, [pc, #124]	; (800b4f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d00e      	beq.n	800b498 <HAL_TIM_Base_Start_IT+0x80>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a1e      	ldr	r2, [pc, #120]	; (800b4f8 <HAL_TIM_Base_Start_IT+0xe0>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d009      	beq.n	800b498 <HAL_TIM_Base_Start_IT+0x80>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a1c      	ldr	r2, [pc, #112]	; (800b4fc <HAL_TIM_Base_Start_IT+0xe4>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d004      	beq.n	800b498 <HAL_TIM_Base_Start_IT+0x80>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a1b      	ldr	r2, [pc, #108]	; (800b500 <HAL_TIM_Base_Start_IT+0xe8>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d115      	bne.n	800b4c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689a      	ldr	r2, [r3, #8]
 800b49e:	4b19      	ldr	r3, [pc, #100]	; (800b504 <HAL_TIM_Base_Start_IT+0xec>)
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b06      	cmp	r3, #6
 800b4a8:	d015      	beq.n	800b4d6 <HAL_TIM_Base_Start_IT+0xbe>
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4b0:	d011      	beq.n	800b4d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f042 0201 	orr.w	r2, r2, #1
 800b4c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4c2:	e008      	b.n	800b4d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f042 0201 	orr.w	r2, r2, #1
 800b4d2:	601a      	str	r2, [r3, #0]
 800b4d4:	e000      	b.n	800b4d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3714      	adds	r7, #20
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	40010000 	.word	0x40010000
 800b4ec:	40000400 	.word	0x40000400
 800b4f0:	40000800 	.word	0x40000800
 800b4f4:	40000c00 	.word	0x40000c00
 800b4f8:	40010400 	.word	0x40010400
 800b4fc:	40014000 	.word	0x40014000
 800b500:	40001800 	.word	0x40001800
 800b504:	00010007 	.word	0x00010007

0800b508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	f003 0302 	and.w	r3, r3, #2
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d122      	bne.n	800b564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	f003 0302 	and.w	r3, r3, #2
 800b528:	2b02      	cmp	r3, #2
 800b52a:	d11b      	bne.n	800b564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f06f 0202 	mvn.w	r2, #2
 800b534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2201      	movs	r2, #1
 800b53a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	f003 0303 	and.w	r3, r3, #3
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f9d0 	bl	800b8f0 <HAL_TIM_IC_CaptureCallback>
 800b550:	e005      	b.n	800b55e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f9c2 	bl	800b8dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f9d3 	bl	800b904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	f003 0304 	and.w	r3, r3, #4
 800b56e:	2b04      	cmp	r3, #4
 800b570:	d122      	bne.n	800b5b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	f003 0304 	and.w	r3, r3, #4
 800b57c:	2b04      	cmp	r3, #4
 800b57e:	d11b      	bne.n	800b5b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f06f 0204 	mvn.w	r2, #4
 800b588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2202      	movs	r2, #2
 800b58e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	699b      	ldr	r3, [r3, #24]
 800b596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f9a6 	bl	800b8f0 <HAL_TIM_IC_CaptureCallback>
 800b5a4:	e005      	b.n	800b5b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f998 	bl	800b8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f9a9 	bl	800b904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	f003 0308 	and.w	r3, r3, #8
 800b5c2:	2b08      	cmp	r3, #8
 800b5c4:	d122      	bne.n	800b60c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	f003 0308 	and.w	r3, r3, #8
 800b5d0:	2b08      	cmp	r3, #8
 800b5d2:	d11b      	bne.n	800b60c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f06f 0208 	mvn.w	r2, #8
 800b5dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2204      	movs	r2, #4
 800b5e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	69db      	ldr	r3, [r3, #28]
 800b5ea:	f003 0303 	and.w	r3, r3, #3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f97c 	bl	800b8f0 <HAL_TIM_IC_CaptureCallback>
 800b5f8:	e005      	b.n	800b606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f96e 	bl	800b8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f97f 	bl	800b904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	f003 0310 	and.w	r3, r3, #16
 800b616:	2b10      	cmp	r3, #16
 800b618:	d122      	bne.n	800b660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	f003 0310 	and.w	r3, r3, #16
 800b624:	2b10      	cmp	r3, #16
 800b626:	d11b      	bne.n	800b660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f06f 0210 	mvn.w	r2, #16
 800b630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2208      	movs	r2, #8
 800b636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	69db      	ldr	r3, [r3, #28]
 800b63e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f952 	bl	800b8f0 <HAL_TIM_IC_CaptureCallback>
 800b64c:	e005      	b.n	800b65a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f944 	bl	800b8dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f955 	bl	800b904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d10e      	bne.n	800b68c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	f003 0301 	and.w	r3, r3, #1
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d107      	bne.n	800b68c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f06f 0201 	mvn.w	r2, #1
 800b684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7f8 f994 	bl	80039b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b696:	2b80      	cmp	r3, #128	; 0x80
 800b698:	d10e      	bne.n	800b6b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a4:	2b80      	cmp	r3, #128	; 0x80
 800b6a6:	d107      	bne.n	800b6b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fb0c 	bl	800bcd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6c6:	d10e      	bne.n	800b6e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d2:	2b80      	cmp	r3, #128	; 0x80
 800b6d4:	d107      	bne.n	800b6e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b6de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 faff 	bl	800bce4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f0:	2b40      	cmp	r3, #64	; 0x40
 800b6f2:	d10e      	bne.n	800b712 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6fe:	2b40      	cmp	r3, #64	; 0x40
 800b700:	d107      	bne.n	800b712 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b70a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f903 	bl	800b918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	f003 0320 	and.w	r3, r3, #32
 800b71c:	2b20      	cmp	r3, #32
 800b71e:	d10e      	bne.n	800b73e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	f003 0320 	and.w	r3, r3, #32
 800b72a:	2b20      	cmp	r3, #32
 800b72c:	d107      	bne.n	800b73e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f06f 0220 	mvn.w	r2, #32
 800b736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fabf 	bl	800bcbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b73e:	bf00      	nop
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
	...

0800b748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b752:	2300      	movs	r3, #0
 800b754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d101      	bne.n	800b764 <HAL_TIM_ConfigClockSource+0x1c>
 800b760:	2302      	movs	r3, #2
 800b762:	e0b4      	b.n	800b8ce <HAL_TIM_ConfigClockSource+0x186>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2202      	movs	r2, #2
 800b770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	4b56      	ldr	r3, [pc, #344]	; (800b8d8 <HAL_TIM_ConfigClockSource+0x190>)
 800b780:	4013      	ands	r3, r2
 800b782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b78a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b79c:	d03e      	beq.n	800b81c <HAL_TIM_ConfigClockSource+0xd4>
 800b79e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7a2:	f200 8087 	bhi.w	800b8b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7aa:	f000 8086 	beq.w	800b8ba <HAL_TIM_ConfigClockSource+0x172>
 800b7ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7b2:	d87f      	bhi.n	800b8b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7b4:	2b70      	cmp	r3, #112	; 0x70
 800b7b6:	d01a      	beq.n	800b7ee <HAL_TIM_ConfigClockSource+0xa6>
 800b7b8:	2b70      	cmp	r3, #112	; 0x70
 800b7ba:	d87b      	bhi.n	800b8b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7bc:	2b60      	cmp	r3, #96	; 0x60
 800b7be:	d050      	beq.n	800b862 <HAL_TIM_ConfigClockSource+0x11a>
 800b7c0:	2b60      	cmp	r3, #96	; 0x60
 800b7c2:	d877      	bhi.n	800b8b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7c4:	2b50      	cmp	r3, #80	; 0x50
 800b7c6:	d03c      	beq.n	800b842 <HAL_TIM_ConfigClockSource+0xfa>
 800b7c8:	2b50      	cmp	r3, #80	; 0x50
 800b7ca:	d873      	bhi.n	800b8b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7cc:	2b40      	cmp	r3, #64	; 0x40
 800b7ce:	d058      	beq.n	800b882 <HAL_TIM_ConfigClockSource+0x13a>
 800b7d0:	2b40      	cmp	r3, #64	; 0x40
 800b7d2:	d86f      	bhi.n	800b8b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7d4:	2b30      	cmp	r3, #48	; 0x30
 800b7d6:	d064      	beq.n	800b8a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b7d8:	2b30      	cmp	r3, #48	; 0x30
 800b7da:	d86b      	bhi.n	800b8b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7dc:	2b20      	cmp	r3, #32
 800b7de:	d060      	beq.n	800b8a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b7e0:	2b20      	cmp	r3, #32
 800b7e2:	d867      	bhi.n	800b8b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d05c      	beq.n	800b8a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b7e8:	2b10      	cmp	r3, #16
 800b7ea:	d05a      	beq.n	800b8a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b7ec:	e062      	b.n	800b8b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6818      	ldr	r0, [r3, #0]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	6899      	ldr	r1, [r3, #8]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	685a      	ldr	r2, [r3, #4]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	f000 f9af 	bl	800bb60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b810:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	609a      	str	r2, [r3, #8]
      break;
 800b81a:	e04f      	b.n	800b8bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6818      	ldr	r0, [r3, #0]
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	6899      	ldr	r1, [r3, #8]
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	685a      	ldr	r2, [r3, #4]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f000 f998 	bl	800bb60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689a      	ldr	r2, [r3, #8]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b83e:	609a      	str	r2, [r3, #8]
      break;
 800b840:	e03c      	b.n	800b8bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6818      	ldr	r0, [r3, #0]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	6859      	ldr	r1, [r3, #4]
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	461a      	mov	r2, r3
 800b850:	f000 f90c 	bl	800ba6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2150      	movs	r1, #80	; 0x50
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 f965 	bl	800bb2a <TIM_ITRx_SetConfig>
      break;
 800b860:	e02c      	b.n	800b8bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6818      	ldr	r0, [r3, #0]
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	6859      	ldr	r1, [r3, #4]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	461a      	mov	r2, r3
 800b870:	f000 f92b 	bl	800baca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2160      	movs	r1, #96	; 0x60
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 f955 	bl	800bb2a <TIM_ITRx_SetConfig>
      break;
 800b880:	e01c      	b.n	800b8bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6818      	ldr	r0, [r3, #0]
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	6859      	ldr	r1, [r3, #4]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	461a      	mov	r2, r3
 800b890:	f000 f8ec 	bl	800ba6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2140      	movs	r1, #64	; 0x40
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 f945 	bl	800bb2a <TIM_ITRx_SetConfig>
      break;
 800b8a0:	e00c      	b.n	800b8bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	f000 f93c 	bl	800bb2a <TIM_ITRx_SetConfig>
      break;
 800b8b2:	e003      	b.n	800b8bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b8:	e000      	b.n	800b8bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b8ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	fffeff88 	.word	0xfffeff88

0800b8dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8e4:	bf00      	nop
 800b8e6:	370c      	adds	r7, #12
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a40      	ldr	r2, [pc, #256]	; (800ba40 <TIM_Base_SetConfig+0x114>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d013      	beq.n	800b96c <TIM_Base_SetConfig+0x40>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b94a:	d00f      	beq.n	800b96c <TIM_Base_SetConfig+0x40>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a3d      	ldr	r2, [pc, #244]	; (800ba44 <TIM_Base_SetConfig+0x118>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d00b      	beq.n	800b96c <TIM_Base_SetConfig+0x40>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a3c      	ldr	r2, [pc, #240]	; (800ba48 <TIM_Base_SetConfig+0x11c>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d007      	beq.n	800b96c <TIM_Base_SetConfig+0x40>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a3b      	ldr	r2, [pc, #236]	; (800ba4c <TIM_Base_SetConfig+0x120>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d003      	beq.n	800b96c <TIM_Base_SetConfig+0x40>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a3a      	ldr	r2, [pc, #232]	; (800ba50 <TIM_Base_SetConfig+0x124>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d108      	bne.n	800b97e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4a2f      	ldr	r2, [pc, #188]	; (800ba40 <TIM_Base_SetConfig+0x114>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d02b      	beq.n	800b9de <TIM_Base_SetConfig+0xb2>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b98c:	d027      	beq.n	800b9de <TIM_Base_SetConfig+0xb2>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a2c      	ldr	r2, [pc, #176]	; (800ba44 <TIM_Base_SetConfig+0x118>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d023      	beq.n	800b9de <TIM_Base_SetConfig+0xb2>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a2b      	ldr	r2, [pc, #172]	; (800ba48 <TIM_Base_SetConfig+0x11c>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d01f      	beq.n	800b9de <TIM_Base_SetConfig+0xb2>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a2a      	ldr	r2, [pc, #168]	; (800ba4c <TIM_Base_SetConfig+0x120>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d01b      	beq.n	800b9de <TIM_Base_SetConfig+0xb2>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a29      	ldr	r2, [pc, #164]	; (800ba50 <TIM_Base_SetConfig+0x124>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d017      	beq.n	800b9de <TIM_Base_SetConfig+0xb2>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a28      	ldr	r2, [pc, #160]	; (800ba54 <TIM_Base_SetConfig+0x128>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d013      	beq.n	800b9de <TIM_Base_SetConfig+0xb2>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4a27      	ldr	r2, [pc, #156]	; (800ba58 <TIM_Base_SetConfig+0x12c>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d00f      	beq.n	800b9de <TIM_Base_SetConfig+0xb2>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a26      	ldr	r2, [pc, #152]	; (800ba5c <TIM_Base_SetConfig+0x130>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d00b      	beq.n	800b9de <TIM_Base_SetConfig+0xb2>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a25      	ldr	r2, [pc, #148]	; (800ba60 <TIM_Base_SetConfig+0x134>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d007      	beq.n	800b9de <TIM_Base_SetConfig+0xb2>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a24      	ldr	r2, [pc, #144]	; (800ba64 <TIM_Base_SetConfig+0x138>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d003      	beq.n	800b9de <TIM_Base_SetConfig+0xb2>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a23      	ldr	r2, [pc, #140]	; (800ba68 <TIM_Base_SetConfig+0x13c>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d108      	bne.n	800b9f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	689a      	ldr	r2, [r3, #8]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a0a      	ldr	r2, [pc, #40]	; (800ba40 <TIM_Base_SetConfig+0x114>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d003      	beq.n	800ba24 <TIM_Base_SetConfig+0xf8>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	4a0c      	ldr	r2, [pc, #48]	; (800ba50 <TIM_Base_SetConfig+0x124>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d103      	bne.n	800ba2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	691a      	ldr	r2, [r3, #16]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	615a      	str	r2, [r3, #20]
}
 800ba32:	bf00      	nop
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	40010000 	.word	0x40010000
 800ba44:	40000400 	.word	0x40000400
 800ba48:	40000800 	.word	0x40000800
 800ba4c:	40000c00 	.word	0x40000c00
 800ba50:	40010400 	.word	0x40010400
 800ba54:	40014000 	.word	0x40014000
 800ba58:	40014400 	.word	0x40014400
 800ba5c:	40014800 	.word	0x40014800
 800ba60:	40001800 	.word	0x40001800
 800ba64:	40001c00 	.word	0x40001c00
 800ba68:	40002000 	.word	0x40002000

0800ba6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b087      	sub	sp, #28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6a1b      	ldr	r3, [r3, #32]
 800ba7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6a1b      	ldr	r3, [r3, #32]
 800ba82:	f023 0201 	bic.w	r2, r3, #1
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	699b      	ldr	r3, [r3, #24]
 800ba8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	011b      	lsls	r3, r3, #4
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f023 030a 	bic.w	r3, r3, #10
 800baa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	4313      	orrs	r3, r2
 800bab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	621a      	str	r2, [r3, #32]
}
 800babe:	bf00      	nop
 800bac0:	371c      	adds	r7, #28
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baca:	b480      	push	{r7}
 800bacc:	b087      	sub	sp, #28
 800bace:	af00      	add	r7, sp, #0
 800bad0:	60f8      	str	r0, [r7, #12]
 800bad2:	60b9      	str	r1, [r7, #8]
 800bad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	f023 0210 	bic.w	r2, r3, #16
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6a1b      	ldr	r3, [r3, #32]
 800baec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800baf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	031b      	lsls	r3, r3, #12
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	011b      	lsls	r3, r3, #4
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	693a      	ldr	r2, [r7, #16]
 800bb1c:	621a      	str	r2, [r3, #32]
}
 800bb1e:	bf00      	nop
 800bb20:	371c      	adds	r7, #28
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb2a:	b480      	push	{r7}
 800bb2c:	b085      	sub	sp, #20
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
 800bb32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	f043 0307 	orr.w	r3, r3, #7
 800bb4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	609a      	str	r2, [r3, #8]
}
 800bb54:	bf00      	nop
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b087      	sub	sp, #28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	021a      	lsls	r2, r3, #8
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	431a      	orrs	r2, r3
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	697a      	ldr	r2, [r7, #20]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	609a      	str	r2, [r3, #8]
}
 800bb94:	bf00      	nop
 800bb96:	371c      	adds	r7, #28
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d101      	bne.n	800bbb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	e06d      	b.n	800bc94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a30      	ldr	r2, [pc, #192]	; (800bca0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d004      	beq.n	800bbec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a2f      	ldr	r2, [pc, #188]	; (800bca4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d108      	bne.n	800bbfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bbf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a20      	ldr	r2, [pc, #128]	; (800bca0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d022      	beq.n	800bc68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc2a:	d01d      	beq.n	800bc68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a1d      	ldr	r2, [pc, #116]	; (800bca8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d018      	beq.n	800bc68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a1c      	ldr	r2, [pc, #112]	; (800bcac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d013      	beq.n	800bc68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a1a      	ldr	r2, [pc, #104]	; (800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d00e      	beq.n	800bc68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a15      	ldr	r2, [pc, #84]	; (800bca4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d009      	beq.n	800bc68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a16      	ldr	r2, [pc, #88]	; (800bcb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d004      	beq.n	800bc68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a15      	ldr	r2, [pc, #84]	; (800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d10c      	bne.n	800bc82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	68ba      	ldr	r2, [r7, #8]
 800bc76:	4313      	orrs	r3, r2
 800bc78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	68ba      	ldr	r2, [r7, #8]
 800bc80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2201      	movs	r2, #1
 800bc86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr
 800bca0:	40010000 	.word	0x40010000
 800bca4:	40010400 	.word	0x40010400
 800bca8:	40000400 	.word	0x40000400
 800bcac:	40000800 	.word	0x40000800
 800bcb0:	40000c00 	.word	0x40000c00
 800bcb4:	40014000 	.word	0x40014000
 800bcb8:	40001800 	.word	0x40001800

0800bcbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcc4:	bf00      	nop
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e040      	b.n	800bd8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d106      	bne.n	800bd20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7f9 ff90 	bl	8005c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2224      	movs	r2, #36	; 0x24
 800bd24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f022 0201 	bic.w	r2, r2, #1
 800bd34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f82c 	bl	800bd94 <UART_SetConfig>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d101      	bne.n	800bd46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e022      	b.n	800bd8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fa84 	bl	800c25c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	685a      	ldr	r2, [r3, #4]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	689a      	ldr	r2, [r3, #8]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f042 0201 	orr.w	r2, r2, #1
 800bd82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fb0b 	bl	800c3a0 <UART_CheckIdleState>
 800bd8a:	4603      	mov	r3, r0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3708      	adds	r7, #8
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b088      	sub	sp, #32
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	431a      	orrs	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	69db      	ldr	r3, [r3, #28]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	4ba6      	ldr	r3, [pc, #664]	; (800c058 <UART_SetConfig+0x2c4>)
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	6812      	ldr	r2, [r2, #0]
 800bdc6:	6979      	ldr	r1, [r7, #20]
 800bdc8:	430b      	orrs	r3, r1
 800bdca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	68da      	ldr	r2, [r3, #12]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	430a      	orrs	r2, r1
 800bde0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	697a      	ldr	r2, [r7, #20]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	430a      	orrs	r2, r1
 800be04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a94      	ldr	r2, [pc, #592]	; (800c05c <UART_SetConfig+0x2c8>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d120      	bne.n	800be52 <UART_SetConfig+0xbe>
 800be10:	4b93      	ldr	r3, [pc, #588]	; (800c060 <UART_SetConfig+0x2cc>)
 800be12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be16:	f003 0303 	and.w	r3, r3, #3
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	d816      	bhi.n	800be4c <UART_SetConfig+0xb8>
 800be1e:	a201      	add	r2, pc, #4	; (adr r2, 800be24 <UART_SetConfig+0x90>)
 800be20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be24:	0800be35 	.word	0x0800be35
 800be28:	0800be41 	.word	0x0800be41
 800be2c:	0800be3b 	.word	0x0800be3b
 800be30:	0800be47 	.word	0x0800be47
 800be34:	2301      	movs	r3, #1
 800be36:	77fb      	strb	r3, [r7, #31]
 800be38:	e150      	b.n	800c0dc <UART_SetConfig+0x348>
 800be3a:	2302      	movs	r3, #2
 800be3c:	77fb      	strb	r3, [r7, #31]
 800be3e:	e14d      	b.n	800c0dc <UART_SetConfig+0x348>
 800be40:	2304      	movs	r3, #4
 800be42:	77fb      	strb	r3, [r7, #31]
 800be44:	e14a      	b.n	800c0dc <UART_SetConfig+0x348>
 800be46:	2308      	movs	r3, #8
 800be48:	77fb      	strb	r3, [r7, #31]
 800be4a:	e147      	b.n	800c0dc <UART_SetConfig+0x348>
 800be4c:	2310      	movs	r3, #16
 800be4e:	77fb      	strb	r3, [r7, #31]
 800be50:	e144      	b.n	800c0dc <UART_SetConfig+0x348>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a83      	ldr	r2, [pc, #524]	; (800c064 <UART_SetConfig+0x2d0>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d132      	bne.n	800bec2 <UART_SetConfig+0x12e>
 800be5c:	4b80      	ldr	r3, [pc, #512]	; (800c060 <UART_SetConfig+0x2cc>)
 800be5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be62:	f003 030c 	and.w	r3, r3, #12
 800be66:	2b0c      	cmp	r3, #12
 800be68:	d828      	bhi.n	800bebc <UART_SetConfig+0x128>
 800be6a:	a201      	add	r2, pc, #4	; (adr r2, 800be70 <UART_SetConfig+0xdc>)
 800be6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be70:	0800bea5 	.word	0x0800bea5
 800be74:	0800bebd 	.word	0x0800bebd
 800be78:	0800bebd 	.word	0x0800bebd
 800be7c:	0800bebd 	.word	0x0800bebd
 800be80:	0800beb1 	.word	0x0800beb1
 800be84:	0800bebd 	.word	0x0800bebd
 800be88:	0800bebd 	.word	0x0800bebd
 800be8c:	0800bebd 	.word	0x0800bebd
 800be90:	0800beab 	.word	0x0800beab
 800be94:	0800bebd 	.word	0x0800bebd
 800be98:	0800bebd 	.word	0x0800bebd
 800be9c:	0800bebd 	.word	0x0800bebd
 800bea0:	0800beb7 	.word	0x0800beb7
 800bea4:	2300      	movs	r3, #0
 800bea6:	77fb      	strb	r3, [r7, #31]
 800bea8:	e118      	b.n	800c0dc <UART_SetConfig+0x348>
 800beaa:	2302      	movs	r3, #2
 800beac:	77fb      	strb	r3, [r7, #31]
 800beae:	e115      	b.n	800c0dc <UART_SetConfig+0x348>
 800beb0:	2304      	movs	r3, #4
 800beb2:	77fb      	strb	r3, [r7, #31]
 800beb4:	e112      	b.n	800c0dc <UART_SetConfig+0x348>
 800beb6:	2308      	movs	r3, #8
 800beb8:	77fb      	strb	r3, [r7, #31]
 800beba:	e10f      	b.n	800c0dc <UART_SetConfig+0x348>
 800bebc:	2310      	movs	r3, #16
 800bebe:	77fb      	strb	r3, [r7, #31]
 800bec0:	e10c      	b.n	800c0dc <UART_SetConfig+0x348>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a68      	ldr	r2, [pc, #416]	; (800c068 <UART_SetConfig+0x2d4>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d120      	bne.n	800bf0e <UART_SetConfig+0x17a>
 800becc:	4b64      	ldr	r3, [pc, #400]	; (800c060 <UART_SetConfig+0x2cc>)
 800bece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bed2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bed6:	2b30      	cmp	r3, #48	; 0x30
 800bed8:	d013      	beq.n	800bf02 <UART_SetConfig+0x16e>
 800beda:	2b30      	cmp	r3, #48	; 0x30
 800bedc:	d814      	bhi.n	800bf08 <UART_SetConfig+0x174>
 800bede:	2b20      	cmp	r3, #32
 800bee0:	d009      	beq.n	800bef6 <UART_SetConfig+0x162>
 800bee2:	2b20      	cmp	r3, #32
 800bee4:	d810      	bhi.n	800bf08 <UART_SetConfig+0x174>
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d002      	beq.n	800bef0 <UART_SetConfig+0x15c>
 800beea:	2b10      	cmp	r3, #16
 800beec:	d006      	beq.n	800befc <UART_SetConfig+0x168>
 800beee:	e00b      	b.n	800bf08 <UART_SetConfig+0x174>
 800bef0:	2300      	movs	r3, #0
 800bef2:	77fb      	strb	r3, [r7, #31]
 800bef4:	e0f2      	b.n	800c0dc <UART_SetConfig+0x348>
 800bef6:	2302      	movs	r3, #2
 800bef8:	77fb      	strb	r3, [r7, #31]
 800befa:	e0ef      	b.n	800c0dc <UART_SetConfig+0x348>
 800befc:	2304      	movs	r3, #4
 800befe:	77fb      	strb	r3, [r7, #31]
 800bf00:	e0ec      	b.n	800c0dc <UART_SetConfig+0x348>
 800bf02:	2308      	movs	r3, #8
 800bf04:	77fb      	strb	r3, [r7, #31]
 800bf06:	e0e9      	b.n	800c0dc <UART_SetConfig+0x348>
 800bf08:	2310      	movs	r3, #16
 800bf0a:	77fb      	strb	r3, [r7, #31]
 800bf0c:	e0e6      	b.n	800c0dc <UART_SetConfig+0x348>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a56      	ldr	r2, [pc, #344]	; (800c06c <UART_SetConfig+0x2d8>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d120      	bne.n	800bf5a <UART_SetConfig+0x1c6>
 800bf18:	4b51      	ldr	r3, [pc, #324]	; (800c060 <UART_SetConfig+0x2cc>)
 800bf1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bf22:	2bc0      	cmp	r3, #192	; 0xc0
 800bf24:	d013      	beq.n	800bf4e <UART_SetConfig+0x1ba>
 800bf26:	2bc0      	cmp	r3, #192	; 0xc0
 800bf28:	d814      	bhi.n	800bf54 <UART_SetConfig+0x1c0>
 800bf2a:	2b80      	cmp	r3, #128	; 0x80
 800bf2c:	d009      	beq.n	800bf42 <UART_SetConfig+0x1ae>
 800bf2e:	2b80      	cmp	r3, #128	; 0x80
 800bf30:	d810      	bhi.n	800bf54 <UART_SetConfig+0x1c0>
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d002      	beq.n	800bf3c <UART_SetConfig+0x1a8>
 800bf36:	2b40      	cmp	r3, #64	; 0x40
 800bf38:	d006      	beq.n	800bf48 <UART_SetConfig+0x1b4>
 800bf3a:	e00b      	b.n	800bf54 <UART_SetConfig+0x1c0>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	77fb      	strb	r3, [r7, #31]
 800bf40:	e0cc      	b.n	800c0dc <UART_SetConfig+0x348>
 800bf42:	2302      	movs	r3, #2
 800bf44:	77fb      	strb	r3, [r7, #31]
 800bf46:	e0c9      	b.n	800c0dc <UART_SetConfig+0x348>
 800bf48:	2304      	movs	r3, #4
 800bf4a:	77fb      	strb	r3, [r7, #31]
 800bf4c:	e0c6      	b.n	800c0dc <UART_SetConfig+0x348>
 800bf4e:	2308      	movs	r3, #8
 800bf50:	77fb      	strb	r3, [r7, #31]
 800bf52:	e0c3      	b.n	800c0dc <UART_SetConfig+0x348>
 800bf54:	2310      	movs	r3, #16
 800bf56:	77fb      	strb	r3, [r7, #31]
 800bf58:	e0c0      	b.n	800c0dc <UART_SetConfig+0x348>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a44      	ldr	r2, [pc, #272]	; (800c070 <UART_SetConfig+0x2dc>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d125      	bne.n	800bfb0 <UART_SetConfig+0x21c>
 800bf64:	4b3e      	ldr	r3, [pc, #248]	; (800c060 <UART_SetConfig+0x2cc>)
 800bf66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf72:	d017      	beq.n	800bfa4 <UART_SetConfig+0x210>
 800bf74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf78:	d817      	bhi.n	800bfaa <UART_SetConfig+0x216>
 800bf7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf7e:	d00b      	beq.n	800bf98 <UART_SetConfig+0x204>
 800bf80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf84:	d811      	bhi.n	800bfaa <UART_SetConfig+0x216>
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d003      	beq.n	800bf92 <UART_SetConfig+0x1fe>
 800bf8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf8e:	d006      	beq.n	800bf9e <UART_SetConfig+0x20a>
 800bf90:	e00b      	b.n	800bfaa <UART_SetConfig+0x216>
 800bf92:	2300      	movs	r3, #0
 800bf94:	77fb      	strb	r3, [r7, #31]
 800bf96:	e0a1      	b.n	800c0dc <UART_SetConfig+0x348>
 800bf98:	2302      	movs	r3, #2
 800bf9a:	77fb      	strb	r3, [r7, #31]
 800bf9c:	e09e      	b.n	800c0dc <UART_SetConfig+0x348>
 800bf9e:	2304      	movs	r3, #4
 800bfa0:	77fb      	strb	r3, [r7, #31]
 800bfa2:	e09b      	b.n	800c0dc <UART_SetConfig+0x348>
 800bfa4:	2308      	movs	r3, #8
 800bfa6:	77fb      	strb	r3, [r7, #31]
 800bfa8:	e098      	b.n	800c0dc <UART_SetConfig+0x348>
 800bfaa:	2310      	movs	r3, #16
 800bfac:	77fb      	strb	r3, [r7, #31]
 800bfae:	e095      	b.n	800c0dc <UART_SetConfig+0x348>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a2f      	ldr	r2, [pc, #188]	; (800c074 <UART_SetConfig+0x2e0>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d125      	bne.n	800c006 <UART_SetConfig+0x272>
 800bfba:	4b29      	ldr	r3, [pc, #164]	; (800c060 <UART_SetConfig+0x2cc>)
 800bfbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bfc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bfc8:	d017      	beq.n	800bffa <UART_SetConfig+0x266>
 800bfca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bfce:	d817      	bhi.n	800c000 <UART_SetConfig+0x26c>
 800bfd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfd4:	d00b      	beq.n	800bfee <UART_SetConfig+0x25a>
 800bfd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfda:	d811      	bhi.n	800c000 <UART_SetConfig+0x26c>
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d003      	beq.n	800bfe8 <UART_SetConfig+0x254>
 800bfe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfe4:	d006      	beq.n	800bff4 <UART_SetConfig+0x260>
 800bfe6:	e00b      	b.n	800c000 <UART_SetConfig+0x26c>
 800bfe8:	2301      	movs	r3, #1
 800bfea:	77fb      	strb	r3, [r7, #31]
 800bfec:	e076      	b.n	800c0dc <UART_SetConfig+0x348>
 800bfee:	2302      	movs	r3, #2
 800bff0:	77fb      	strb	r3, [r7, #31]
 800bff2:	e073      	b.n	800c0dc <UART_SetConfig+0x348>
 800bff4:	2304      	movs	r3, #4
 800bff6:	77fb      	strb	r3, [r7, #31]
 800bff8:	e070      	b.n	800c0dc <UART_SetConfig+0x348>
 800bffa:	2308      	movs	r3, #8
 800bffc:	77fb      	strb	r3, [r7, #31]
 800bffe:	e06d      	b.n	800c0dc <UART_SetConfig+0x348>
 800c000:	2310      	movs	r3, #16
 800c002:	77fb      	strb	r3, [r7, #31]
 800c004:	e06a      	b.n	800c0dc <UART_SetConfig+0x348>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a1b      	ldr	r2, [pc, #108]	; (800c078 <UART_SetConfig+0x2e4>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d138      	bne.n	800c082 <UART_SetConfig+0x2ee>
 800c010:	4b13      	ldr	r3, [pc, #76]	; (800c060 <UART_SetConfig+0x2cc>)
 800c012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c016:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c01a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c01e:	d017      	beq.n	800c050 <UART_SetConfig+0x2bc>
 800c020:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c024:	d82a      	bhi.n	800c07c <UART_SetConfig+0x2e8>
 800c026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c02a:	d00b      	beq.n	800c044 <UART_SetConfig+0x2b0>
 800c02c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c030:	d824      	bhi.n	800c07c <UART_SetConfig+0x2e8>
 800c032:	2b00      	cmp	r3, #0
 800c034:	d003      	beq.n	800c03e <UART_SetConfig+0x2aa>
 800c036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c03a:	d006      	beq.n	800c04a <UART_SetConfig+0x2b6>
 800c03c:	e01e      	b.n	800c07c <UART_SetConfig+0x2e8>
 800c03e:	2300      	movs	r3, #0
 800c040:	77fb      	strb	r3, [r7, #31]
 800c042:	e04b      	b.n	800c0dc <UART_SetConfig+0x348>
 800c044:	2302      	movs	r3, #2
 800c046:	77fb      	strb	r3, [r7, #31]
 800c048:	e048      	b.n	800c0dc <UART_SetConfig+0x348>
 800c04a:	2304      	movs	r3, #4
 800c04c:	77fb      	strb	r3, [r7, #31]
 800c04e:	e045      	b.n	800c0dc <UART_SetConfig+0x348>
 800c050:	2308      	movs	r3, #8
 800c052:	77fb      	strb	r3, [r7, #31]
 800c054:	e042      	b.n	800c0dc <UART_SetConfig+0x348>
 800c056:	bf00      	nop
 800c058:	efff69f3 	.word	0xefff69f3
 800c05c:	40011000 	.word	0x40011000
 800c060:	40023800 	.word	0x40023800
 800c064:	40004400 	.word	0x40004400
 800c068:	40004800 	.word	0x40004800
 800c06c:	40004c00 	.word	0x40004c00
 800c070:	40005000 	.word	0x40005000
 800c074:	40011400 	.word	0x40011400
 800c078:	40007800 	.word	0x40007800
 800c07c:	2310      	movs	r3, #16
 800c07e:	77fb      	strb	r3, [r7, #31]
 800c080:	e02c      	b.n	800c0dc <UART_SetConfig+0x348>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a72      	ldr	r2, [pc, #456]	; (800c250 <UART_SetConfig+0x4bc>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d125      	bne.n	800c0d8 <UART_SetConfig+0x344>
 800c08c:	4b71      	ldr	r3, [pc, #452]	; (800c254 <UART_SetConfig+0x4c0>)
 800c08e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c092:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c096:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c09a:	d017      	beq.n	800c0cc <UART_SetConfig+0x338>
 800c09c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c0a0:	d817      	bhi.n	800c0d2 <UART_SetConfig+0x33e>
 800c0a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0a6:	d00b      	beq.n	800c0c0 <UART_SetConfig+0x32c>
 800c0a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0ac:	d811      	bhi.n	800c0d2 <UART_SetConfig+0x33e>
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d003      	beq.n	800c0ba <UART_SetConfig+0x326>
 800c0b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0b6:	d006      	beq.n	800c0c6 <UART_SetConfig+0x332>
 800c0b8:	e00b      	b.n	800c0d2 <UART_SetConfig+0x33e>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	77fb      	strb	r3, [r7, #31]
 800c0be:	e00d      	b.n	800c0dc <UART_SetConfig+0x348>
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	77fb      	strb	r3, [r7, #31]
 800c0c4:	e00a      	b.n	800c0dc <UART_SetConfig+0x348>
 800c0c6:	2304      	movs	r3, #4
 800c0c8:	77fb      	strb	r3, [r7, #31]
 800c0ca:	e007      	b.n	800c0dc <UART_SetConfig+0x348>
 800c0cc:	2308      	movs	r3, #8
 800c0ce:	77fb      	strb	r3, [r7, #31]
 800c0d0:	e004      	b.n	800c0dc <UART_SetConfig+0x348>
 800c0d2:	2310      	movs	r3, #16
 800c0d4:	77fb      	strb	r3, [r7, #31]
 800c0d6:	e001      	b.n	800c0dc <UART_SetConfig+0x348>
 800c0d8:	2310      	movs	r3, #16
 800c0da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	69db      	ldr	r3, [r3, #28]
 800c0e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0e4:	d15b      	bne.n	800c19e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c0e6:	7ffb      	ldrb	r3, [r7, #31]
 800c0e8:	2b08      	cmp	r3, #8
 800c0ea:	d828      	bhi.n	800c13e <UART_SetConfig+0x3aa>
 800c0ec:	a201      	add	r2, pc, #4	; (adr r2, 800c0f4 <UART_SetConfig+0x360>)
 800c0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f2:	bf00      	nop
 800c0f4:	0800c119 	.word	0x0800c119
 800c0f8:	0800c121 	.word	0x0800c121
 800c0fc:	0800c129 	.word	0x0800c129
 800c100:	0800c13f 	.word	0x0800c13f
 800c104:	0800c12f 	.word	0x0800c12f
 800c108:	0800c13f 	.word	0x0800c13f
 800c10c:	0800c13f 	.word	0x0800c13f
 800c110:	0800c13f 	.word	0x0800c13f
 800c114:	0800c137 	.word	0x0800c137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c118:	f7fd ffca 	bl	800a0b0 <HAL_RCC_GetPCLK1Freq>
 800c11c:	61b8      	str	r0, [r7, #24]
        break;
 800c11e:	e013      	b.n	800c148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c120:	f7fd ffda 	bl	800a0d8 <HAL_RCC_GetPCLK2Freq>
 800c124:	61b8      	str	r0, [r7, #24]
        break;
 800c126:	e00f      	b.n	800c148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c128:	4b4b      	ldr	r3, [pc, #300]	; (800c258 <UART_SetConfig+0x4c4>)
 800c12a:	61bb      	str	r3, [r7, #24]
        break;
 800c12c:	e00c      	b.n	800c148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c12e:	f7fd feed 	bl	8009f0c <HAL_RCC_GetSysClockFreq>
 800c132:	61b8      	str	r0, [r7, #24]
        break;
 800c134:	e008      	b.n	800c148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c13a:	61bb      	str	r3, [r7, #24]
        break;
 800c13c:	e004      	b.n	800c148 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c13e:	2300      	movs	r3, #0
 800c140:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	77bb      	strb	r3, [r7, #30]
        break;
 800c146:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d074      	beq.n	800c238 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	005a      	lsls	r2, r3, #1
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	085b      	lsrs	r3, r3, #1
 800c158:	441a      	add	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c162:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	2b0f      	cmp	r3, #15
 800c168:	d916      	bls.n	800c198 <UART_SetConfig+0x404>
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c170:	d212      	bcs.n	800c198 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	b29b      	uxth	r3, r3
 800c176:	f023 030f 	bic.w	r3, r3, #15
 800c17a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	085b      	lsrs	r3, r3, #1
 800c180:	b29b      	uxth	r3, r3
 800c182:	f003 0307 	and.w	r3, r3, #7
 800c186:	b29a      	uxth	r2, r3
 800c188:	89fb      	ldrh	r3, [r7, #14]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	89fa      	ldrh	r2, [r7, #14]
 800c194:	60da      	str	r2, [r3, #12]
 800c196:	e04f      	b.n	800c238 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c198:	2301      	movs	r3, #1
 800c19a:	77bb      	strb	r3, [r7, #30]
 800c19c:	e04c      	b.n	800c238 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c19e:	7ffb      	ldrb	r3, [r7, #31]
 800c1a0:	2b08      	cmp	r3, #8
 800c1a2:	d828      	bhi.n	800c1f6 <UART_SetConfig+0x462>
 800c1a4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ac <UART_SetConfig+0x418>)
 800c1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1aa:	bf00      	nop
 800c1ac:	0800c1d1 	.word	0x0800c1d1
 800c1b0:	0800c1d9 	.word	0x0800c1d9
 800c1b4:	0800c1e1 	.word	0x0800c1e1
 800c1b8:	0800c1f7 	.word	0x0800c1f7
 800c1bc:	0800c1e7 	.word	0x0800c1e7
 800c1c0:	0800c1f7 	.word	0x0800c1f7
 800c1c4:	0800c1f7 	.word	0x0800c1f7
 800c1c8:	0800c1f7 	.word	0x0800c1f7
 800c1cc:	0800c1ef 	.word	0x0800c1ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1d0:	f7fd ff6e 	bl	800a0b0 <HAL_RCC_GetPCLK1Freq>
 800c1d4:	61b8      	str	r0, [r7, #24]
        break;
 800c1d6:	e013      	b.n	800c200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1d8:	f7fd ff7e 	bl	800a0d8 <HAL_RCC_GetPCLK2Freq>
 800c1dc:	61b8      	str	r0, [r7, #24]
        break;
 800c1de:	e00f      	b.n	800c200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1e0:	4b1d      	ldr	r3, [pc, #116]	; (800c258 <UART_SetConfig+0x4c4>)
 800c1e2:	61bb      	str	r3, [r7, #24]
        break;
 800c1e4:	e00c      	b.n	800c200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1e6:	f7fd fe91 	bl	8009f0c <HAL_RCC_GetSysClockFreq>
 800c1ea:	61b8      	str	r0, [r7, #24]
        break;
 800c1ec:	e008      	b.n	800c200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1f2:	61bb      	str	r3, [r7, #24]
        break;
 800c1f4:	e004      	b.n	800c200 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	77bb      	strb	r3, [r7, #30]
        break;
 800c1fe:	bf00      	nop
    }

    if (pclk != 0U)
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d018      	beq.n	800c238 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	085a      	lsrs	r2, r3, #1
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	441a      	add	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	fbb2 f3f3 	udiv	r3, r2, r3
 800c218:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	2b0f      	cmp	r3, #15
 800c21e:	d909      	bls.n	800c234 <UART_SetConfig+0x4a0>
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c226:	d205      	bcs.n	800c234 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	60da      	str	r2, [r3, #12]
 800c232:	e001      	b.n	800c238 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800c244:	7fbb      	ldrb	r3, [r7, #30]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3720      	adds	r7, #32
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	40007c00 	.word	0x40007c00
 800c254:	40023800 	.word	0x40023800
 800c258:	00f42400 	.word	0x00f42400

0800c25c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00a      	beq.n	800c286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	430a      	orrs	r2, r1
 800c284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28a:	f003 0302 	and.w	r3, r3, #2
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00a      	beq.n	800c2a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ac:	f003 0304 	and.w	r3, r3, #4
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00a      	beq.n	800c2ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ce:	f003 0308 	and.w	r3, r3, #8
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00a      	beq.n	800c2ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	430a      	orrs	r2, r1
 800c2ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f0:	f003 0310 	and.w	r3, r3, #16
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00a      	beq.n	800c30e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	430a      	orrs	r2, r1
 800c30c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c312:	f003 0320 	and.w	r3, r3, #32
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00a      	beq.n	800c330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	430a      	orrs	r2, r1
 800c32e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d01a      	beq.n	800c372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	430a      	orrs	r2, r1
 800c350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c35a:	d10a      	bne.n	800c372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	430a      	orrs	r2, r1
 800c370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00a      	beq.n	800c394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	430a      	orrs	r2, r1
 800c392:	605a      	str	r2, [r3, #4]
  }
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af02      	add	r7, sp, #8
 800c3a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3b0:	f7f9 fda0 	bl	8005ef4 <HAL_GetTick>
 800c3b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f003 0308 	and.w	r3, r3, #8
 800c3c0:	2b08      	cmp	r3, #8
 800c3c2:	d10e      	bne.n	800c3e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f81b 	bl	800c40e <UART_WaitOnFlagUntilTimeout>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3de:	2303      	movs	r3, #3
 800c3e0:	e011      	b.n	800c406 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2220      	movs	r2, #32
 800c3e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2220      	movs	r2, #32
 800c3ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b09c      	sub	sp, #112	; 0x70
 800c412:	af00      	add	r7, sp, #0
 800c414:	60f8      	str	r0, [r7, #12]
 800c416:	60b9      	str	r1, [r7, #8]
 800c418:	603b      	str	r3, [r7, #0]
 800c41a:	4613      	mov	r3, r2
 800c41c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c41e:	e0a7      	b.n	800c570 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c426:	f000 80a3 	beq.w	800c570 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c42a:	f7f9 fd63 	bl	8005ef4 <HAL_GetTick>
 800c42e:	4602      	mov	r2, r0
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c436:	429a      	cmp	r2, r3
 800c438:	d302      	bcc.n	800c440 <UART_WaitOnFlagUntilTimeout+0x32>
 800c43a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d13f      	bne.n	800c4c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c448:	e853 3f00 	ldrex	r3, [r3]
 800c44c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c44e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c450:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c454:	667b      	str	r3, [r7, #100]	; 0x64
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c45e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c460:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c462:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c464:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c466:	e841 2300 	strex	r3, r2, [r1]
 800c46a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c46c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d1e6      	bne.n	800c440 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3308      	adds	r3, #8
 800c478:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c47c:	e853 3f00 	ldrex	r3, [r3]
 800c480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c484:	f023 0301 	bic.w	r3, r3, #1
 800c488:	663b      	str	r3, [r7, #96]	; 0x60
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	3308      	adds	r3, #8
 800c490:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c492:	64ba      	str	r2, [r7, #72]	; 0x48
 800c494:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c49a:	e841 2300 	strex	r3, r2, [r1]
 800c49e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c4a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1e5      	bne.n	800c472 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2220      	movs	r2, #32
 800c4aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2220      	movs	r2, #32
 800c4b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800c4bc:	2303      	movs	r3, #3
 800c4be:	e068      	b.n	800c592 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 0304 	and.w	r3, r3, #4
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d050      	beq.n	800c570 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	69db      	ldr	r3, [r3, #28]
 800c4d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4dc:	d148      	bne.n	800c570 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f0:	e853 3f00 	ldrex	r3, [r3]
 800c4f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c4fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c506:	637b      	str	r3, [r7, #52]	; 0x34
 800c508:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c50c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c50e:	e841 2300 	strex	r3, r2, [r1]
 800c512:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1e6      	bne.n	800c4e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	3308      	adds	r3, #8
 800c520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	e853 3f00 	ldrex	r3, [r3]
 800c528:	613b      	str	r3, [r7, #16]
   return(result);
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f023 0301 	bic.w	r3, r3, #1
 800c530:	66bb      	str	r3, [r7, #104]	; 0x68
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3308      	adds	r3, #8
 800c538:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c53a:	623a      	str	r2, [r7, #32]
 800c53c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53e:	69f9      	ldr	r1, [r7, #28]
 800c540:	6a3a      	ldr	r2, [r7, #32]
 800c542:	e841 2300 	strex	r3, r2, [r1]
 800c546:	61bb      	str	r3, [r7, #24]
   return(result);
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1e5      	bne.n	800c51a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2220      	movs	r2, #32
 800c552:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2220      	movs	r2, #32
 800c558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2220      	movs	r2, #32
 800c560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e010      	b.n	800c592 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	69da      	ldr	r2, [r3, #28]
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	4013      	ands	r3, r2
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	bf0c      	ite	eq
 800c580:	2301      	moveq	r3, #1
 800c582:	2300      	movne	r3, #0
 800c584:	b2db      	uxtb	r3, r3
 800c586:	461a      	mov	r2, r3
 800c588:	79fb      	ldrb	r3, [r7, #7]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	f43f af48 	beq.w	800c420 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3770      	adds	r7, #112	; 0x70
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d121      	bne.n	800c5f2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	4b27      	ldr	r3, [pc, #156]	; (800c650 <FMC_SDRAM_Init+0xb4>)
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	683a      	ldr	r2, [r7, #0]
 800c5b8:	6851      	ldr	r1, [r2, #4]
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	6892      	ldr	r2, [r2, #8]
 800c5be:	4311      	orrs	r1, r2
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	68d2      	ldr	r2, [r2, #12]
 800c5c4:	4311      	orrs	r1, r2
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	6912      	ldr	r2, [r2, #16]
 800c5ca:	4311      	orrs	r1, r2
 800c5cc:	683a      	ldr	r2, [r7, #0]
 800c5ce:	6952      	ldr	r2, [r2, #20]
 800c5d0:	4311      	orrs	r1, r2
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	6992      	ldr	r2, [r2, #24]
 800c5d6:	4311      	orrs	r1, r2
 800c5d8:	683a      	ldr	r2, [r7, #0]
 800c5da:	69d2      	ldr	r2, [r2, #28]
 800c5dc:	4311      	orrs	r1, r2
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	6a12      	ldr	r2, [r2, #32]
 800c5e2:	4311      	orrs	r1, r2
 800c5e4:	683a      	ldr	r2, [r7, #0]
 800c5e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c5e8:	430a      	orrs	r2, r1
 800c5ea:	431a      	orrs	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	e026      	b.n	800c640 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	69d9      	ldr	r1, [r3, #28]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	4319      	orrs	r1, r3
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c608:	430b      	orrs	r3, r1
 800c60a:	431a      	orrs	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685a      	ldr	r2, [r3, #4]
 800c614:	4b0e      	ldr	r3, [pc, #56]	; (800c650 <FMC_SDRAM_Init+0xb4>)
 800c616:	4013      	ands	r3, r2
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	6851      	ldr	r1, [r2, #4]
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	6892      	ldr	r2, [r2, #8]
 800c620:	4311      	orrs	r1, r2
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	68d2      	ldr	r2, [r2, #12]
 800c626:	4311      	orrs	r1, r2
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	6912      	ldr	r2, [r2, #16]
 800c62c:	4311      	orrs	r1, r2
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	6952      	ldr	r2, [r2, #20]
 800c632:	4311      	orrs	r1, r2
 800c634:	683a      	ldr	r2, [r7, #0]
 800c636:	6992      	ldr	r2, [r2, #24]
 800c638:	430a      	orrs	r2, r1
 800c63a:	431a      	orrs	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	ffff8000 	.word	0xffff8000

0800c654 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d128      	bne.n	800c6b8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	1e59      	subs	r1, r3, #1
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	3b01      	subs	r3, #1
 800c67a:	011b      	lsls	r3, r3, #4
 800c67c:	4319      	orrs	r1, r3
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	3b01      	subs	r3, #1
 800c684:	021b      	lsls	r3, r3, #8
 800c686:	4319      	orrs	r1, r3
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	3b01      	subs	r3, #1
 800c68e:	031b      	lsls	r3, r3, #12
 800c690:	4319      	orrs	r1, r3
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	3b01      	subs	r3, #1
 800c698:	041b      	lsls	r3, r3, #16
 800c69a:	4319      	orrs	r1, r3
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	695b      	ldr	r3, [r3, #20]
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	051b      	lsls	r3, r3, #20
 800c6a4:	4319      	orrs	r1, r3
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	061b      	lsls	r3, r3, #24
 800c6ae:	430b      	orrs	r3, r1
 800c6b0:	431a      	orrs	r2, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	609a      	str	r2, [r3, #8]
 800c6b6:	e02d      	b.n	800c714 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	689a      	ldr	r2, [r3, #8]
 800c6bc:	4b19      	ldr	r3, [pc, #100]	; (800c724 <FMC_SDRAM_Timing_Init+0xd0>)
 800c6be:	4013      	ands	r3, r2
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	68d2      	ldr	r2, [r2, #12]
 800c6c4:	3a01      	subs	r2, #1
 800c6c6:	0311      	lsls	r1, r2, #12
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	6952      	ldr	r2, [r2, #20]
 800c6cc:	3a01      	subs	r2, #1
 800c6ce:	0512      	lsls	r2, r2, #20
 800c6d0:	430a      	orrs	r2, r1
 800c6d2:	431a      	orrs	r2, r3
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	1e59      	subs	r1, r3, #1
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	011b      	lsls	r3, r3, #4
 800c6ee:	4319      	orrs	r1, r3
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	021b      	lsls	r3, r3, #8
 800c6f8:	4319      	orrs	r1, r3
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	3b01      	subs	r3, #1
 800c700:	041b      	lsls	r3, r3, #16
 800c702:	4319      	orrs	r1, r3
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	3b01      	subs	r3, #1
 800c70a:	061b      	lsls	r3, r3, #24
 800c70c:	430b      	orrs	r3, r1
 800c70e:	431a      	orrs	r2, r3
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	ff0f0fff 	.word	0xff0f0fff

0800c728 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	691a      	ldr	r2, [r3, #16]
 800c738:	4b0c      	ldr	r3, [pc, #48]	; (800c76c <FMC_SDRAM_SendCommand+0x44>)
 800c73a:	4013      	ands	r3, r2
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	6811      	ldr	r1, [r2, #0]
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	6852      	ldr	r2, [r2, #4]
 800c744:	4311      	orrs	r1, r2
 800c746:	68ba      	ldr	r2, [r7, #8]
 800c748:	6892      	ldr	r2, [r2, #8]
 800c74a:	3a01      	subs	r2, #1
 800c74c:	0152      	lsls	r2, r2, #5
 800c74e:	4311      	orrs	r1, r2
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	68d2      	ldr	r2, [r2, #12]
 800c754:	0252      	lsls	r2, r2, #9
 800c756:	430a      	orrs	r2, r1
 800c758:	431a      	orrs	r2, r3
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c75e:	2300      	movs	r3, #0
}
 800c760:	4618      	mov	r0, r3
 800c762:	3714      	adds	r7, #20
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	ffc00000 	.word	0xffc00000

0800c770 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	695a      	ldr	r2, [r3, #20]
 800c77e:	4b07      	ldr	r3, [pc, #28]	; (800c79c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c780:	4013      	ands	r3, r2
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	0052      	lsls	r2, r2, #1
 800c786:	431a      	orrs	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	370c      	adds	r7, #12
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	ffffc001 	.word	0xffffc001

0800c7a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c7ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7b2:	2b84      	cmp	r3, #132	; 0x84
 800c7b4:	d005      	beq.n	800c7c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c7b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	4413      	add	r3, r2
 800c7be:	3303      	adds	r3, #3
 800c7c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c7d4:	f000 fff6 	bl	800d7c4 <vTaskStartScheduler>
  
  return osOK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c7de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7e0:	b089      	sub	sp, #36	; 0x24
 800c7e2:	af04      	add	r7, sp, #16
 800c7e4:	6078      	str	r0, [r7, #4]
 800c7e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	695b      	ldr	r3, [r3, #20]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d020      	beq.n	800c832 <osThreadCreate+0x54>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	699b      	ldr	r3, [r3, #24]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d01c      	beq.n	800c832 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	685c      	ldr	r4, [r3, #4]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681d      	ldr	r5, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	691e      	ldr	r6, [r3, #16]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7ff ffc8 	bl	800c7a0 <makeFreeRtosPriority>
 800c810:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c81a:	9202      	str	r2, [sp, #8]
 800c81c:	9301      	str	r3, [sp, #4]
 800c81e:	9100      	str	r1, [sp, #0]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	4632      	mov	r2, r6
 800c824:	4629      	mov	r1, r5
 800c826:	4620      	mov	r0, r4
 800c828:	f000 fd60 	bl	800d2ec <xTaskCreateStatic>
 800c82c:	4603      	mov	r3, r0
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	e01c      	b.n	800c86c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	685c      	ldr	r4, [r3, #4]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c83e:	b29e      	uxth	r6, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c846:	4618      	mov	r0, r3
 800c848:	f7ff ffaa 	bl	800c7a0 <makeFreeRtosPriority>
 800c84c:	4602      	mov	r2, r0
 800c84e:	f107 030c 	add.w	r3, r7, #12
 800c852:	9301      	str	r3, [sp, #4]
 800c854:	9200      	str	r2, [sp, #0]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	4632      	mov	r2, r6
 800c85a:	4629      	mov	r1, r5
 800c85c:	4620      	mov	r0, r4
 800c85e:	f000 fda8 	bl	800d3b2 <xTaskCreate>
 800c862:	4603      	mov	r3, r0
 800c864:	2b01      	cmp	r3, #1
 800c866:	d001      	beq.n	800c86c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c868:	2300      	movs	r3, #0
 800c86a:	e000      	b.n	800c86e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c86c:	68fb      	ldr	r3, [r7, #12]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3714      	adds	r7, #20
 800c872:	46bd      	mov	sp, r7
 800c874:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c876 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b084      	sub	sp, #16
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <osDelay+0x16>
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	e000      	b.n	800c88e <osDelay+0x18>
 800c88c:	2301      	movs	r3, #1
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 ff62 	bl	800d758 <vTaskDelay>
  
  return osOK;
 800c894:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c896:	4618      	mov	r0, r3
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c89e:	b590      	push	{r4, r7, lr}
 800c8a0:	b085      	sub	sp, #20
 800c8a2:	af02      	add	r7, sp, #8
 800c8a4:	6078      	str	r0, [r7, #4]
 800c8a6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d011      	beq.n	800c8d4 <osMessageCreate+0x36>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d00d      	beq.n	800c8d4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6818      	ldr	r0, [r3, #0]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6859      	ldr	r1, [r3, #4]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	689a      	ldr	r2, [r3, #8]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	2400      	movs	r4, #0
 800c8ca:	9400      	str	r4, [sp, #0]
 800c8cc:	f000 f92e 	bl	800cb2c <xQueueGenericCreateStatic>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	e008      	b.n	800c8e6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6818      	ldr	r0, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	4619      	mov	r1, r3
 800c8e0:	f000 f9a6 	bl	800cc30 <xQueueGenericCreate>
 800c8e4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	370c      	adds	r7, #12
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd90      	pop	{r4, r7, pc}

0800c8ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b083      	sub	sp, #12
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f103 0208 	add.w	r2, r3, #8
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c906:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f103 0208 	add.w	r2, r3, #8
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f103 0208 	add.w	r2, r3, #8
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c922:	bf00      	nop
 800c924:	370c      	adds	r7, #12
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c92e:	b480      	push	{r7}
 800c930:	b083      	sub	sp, #12
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c93c:	bf00      	nop
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	689a      	ldr	r2, [r3, #8]
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	1c5a      	adds	r2, r3, #1
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	601a      	str	r2, [r3, #0]
}
 800c984:	bf00      	nop
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9a6:	d103      	bne.n	800c9b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	60fb      	str	r3, [r7, #12]
 800c9ae:	e00c      	b.n	800c9ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	60fb      	str	r3, [r7, #12]
 800c9b6:	e002      	b.n	800c9be <vListInsert+0x2e>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	60fb      	str	r3, [r7, #12]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d2f6      	bcs.n	800c9b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	685a      	ldr	r2, [r3, #4]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	1c5a      	adds	r2, r3, #1
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	601a      	str	r2, [r3, #0]
}
 800c9f6:	bf00      	nop
 800c9f8:	3714      	adds	r7, #20
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ca02:	b480      	push	{r7}
 800ca04:	b085      	sub	sp, #20
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	6892      	ldr	r2, [r2, #8]
 800ca18:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	6852      	ldr	r2, [r2, #4]
 800ca22:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d103      	bne.n	800ca36 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	689a      	ldr	r2, [r3, #8]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	1e5a      	subs	r2, r3, #1
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
	...

0800ca58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10c      	bne.n	800ca86 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	b672      	cpsid	i
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	b662      	cpsie	i
 800ca80:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ca82:	bf00      	nop
 800ca84:	e7fe      	b.n	800ca84 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ca86:	f001 fcf1 	bl	800e46c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca92:	68f9      	ldr	r1, [r7, #12]
 800ca94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca96:	fb01 f303 	mul.w	r3, r1, r3
 800ca9a:	441a      	add	r2, r3
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2200      	movs	r2, #0
 800caa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab6:	3b01      	subs	r3, #1
 800cab8:	68f9      	ldr	r1, [r7, #12]
 800caba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cabc:	fb01 f303 	mul.w	r3, r1, r3
 800cac0:	441a      	add	r2, r3
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	22ff      	movs	r2, #255	; 0xff
 800caca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	22ff      	movs	r2, #255	; 0xff
 800cad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d114      	bne.n	800cb06 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d01a      	beq.n	800cb1a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	3310      	adds	r3, #16
 800cae8:	4618      	mov	r0, r3
 800caea:	f001 f8d9 	bl	800dca0 <xTaskRemoveFromEventList>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d012      	beq.n	800cb1a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800caf4:	4b0c      	ldr	r3, [pc, #48]	; (800cb28 <xQueueGenericReset+0xd0>)
 800caf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	e009      	b.n	800cb1a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3310      	adds	r3, #16
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7ff feef 	bl	800c8ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	3324      	adds	r3, #36	; 0x24
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7ff feea 	bl	800c8ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cb1a:	f001 fcdb 	bl	800e4d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cb1e:	2301      	movs	r3, #1
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3710      	adds	r7, #16
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	e000ed04 	.word	0xe000ed04

0800cb2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b08e      	sub	sp, #56	; 0x38
 800cb30:	af02      	add	r7, sp, #8
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
 800cb38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10c      	bne.n	800cb5a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	b672      	cpsid	i
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	b662      	cpsie	i
 800cb54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb56:	bf00      	nop
 800cb58:	e7fe      	b.n	800cb58 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10c      	bne.n	800cb7a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb64:	b672      	cpsid	i
 800cb66:	f383 8811 	msr	BASEPRI, r3
 800cb6a:	f3bf 8f6f 	isb	sy
 800cb6e:	f3bf 8f4f 	dsb	sy
 800cb72:	b662      	cpsie	i
 800cb74:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d002      	beq.n	800cb86 <xQueueGenericCreateStatic+0x5a>
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <xQueueGenericCreateStatic+0x5e>
 800cb86:	2301      	movs	r3, #1
 800cb88:	e000      	b.n	800cb8c <xQueueGenericCreateStatic+0x60>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10c      	bne.n	800cbaa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	b672      	cpsid	i
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	b662      	cpsie	i
 800cba4:	623b      	str	r3, [r7, #32]
}
 800cba6:	bf00      	nop
 800cba8:	e7fe      	b.n	800cba8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d102      	bne.n	800cbb6 <xQueueGenericCreateStatic+0x8a>
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d101      	bne.n	800cbba <xQueueGenericCreateStatic+0x8e>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e000      	b.n	800cbbc <xQueueGenericCreateStatic+0x90>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d10c      	bne.n	800cbda <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc4:	b672      	cpsid	i
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	b662      	cpsie	i
 800cbd4:	61fb      	str	r3, [r7, #28]
}
 800cbd6:	bf00      	nop
 800cbd8:	e7fe      	b.n	800cbd8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cbda:	2348      	movs	r3, #72	; 0x48
 800cbdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	2b48      	cmp	r3, #72	; 0x48
 800cbe2:	d00c      	beq.n	800cbfe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800cbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe8:	b672      	cpsid	i
 800cbea:	f383 8811 	msr	BASEPRI, r3
 800cbee:	f3bf 8f6f 	isb	sy
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	b662      	cpsie	i
 800cbf8:	61bb      	str	r3, [r7, #24]
}
 800cbfa:	bf00      	nop
 800cbfc:	e7fe      	b.n	800cbfc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cbfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00d      	beq.n	800cc26 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	68b9      	ldr	r1, [r7, #8]
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f000 f847 	bl	800ccb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3730      	adds	r7, #48	; 0x30
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b08a      	sub	sp, #40	; 0x28
 800cc34:	af02      	add	r7, sp, #8
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10c      	bne.n	800cc5e <xQueueGenericCreate+0x2e>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc48:	b672      	cpsid	i
 800cc4a:	f383 8811 	msr	BASEPRI, r3
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	b662      	cpsie	i
 800cc58:	613b      	str	r3, [r7, #16]
}
 800cc5a:	bf00      	nop
 800cc5c:	e7fe      	b.n	800cc5c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d102      	bne.n	800cc6a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cc64:	2300      	movs	r3, #0
 800cc66:	61fb      	str	r3, [r7, #28]
 800cc68:	e004      	b.n	800cc74 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	fb02 f303 	mul.w	r3, r2, r3
 800cc72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	3348      	adds	r3, #72	; 0x48
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f001 fcdf 	bl	800e63c <pvPortMalloc>
 800cc7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d011      	beq.n	800ccaa <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	3348      	adds	r3, #72	; 0x48
 800cc8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc98:	79fa      	ldrb	r2, [r7, #7]
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	697a      	ldr	r2, [r7, #20]
 800cca2:	68b9      	ldr	r1, [r7, #8]
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f000 f805 	bl	800ccb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccaa:	69bb      	ldr	r3, [r7, #24]
	}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3720      	adds	r7, #32
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
 800ccc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d103      	bne.n	800ccd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	69ba      	ldr	r2, [r7, #24]
 800cccc:	601a      	str	r2, [r3, #0]
 800ccce:	e002      	b.n	800ccd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cce2:	2101      	movs	r1, #1
 800cce4:	69b8      	ldr	r0, [r7, #24]
 800cce6:	f7ff feb7 	bl	800ca58 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ccea:	bf00      	nop
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
	...

0800ccf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b08e      	sub	sp, #56	; 0x38
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
 800cd00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd02:	2300      	movs	r3, #0
 800cd04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10c      	bne.n	800cd2a <xQueueGenericSend+0x36>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	b672      	cpsid	i
 800cd16:	f383 8811 	msr	BASEPRI, r3
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	b662      	cpsie	i
 800cd24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd26:	bf00      	nop
 800cd28:	e7fe      	b.n	800cd28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d103      	bne.n	800cd38 <xQueueGenericSend+0x44>
 800cd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d101      	bne.n	800cd3c <xQueueGenericSend+0x48>
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e000      	b.n	800cd3e <xQueueGenericSend+0x4a>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10c      	bne.n	800cd5c <xQueueGenericSend+0x68>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd46:	b672      	cpsid	i
 800cd48:	f383 8811 	msr	BASEPRI, r3
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	f3bf 8f4f 	dsb	sy
 800cd54:	b662      	cpsie	i
 800cd56:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd58:	bf00      	nop
 800cd5a:	e7fe      	b.n	800cd5a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	d103      	bne.n	800cd6a <xQueueGenericSend+0x76>
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d101      	bne.n	800cd6e <xQueueGenericSend+0x7a>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e000      	b.n	800cd70 <xQueueGenericSend+0x7c>
 800cd6e:	2300      	movs	r3, #0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10c      	bne.n	800cd8e <xQueueGenericSend+0x9a>
	__asm volatile
 800cd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd78:	b672      	cpsid	i
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	b662      	cpsie	i
 800cd88:	623b      	str	r3, [r7, #32]
}
 800cd8a:	bf00      	nop
 800cd8c:	e7fe      	b.n	800cd8c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd8e:	f001 f94f 	bl	800e030 <xTaskGetSchedulerState>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d102      	bne.n	800cd9e <xQueueGenericSend+0xaa>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d101      	bne.n	800cda2 <xQueueGenericSend+0xae>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e000      	b.n	800cda4 <xQueueGenericSend+0xb0>
 800cda2:	2300      	movs	r3, #0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d10c      	bne.n	800cdc2 <xQueueGenericSend+0xce>
	__asm volatile
 800cda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdac:	b672      	cpsid	i
 800cdae:	f383 8811 	msr	BASEPRI, r3
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	f3bf 8f4f 	dsb	sy
 800cdba:	b662      	cpsie	i
 800cdbc:	61fb      	str	r3, [r7, #28]
}
 800cdbe:	bf00      	nop
 800cdc0:	e7fe      	b.n	800cdc0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdc2:	f001 fb53 	bl	800e46c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d302      	bcc.n	800cdd8 <xQueueGenericSend+0xe4>
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d129      	bne.n	800ce2c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	68b9      	ldr	r1, [r7, #8]
 800cddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdde:	f000 f975 	bl	800d0cc <prvCopyDataToQueue>
 800cde2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d010      	beq.n	800ce0e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdee:	3324      	adds	r3, #36	; 0x24
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f000 ff55 	bl	800dca0 <xTaskRemoveFromEventList>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d013      	beq.n	800ce24 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cdfc:	4b3f      	ldr	r3, [pc, #252]	; (800cefc <xQueueGenericSend+0x208>)
 800cdfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	e00a      	b.n	800ce24 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d007      	beq.n	800ce24 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce14:	4b39      	ldr	r3, [pc, #228]	; (800cefc <xQueueGenericSend+0x208>)
 800ce16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce24:	f001 fb56 	bl	800e4d4 <vPortExitCritical>
				return pdPASS;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e063      	b.n	800cef4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d103      	bne.n	800ce3a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce32:	f001 fb4f 	bl	800e4d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce36:	2300      	movs	r3, #0
 800ce38:	e05c      	b.n	800cef4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d106      	bne.n	800ce4e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce40:	f107 0314 	add.w	r3, r7, #20
 800ce44:	4618      	mov	r0, r3
 800ce46:	f000 ff8f 	bl	800dd68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce4e:	f001 fb41 	bl	800e4d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce52:	f000 fd25 	bl	800d8a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce56:	f001 fb09 	bl	800e46c <vPortEnterCritical>
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce60:	b25b      	sxtb	r3, r3
 800ce62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce66:	d103      	bne.n	800ce70 <xQueueGenericSend+0x17c>
 800ce68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce76:	b25b      	sxtb	r3, r3
 800ce78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce7c:	d103      	bne.n	800ce86 <xQueueGenericSend+0x192>
 800ce7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce80:	2200      	movs	r2, #0
 800ce82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce86:	f001 fb25 	bl	800e4d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce8a:	1d3a      	adds	r2, r7, #4
 800ce8c:	f107 0314 	add.w	r3, r7, #20
 800ce90:	4611      	mov	r1, r2
 800ce92:	4618      	mov	r0, r3
 800ce94:	f000 ff7e 	bl	800dd94 <xTaskCheckForTimeOut>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d124      	bne.n	800cee8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cea0:	f000 fa0c 	bl	800d2bc <prvIsQueueFull>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d018      	beq.n	800cedc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ceaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceac:	3310      	adds	r3, #16
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	4611      	mov	r1, r2
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 fece 	bl	800dc54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ceb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceba:	f000 f997 	bl	800d1ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cebe:	f000 fcfd 	bl	800d8bc <xTaskResumeAll>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f47f af7c 	bne.w	800cdc2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ceca:	4b0c      	ldr	r3, [pc, #48]	; (800cefc <xQueueGenericSend+0x208>)
 800cecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ced0:	601a      	str	r2, [r3, #0]
 800ced2:	f3bf 8f4f 	dsb	sy
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	e772      	b.n	800cdc2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cedc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cede:	f000 f985 	bl	800d1ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cee2:	f000 fceb 	bl	800d8bc <xTaskResumeAll>
 800cee6:	e76c      	b.n	800cdc2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceea:	f000 f97f 	bl	800d1ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ceee:	f000 fce5 	bl	800d8bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cef2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3738      	adds	r7, #56	; 0x38
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	e000ed04 	.word	0xe000ed04

0800cf00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b08c      	sub	sp, #48	; 0x30
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d10c      	bne.n	800cf34 <xQueueReceive+0x34>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	b672      	cpsid	i
 800cf20:	f383 8811 	msr	BASEPRI, r3
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	f3bf 8f4f 	dsb	sy
 800cf2c:	b662      	cpsie	i
 800cf2e:	623b      	str	r3, [r7, #32]
}
 800cf30:	bf00      	nop
 800cf32:	e7fe      	b.n	800cf32 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d103      	bne.n	800cf42 <xQueueReceive+0x42>
 800cf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d101      	bne.n	800cf46 <xQueueReceive+0x46>
 800cf42:	2301      	movs	r3, #1
 800cf44:	e000      	b.n	800cf48 <xQueueReceive+0x48>
 800cf46:	2300      	movs	r3, #0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10c      	bne.n	800cf66 <xQueueReceive+0x66>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf50:	b672      	cpsid	i
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	b662      	cpsie	i
 800cf60:	61fb      	str	r3, [r7, #28]
}
 800cf62:	bf00      	nop
 800cf64:	e7fe      	b.n	800cf64 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf66:	f001 f863 	bl	800e030 <xTaskGetSchedulerState>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d102      	bne.n	800cf76 <xQueueReceive+0x76>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d101      	bne.n	800cf7a <xQueueReceive+0x7a>
 800cf76:	2301      	movs	r3, #1
 800cf78:	e000      	b.n	800cf7c <xQueueReceive+0x7c>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10c      	bne.n	800cf9a <xQueueReceive+0x9a>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf84:	b672      	cpsid	i
 800cf86:	f383 8811 	msr	BASEPRI, r3
 800cf8a:	f3bf 8f6f 	isb	sy
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	b662      	cpsie	i
 800cf94:	61bb      	str	r3, [r7, #24]
}
 800cf96:	bf00      	nop
 800cf98:	e7fe      	b.n	800cf98 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf9a:	f001 fa67 	bl	800e46c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d01f      	beq.n	800cfea <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cfaa:	68b9      	ldr	r1, [r7, #8]
 800cfac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfae:	f000 f8f7 	bl	800d1a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb4:	1e5a      	subs	r2, r3, #1
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00f      	beq.n	800cfe2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc4:	3310      	adds	r3, #16
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 fe6a 	bl	800dca0 <xTaskRemoveFromEventList>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d007      	beq.n	800cfe2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cfd2:	4b3d      	ldr	r3, [pc, #244]	; (800d0c8 <xQueueReceive+0x1c8>)
 800cfd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfd8:	601a      	str	r2, [r3, #0]
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cfe2:	f001 fa77 	bl	800e4d4 <vPortExitCritical>
				return pdPASS;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e069      	b.n	800d0be <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d103      	bne.n	800cff8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cff0:	f001 fa70 	bl	800e4d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cff4:	2300      	movs	r3, #0
 800cff6:	e062      	b.n	800d0be <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d106      	bne.n	800d00c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cffe:	f107 0310 	add.w	r3, r7, #16
 800d002:	4618      	mov	r0, r3
 800d004:	f000 feb0 	bl	800dd68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d008:	2301      	movs	r3, #1
 800d00a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d00c:	f001 fa62 	bl	800e4d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d010:	f000 fc46 	bl	800d8a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d014:	f001 fa2a 	bl	800e46c <vPortEnterCritical>
 800d018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d01e:	b25b      	sxtb	r3, r3
 800d020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d024:	d103      	bne.n	800d02e <xQueueReceive+0x12e>
 800d026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d034:	b25b      	sxtb	r3, r3
 800d036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d03a:	d103      	bne.n	800d044 <xQueueReceive+0x144>
 800d03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d044:	f001 fa46 	bl	800e4d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d048:	1d3a      	adds	r2, r7, #4
 800d04a:	f107 0310 	add.w	r3, r7, #16
 800d04e:	4611      	mov	r1, r2
 800d050:	4618      	mov	r0, r3
 800d052:	f000 fe9f 	bl	800dd94 <xTaskCheckForTimeOut>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d123      	bne.n	800d0a4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d05c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d05e:	f000 f917 	bl	800d290 <prvIsQueueEmpty>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d017      	beq.n	800d098 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06a:	3324      	adds	r3, #36	; 0x24
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	4611      	mov	r1, r2
 800d070:	4618      	mov	r0, r3
 800d072:	f000 fdef 	bl	800dc54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d078:	f000 f8b8 	bl	800d1ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d07c:	f000 fc1e 	bl	800d8bc <xTaskResumeAll>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d189      	bne.n	800cf9a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d086:	4b10      	ldr	r3, [pc, #64]	; (800d0c8 <xQueueReceive+0x1c8>)
 800d088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d08c:	601a      	str	r2, [r3, #0]
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	e780      	b.n	800cf9a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d09a:	f000 f8a7 	bl	800d1ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d09e:	f000 fc0d 	bl	800d8bc <xTaskResumeAll>
 800d0a2:	e77a      	b.n	800cf9a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d0a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0a6:	f000 f8a1 	bl	800d1ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0aa:	f000 fc07 	bl	800d8bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0b0:	f000 f8ee 	bl	800d290 <prvIsQueueEmpty>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f43f af6f 	beq.w	800cf9a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d0bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3730      	adds	r7, #48	; 0x30
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	e000ed04 	.word	0xe000ed04

0800d0cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b086      	sub	sp, #24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10d      	bne.n	800d106 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d14d      	bne.n	800d18e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 ffb8 	bl	800e06c <xTaskPriorityDisinherit>
 800d0fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	609a      	str	r2, [r3, #8]
 800d104:	e043      	b.n	800d18e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d119      	bne.n	800d140 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6858      	ldr	r0, [r3, #4]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d114:	461a      	mov	r2, r3
 800d116:	68b9      	ldr	r1, [r7, #8]
 800d118:	f001 fca0 	bl	800ea5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	685a      	ldr	r2, [r3, #4]
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d124:	441a      	add	r2, r3
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	685a      	ldr	r2, [r3, #4]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	429a      	cmp	r2, r3
 800d134:	d32b      	bcc.n	800d18e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	605a      	str	r2, [r3, #4]
 800d13e:	e026      	b.n	800d18e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	68d8      	ldr	r0, [r3, #12]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d148:	461a      	mov	r2, r3
 800d14a:	68b9      	ldr	r1, [r7, #8]
 800d14c:	f001 fc86 	bl	800ea5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	68da      	ldr	r2, [r3, #12]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d158:	425b      	negs	r3, r3
 800d15a:	441a      	add	r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	68da      	ldr	r2, [r3, #12]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d207      	bcs.n	800d17c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	689a      	ldr	r2, [r3, #8]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d174:	425b      	negs	r3, r3
 800d176:	441a      	add	r2, r3
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d105      	bne.n	800d18e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d002      	beq.n	800d18e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	3b01      	subs	r3, #1
 800d18c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	1c5a      	adds	r2, r3, #1
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d196:	697b      	ldr	r3, [r7, #20]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3718      	adds	r7, #24
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d018      	beq.n	800d1e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	68da      	ldr	r2, [r3, #12]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ba:	441a      	add	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	68da      	ldr	r2, [r3, #12]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d303      	bcc.n	800d1d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	68d9      	ldr	r1, [r3, #12]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1dc:	461a      	mov	r2, r3
 800d1de:	6838      	ldr	r0, [r7, #0]
 800d1e0:	f001 fc3c 	bl	800ea5c <memcpy>
	}
}
 800d1e4:	bf00      	nop
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d1f4:	f001 f93a 	bl	800e46c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d200:	e011      	b.n	800d226 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d206:	2b00      	cmp	r3, #0
 800d208:	d012      	beq.n	800d230 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	3324      	adds	r3, #36	; 0x24
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 fd46 	bl	800dca0 <xTaskRemoveFromEventList>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d001      	beq.n	800d21e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d21a:	f000 fe21 	bl	800de60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d21e:	7bfb      	ldrb	r3, [r7, #15]
 800d220:	3b01      	subs	r3, #1
 800d222:	b2db      	uxtb	r3, r3
 800d224:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	dce9      	bgt.n	800d202 <prvUnlockQueue+0x16>
 800d22e:	e000      	b.n	800d232 <prvUnlockQueue+0x46>
					break;
 800d230:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	22ff      	movs	r2, #255	; 0xff
 800d236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d23a:	f001 f94b 	bl	800e4d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d23e:	f001 f915 	bl	800e46c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d248:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d24a:	e011      	b.n	800d270 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	691b      	ldr	r3, [r3, #16]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d012      	beq.n	800d27a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	3310      	adds	r3, #16
 800d258:	4618      	mov	r0, r3
 800d25a:	f000 fd21 	bl	800dca0 <xTaskRemoveFromEventList>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	d001      	beq.n	800d268 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d264:	f000 fdfc 	bl	800de60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d268:	7bbb      	ldrb	r3, [r7, #14]
 800d26a:	3b01      	subs	r3, #1
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d274:	2b00      	cmp	r3, #0
 800d276:	dce9      	bgt.n	800d24c <prvUnlockQueue+0x60>
 800d278:	e000      	b.n	800d27c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d27a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	22ff      	movs	r2, #255	; 0xff
 800d280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d284:	f001 f926 	bl	800e4d4 <vPortExitCritical>
}
 800d288:	bf00      	nop
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d298:	f001 f8e8 	bl	800e46c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d102      	bne.n	800d2aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	60fb      	str	r3, [r7, #12]
 800d2a8:	e001      	b.n	800d2ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d2ae:	f001 f911 	bl	800e4d4 <vPortExitCritical>

	return xReturn;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d2c4:	f001 f8d2 	bl	800e46c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d102      	bne.n	800d2da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	60fb      	str	r3, [r7, #12]
 800d2d8:	e001      	b.n	800d2de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d2de:	f001 f8f9 	bl	800e4d4 <vPortExitCritical>

	return xReturn;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b08e      	sub	sp, #56	; 0x38
 800d2f0:	af04      	add	r7, sp, #16
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10c      	bne.n	800d31a <xTaskCreateStatic+0x2e>
	__asm volatile
 800d300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d304:	b672      	cpsid	i
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	b662      	cpsie	i
 800d314:	623b      	str	r3, [r7, #32]
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d10c      	bne.n	800d33a <xTaskCreateStatic+0x4e>
	__asm volatile
 800d320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d324:	b672      	cpsid	i
 800d326:	f383 8811 	msr	BASEPRI, r3
 800d32a:	f3bf 8f6f 	isb	sy
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	b662      	cpsie	i
 800d334:	61fb      	str	r3, [r7, #28]
}
 800d336:	bf00      	nop
 800d338:	e7fe      	b.n	800d338 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d33a:	23b4      	movs	r3, #180	; 0xb4
 800d33c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	2bb4      	cmp	r3, #180	; 0xb4
 800d342:	d00c      	beq.n	800d35e <xTaskCreateStatic+0x72>
	__asm volatile
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	b672      	cpsid	i
 800d34a:	f383 8811 	msr	BASEPRI, r3
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f3bf 8f4f 	dsb	sy
 800d356:	b662      	cpsie	i
 800d358:	61bb      	str	r3, [r7, #24]
}
 800d35a:	bf00      	nop
 800d35c:	e7fe      	b.n	800d35c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d35e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	2b00      	cmp	r3, #0
 800d364:	d01e      	beq.n	800d3a4 <xTaskCreateStatic+0xb8>
 800d366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d01b      	beq.n	800d3a4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d374:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d378:	2202      	movs	r2, #2
 800d37a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d37e:	2300      	movs	r3, #0
 800d380:	9303      	str	r3, [sp, #12]
 800d382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d384:	9302      	str	r3, [sp, #8]
 800d386:	f107 0314 	add.w	r3, r7, #20
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	68b9      	ldr	r1, [r7, #8]
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f000 f850 	bl	800d43c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d39c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d39e:	f000 f8ed 	bl	800d57c <prvAddNewTaskToReadyList>
 800d3a2:	e001      	b.n	800d3a8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d3a8:	697b      	ldr	r3, [r7, #20]
	}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3728      	adds	r7, #40	; 0x28
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b08c      	sub	sp, #48	; 0x30
 800d3b6:	af04      	add	r7, sp, #16
 800d3b8:	60f8      	str	r0, [r7, #12]
 800d3ba:	60b9      	str	r1, [r7, #8]
 800d3bc:	603b      	str	r3, [r7, #0]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d3c2:	88fb      	ldrh	r3, [r7, #6]
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f001 f938 	bl	800e63c <pvPortMalloc>
 800d3cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d00e      	beq.n	800d3f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d3d4:	20b4      	movs	r0, #180	; 0xb4
 800d3d6:	f001 f931 	bl	800e63c <pvPortMalloc>
 800d3da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d003      	beq.n	800d3ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	697a      	ldr	r2, [r7, #20]
 800d3e6:	631a      	str	r2, [r3, #48]	; 0x30
 800d3e8:	e005      	b.n	800d3f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d3ea:	6978      	ldr	r0, [r7, #20]
 800d3ec:	f001 f9f0 	bl	800e7d0 <vPortFree>
 800d3f0:	e001      	b.n	800d3f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d017      	beq.n	800d42c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d404:	88fa      	ldrh	r2, [r7, #6]
 800d406:	2300      	movs	r3, #0
 800d408:	9303      	str	r3, [sp, #12]
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	9302      	str	r3, [sp, #8]
 800d40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d410:	9301      	str	r3, [sp, #4]
 800d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d414:	9300      	str	r3, [sp, #0]
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	68b9      	ldr	r1, [r7, #8]
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f000 f80e 	bl	800d43c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d420:	69f8      	ldr	r0, [r7, #28]
 800d422:	f000 f8ab 	bl	800d57c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d426:	2301      	movs	r3, #1
 800d428:	61bb      	str	r3, [r7, #24]
 800d42a:	e002      	b.n	800d432 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d42c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d430:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d432:	69bb      	ldr	r3, [r7, #24]
	}
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b088      	sub	sp, #32
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d44e:	6879      	ldr	r1, [r7, #4]
 800d450:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d454:	440b      	add	r3, r1
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4413      	add	r3, r2
 800d45a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	f023 0307 	bic.w	r3, r3, #7
 800d462:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00c      	beq.n	800d488 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	b672      	cpsid	i
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	b662      	cpsie	i
 800d482:	617b      	str	r3, [r7, #20]
}
 800d484:	bf00      	nop
 800d486:	e7fe      	b.n	800d486 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d01f      	beq.n	800d4ce <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d48e:	2300      	movs	r3, #0
 800d490:	61fb      	str	r3, [r7, #28]
 800d492:	e012      	b.n	800d4ba <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d494:	68ba      	ldr	r2, [r7, #8]
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	4413      	add	r3, r2
 800d49a:	7819      	ldrb	r1, [r3, #0]
 800d49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	3334      	adds	r3, #52	; 0x34
 800d4a4:	460a      	mov	r2, r1
 800d4a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d006      	beq.n	800d4c2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	61fb      	str	r3, [r7, #28]
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	2b0f      	cmp	r3, #15
 800d4be:	d9e9      	bls.n	800d494 <prvInitialiseNewTask+0x58>
 800d4c0:	e000      	b.n	800d4c4 <prvInitialiseNewTask+0x88>
			{
				break;
 800d4c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d4cc:	e003      	b.n	800d4d6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d8:	2b06      	cmp	r3, #6
 800d4da:	d901      	bls.n	800d4e0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d4dc:	2306      	movs	r3, #6
 800d4de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7ff fa19 	bl	800c92e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fe:	3318      	adds	r3, #24
 800d500:	4618      	mov	r0, r3
 800d502:	f7ff fa14 	bl	800c92e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d50a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50e:	f1c3 0207 	rsb	r2, r3, #7
 800d512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d514:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d51a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51e:	2200      	movs	r2, #0
 800d520:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d526:	2200      	movs	r2, #0
 800d528:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52e:	334c      	adds	r3, #76	; 0x4c
 800d530:	2260      	movs	r2, #96	; 0x60
 800d532:	2100      	movs	r1, #0
 800d534:	4618      	mov	r0, r3
 800d536:	f001 fa9f 	bl	800ea78 <memset>
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	4a0c      	ldr	r2, [pc, #48]	; (800d570 <prvInitialiseNewTask+0x134>)
 800d53e:	651a      	str	r2, [r3, #80]	; 0x50
 800d540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d542:	4a0c      	ldr	r2, [pc, #48]	; (800d574 <prvInitialiseNewTask+0x138>)
 800d544:	655a      	str	r2, [r3, #84]	; 0x54
 800d546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d548:	4a0b      	ldr	r2, [pc, #44]	; (800d578 <prvInitialiseNewTask+0x13c>)
 800d54a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d54c:	683a      	ldr	r2, [r7, #0]
 800d54e:	68f9      	ldr	r1, [r7, #12]
 800d550:	69b8      	ldr	r0, [r7, #24]
 800d552:	f000 fe7b 	bl	800e24c <pxPortInitialiseStack>
 800d556:	4602      	mov	r2, r0
 800d558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d002      	beq.n	800d568 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d566:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d568:	bf00      	nop
 800d56a:	3720      	adds	r7, #32
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	080128dc 	.word	0x080128dc
 800d574:	080128fc 	.word	0x080128fc
 800d578:	080128bc 	.word	0x080128bc

0800d57c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d584:	f000 ff72 	bl	800e46c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d588:	4b2a      	ldr	r3, [pc, #168]	; (800d634 <prvAddNewTaskToReadyList+0xb8>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	3301      	adds	r3, #1
 800d58e:	4a29      	ldr	r2, [pc, #164]	; (800d634 <prvAddNewTaskToReadyList+0xb8>)
 800d590:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d592:	4b29      	ldr	r3, [pc, #164]	; (800d638 <prvAddNewTaskToReadyList+0xbc>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d109      	bne.n	800d5ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d59a:	4a27      	ldr	r2, [pc, #156]	; (800d638 <prvAddNewTaskToReadyList+0xbc>)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d5a0:	4b24      	ldr	r3, [pc, #144]	; (800d634 <prvAddNewTaskToReadyList+0xb8>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d110      	bne.n	800d5ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d5a8:	f000 fc7e 	bl	800dea8 <prvInitialiseTaskLists>
 800d5ac:	e00d      	b.n	800d5ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d5ae:	4b23      	ldr	r3, [pc, #140]	; (800d63c <prvAddNewTaskToReadyList+0xc0>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d109      	bne.n	800d5ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d5b6:	4b20      	ldr	r3, [pc, #128]	; (800d638 <prvAddNewTaskToReadyList+0xbc>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d802      	bhi.n	800d5ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d5c4:	4a1c      	ldr	r2, [pc, #112]	; (800d638 <prvAddNewTaskToReadyList+0xbc>)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d5ca:	4b1d      	ldr	r3, [pc, #116]	; (800d640 <prvAddNewTaskToReadyList+0xc4>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	4a1b      	ldr	r2, [pc, #108]	; (800d640 <prvAddNewTaskToReadyList+0xc4>)
 800d5d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d8:	2201      	movs	r2, #1
 800d5da:	409a      	lsls	r2, r3
 800d5dc:	4b19      	ldr	r3, [pc, #100]	; (800d644 <prvAddNewTaskToReadyList+0xc8>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	4a18      	ldr	r2, [pc, #96]	; (800d644 <prvAddNewTaskToReadyList+0xc8>)
 800d5e4:	6013      	str	r3, [r2, #0]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	4413      	add	r3, r2
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	4a15      	ldr	r2, [pc, #84]	; (800d648 <prvAddNewTaskToReadyList+0xcc>)
 800d5f4:	441a      	add	r2, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	f7ff f9a3 	bl	800c948 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d602:	f000 ff67 	bl	800e4d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d606:	4b0d      	ldr	r3, [pc, #52]	; (800d63c <prvAddNewTaskToReadyList+0xc0>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00e      	beq.n	800d62c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d60e:	4b0a      	ldr	r3, [pc, #40]	; (800d638 <prvAddNewTaskToReadyList+0xbc>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d618:	429a      	cmp	r2, r3
 800d61a:	d207      	bcs.n	800d62c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d61c:	4b0b      	ldr	r3, [pc, #44]	; (800d64c <prvAddNewTaskToReadyList+0xd0>)
 800d61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d62c:	bf00      	nop
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	200013e0 	.word	0x200013e0
 800d638:	200012e0 	.word	0x200012e0
 800d63c:	200013ec 	.word	0x200013ec
 800d640:	200013fc 	.word	0x200013fc
 800d644:	200013e8 	.word	0x200013e8
 800d648:	200012e4 	.word	0x200012e4
 800d64c:	e000ed04 	.word	0xe000ed04

0800d650 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d650:	b580      	push	{r7, lr}
 800d652:	b08a      	sub	sp, #40	; 0x28
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d65a:	2300      	movs	r3, #0
 800d65c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10c      	bne.n	800d67e <vTaskDelayUntil+0x2e>
	__asm volatile
 800d664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d668:	b672      	cpsid	i
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	b662      	cpsie	i
 800d678:	617b      	str	r3, [r7, #20]
}
 800d67a:	bf00      	nop
 800d67c:	e7fe      	b.n	800d67c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10c      	bne.n	800d69e <vTaskDelayUntil+0x4e>
	__asm volatile
 800d684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d688:	b672      	cpsid	i
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	b662      	cpsie	i
 800d698:	613b      	str	r3, [r7, #16]
}
 800d69a:	bf00      	nop
 800d69c:	e7fe      	b.n	800d69c <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800d69e:	4b2b      	ldr	r3, [pc, #172]	; (800d74c <vTaskDelayUntil+0xfc>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00c      	beq.n	800d6c0 <vTaskDelayUntil+0x70>
	__asm volatile
 800d6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6aa:	b672      	cpsid	i
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	b662      	cpsie	i
 800d6ba:	60fb      	str	r3, [r7, #12]
}
 800d6bc:	bf00      	nop
 800d6be:	e7fe      	b.n	800d6be <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800d6c0:	f000 f8ee 	bl	800d8a0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d6c4:	4b22      	ldr	r3, [pc, #136]	; (800d750 <vTaskDelayUntil+0x100>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	683a      	ldr	r2, [r7, #0]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	6a3a      	ldr	r2, [r7, #32]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d20b      	bcs.n	800d6f6 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	69fa      	ldr	r2, [r7, #28]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d211      	bcs.n	800d70c <vTaskDelayUntil+0xbc>
 800d6e8:	69fa      	ldr	r2, [r7, #28]
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d90d      	bls.n	800d70c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	627b      	str	r3, [r7, #36]	; 0x24
 800d6f4:	e00a      	b.n	800d70c <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	69fa      	ldr	r2, [r7, #28]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d303      	bcc.n	800d708 <vTaskDelayUntil+0xb8>
 800d700:	69fa      	ldr	r2, [r7, #28]
 800d702:	6a3b      	ldr	r3, [r7, #32]
 800d704:	429a      	cmp	r2, r3
 800d706:	d901      	bls.n	800d70c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800d708:	2301      	movs	r3, #1
 800d70a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	69fa      	ldr	r2, [r7, #28]
 800d710:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	2b00      	cmp	r3, #0
 800d716:	d006      	beq.n	800d726 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d718:	69fa      	ldr	r2, [r7, #28]
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	2100      	movs	r1, #0
 800d720:	4618      	mov	r0, r3
 800d722:	f000 fd2d 	bl	800e180 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d726:	f000 f8c9 	bl	800d8bc <xTaskResumeAll>
 800d72a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d107      	bne.n	800d742 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800d732:	4b08      	ldr	r3, [pc, #32]	; (800d754 <vTaskDelayUntil+0x104>)
 800d734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d738:	601a      	str	r2, [r3, #0]
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d742:	bf00      	nop
 800d744:	3728      	adds	r7, #40	; 0x28
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20001408 	.word	0x20001408
 800d750:	200013e4 	.word	0x200013e4
 800d754:	e000ed04 	.word	0xe000ed04

0800d758 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d760:	2300      	movs	r3, #0
 800d762:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d019      	beq.n	800d79e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d76a:	4b14      	ldr	r3, [pc, #80]	; (800d7bc <vTaskDelay+0x64>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00c      	beq.n	800d78c <vTaskDelay+0x34>
	__asm volatile
 800d772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d776:	b672      	cpsid	i
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	b662      	cpsie	i
 800d786:	60bb      	str	r3, [r7, #8]
}
 800d788:	bf00      	nop
 800d78a:	e7fe      	b.n	800d78a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d78c:	f000 f888 	bl	800d8a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d790:	2100      	movs	r1, #0
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 fcf4 	bl	800e180 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d798:	f000 f890 	bl	800d8bc <xTaskResumeAll>
 800d79c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d107      	bne.n	800d7b4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800d7a4:	4b06      	ldr	r3, [pc, #24]	; (800d7c0 <vTaskDelay+0x68>)
 800d7a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7aa:	601a      	str	r2, [r3, #0]
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7b4:	bf00      	nop
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	20001408 	.word	0x20001408
 800d7c0:	e000ed04 	.word	0xe000ed04

0800d7c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b08a      	sub	sp, #40	; 0x28
 800d7c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d7d2:	463a      	mov	r2, r7
 800d7d4:	1d39      	adds	r1, r7, #4
 800d7d6:	f107 0308 	add.w	r3, r7, #8
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7f3 feb6 	bl	800154c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d7e0:	6839      	ldr	r1, [r7, #0]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	9202      	str	r2, [sp, #8]
 800d7e8:	9301      	str	r3, [sp, #4]
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	460a      	mov	r2, r1
 800d7f2:	4923      	ldr	r1, [pc, #140]	; (800d880 <vTaskStartScheduler+0xbc>)
 800d7f4:	4823      	ldr	r0, [pc, #140]	; (800d884 <vTaskStartScheduler+0xc0>)
 800d7f6:	f7ff fd79 	bl	800d2ec <xTaskCreateStatic>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	4a22      	ldr	r2, [pc, #136]	; (800d888 <vTaskStartScheduler+0xc4>)
 800d7fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d800:	4b21      	ldr	r3, [pc, #132]	; (800d888 <vTaskStartScheduler+0xc4>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d002      	beq.n	800d80e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d808:	2301      	movs	r3, #1
 800d80a:	617b      	str	r3, [r7, #20]
 800d80c:	e001      	b.n	800d812 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d80e:	2300      	movs	r3, #0
 800d810:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d11d      	bne.n	800d854 <vTaskStartScheduler+0x90>
	__asm volatile
 800d818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81c:	b672      	cpsid	i
 800d81e:	f383 8811 	msr	BASEPRI, r3
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	b662      	cpsie	i
 800d82c:	613b      	str	r3, [r7, #16]
}
 800d82e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d830:	4b16      	ldr	r3, [pc, #88]	; (800d88c <vTaskStartScheduler+0xc8>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	334c      	adds	r3, #76	; 0x4c
 800d836:	4a16      	ldr	r2, [pc, #88]	; (800d890 <vTaskStartScheduler+0xcc>)
 800d838:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d83a:	4b16      	ldr	r3, [pc, #88]	; (800d894 <vTaskStartScheduler+0xd0>)
 800d83c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d840:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d842:	4b15      	ldr	r3, [pc, #84]	; (800d898 <vTaskStartScheduler+0xd4>)
 800d844:	2201      	movs	r2, #1
 800d846:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d848:	4b14      	ldr	r3, [pc, #80]	; (800d89c <vTaskStartScheduler+0xd8>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d84e:	f000 fd8f 	bl	800e370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d852:	e010      	b.n	800d876 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d85a:	d10c      	bne.n	800d876 <vTaskStartScheduler+0xb2>
	__asm volatile
 800d85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d860:	b672      	cpsid	i
 800d862:	f383 8811 	msr	BASEPRI, r3
 800d866:	f3bf 8f6f 	isb	sy
 800d86a:	f3bf 8f4f 	dsb	sy
 800d86e:	b662      	cpsie	i
 800d870:	60fb      	str	r3, [r7, #12]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <vTaskStartScheduler+0xb0>
}
 800d876:	bf00      	nop
 800d878:	3718      	adds	r7, #24
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	08010968 	.word	0x08010968
 800d884:	0800de79 	.word	0x0800de79
 800d888:	20001404 	.word	0x20001404
 800d88c:	200012e0 	.word	0x200012e0
 800d890:	20000058 	.word	0x20000058
 800d894:	20001400 	.word	0x20001400
 800d898:	200013ec 	.word	0x200013ec
 800d89c:	200013e4 	.word	0x200013e4

0800d8a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d8a4:	4b04      	ldr	r3, [pc, #16]	; (800d8b8 <vTaskSuspendAll+0x18>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	4a03      	ldr	r2, [pc, #12]	; (800d8b8 <vTaskSuspendAll+0x18>)
 800d8ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d8ae:	bf00      	nop
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr
 800d8b8:	20001408 	.word	0x20001408

0800d8bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d8ca:	4b42      	ldr	r3, [pc, #264]	; (800d9d4 <xTaskResumeAll+0x118>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d10c      	bne.n	800d8ec <xTaskResumeAll+0x30>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d6:	b672      	cpsid	i
 800d8d8:	f383 8811 	msr	BASEPRI, r3
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	b662      	cpsie	i
 800d8e6:	603b      	str	r3, [r7, #0]
}
 800d8e8:	bf00      	nop
 800d8ea:	e7fe      	b.n	800d8ea <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d8ec:	f000 fdbe 	bl	800e46c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d8f0:	4b38      	ldr	r3, [pc, #224]	; (800d9d4 <xTaskResumeAll+0x118>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	4a37      	ldr	r2, [pc, #220]	; (800d9d4 <xTaskResumeAll+0x118>)
 800d8f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8fa:	4b36      	ldr	r3, [pc, #216]	; (800d9d4 <xTaskResumeAll+0x118>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d161      	bne.n	800d9c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d902:	4b35      	ldr	r3, [pc, #212]	; (800d9d8 <xTaskResumeAll+0x11c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d05d      	beq.n	800d9c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d90a:	e02e      	b.n	800d96a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d90c:	4b33      	ldr	r3, [pc, #204]	; (800d9dc <xTaskResumeAll+0x120>)
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	3318      	adds	r3, #24
 800d918:	4618      	mov	r0, r3
 800d91a:	f7ff f872 	bl	800ca02 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3304      	adds	r3, #4
 800d922:	4618      	mov	r0, r3
 800d924:	f7ff f86d 	bl	800ca02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92c:	2201      	movs	r2, #1
 800d92e:	409a      	lsls	r2, r3
 800d930:	4b2b      	ldr	r3, [pc, #172]	; (800d9e0 <xTaskResumeAll+0x124>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4313      	orrs	r3, r2
 800d936:	4a2a      	ldr	r2, [pc, #168]	; (800d9e0 <xTaskResumeAll+0x124>)
 800d938:	6013      	str	r3, [r2, #0]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d93e:	4613      	mov	r3, r2
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	4413      	add	r3, r2
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	4a27      	ldr	r2, [pc, #156]	; (800d9e4 <xTaskResumeAll+0x128>)
 800d948:	441a      	add	r2, r3
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	3304      	adds	r3, #4
 800d94e:	4619      	mov	r1, r3
 800d950:	4610      	mov	r0, r2
 800d952:	f7fe fff9 	bl	800c948 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d95a:	4b23      	ldr	r3, [pc, #140]	; (800d9e8 <xTaskResumeAll+0x12c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d960:	429a      	cmp	r2, r3
 800d962:	d302      	bcc.n	800d96a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d964:	4b21      	ldr	r3, [pc, #132]	; (800d9ec <xTaskResumeAll+0x130>)
 800d966:	2201      	movs	r2, #1
 800d968:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d96a:	4b1c      	ldr	r3, [pc, #112]	; (800d9dc <xTaskResumeAll+0x120>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1cc      	bne.n	800d90c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d978:	f000 fb3a 	bl	800dff0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d97c:	4b1c      	ldr	r3, [pc, #112]	; (800d9f0 <xTaskResumeAll+0x134>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d010      	beq.n	800d9aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d988:	f000 f846 	bl	800da18 <xTaskIncrementTick>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d002      	beq.n	800d998 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d992:	4b16      	ldr	r3, [pc, #88]	; (800d9ec <xTaskResumeAll+0x130>)
 800d994:	2201      	movs	r2, #1
 800d996:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1f1      	bne.n	800d988 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800d9a4:	4b12      	ldr	r3, [pc, #72]	; (800d9f0 <xTaskResumeAll+0x134>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d9aa:	4b10      	ldr	r3, [pc, #64]	; (800d9ec <xTaskResumeAll+0x130>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d009      	beq.n	800d9c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d9b6:	4b0f      	ldr	r3, [pc, #60]	; (800d9f4 <xTaskResumeAll+0x138>)
 800d9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	f3bf 8f4f 	dsb	sy
 800d9c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9c6:	f000 fd85 	bl	800e4d4 <vPortExitCritical>

	return xAlreadyYielded;
 800d9ca:	68bb      	ldr	r3, [r7, #8]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	20001408 	.word	0x20001408
 800d9d8:	200013e0 	.word	0x200013e0
 800d9dc:	200013a0 	.word	0x200013a0
 800d9e0:	200013e8 	.word	0x200013e8
 800d9e4:	200012e4 	.word	0x200012e4
 800d9e8:	200012e0 	.word	0x200012e0
 800d9ec:	200013f4 	.word	0x200013f4
 800d9f0:	200013f0 	.word	0x200013f0
 800d9f4:	e000ed04 	.word	0xe000ed04

0800d9f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d9fe:	4b05      	ldr	r3, [pc, #20]	; (800da14 <xTaskGetTickCount+0x1c>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800da04:	687b      	ldr	r3, [r7, #4]
}
 800da06:	4618      	mov	r0, r3
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	200013e4 	.word	0x200013e4

0800da18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b086      	sub	sp, #24
 800da1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800da1e:	2300      	movs	r3, #0
 800da20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da22:	4b4f      	ldr	r3, [pc, #316]	; (800db60 <xTaskIncrementTick+0x148>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	f040 808a 	bne.w	800db40 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da2c:	4b4d      	ldr	r3, [pc, #308]	; (800db64 <xTaskIncrementTick+0x14c>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3301      	adds	r3, #1
 800da32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da34:	4a4b      	ldr	r2, [pc, #300]	; (800db64 <xTaskIncrementTick+0x14c>)
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d122      	bne.n	800da86 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800da40:	4b49      	ldr	r3, [pc, #292]	; (800db68 <xTaskIncrementTick+0x150>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00c      	beq.n	800da64 <xTaskIncrementTick+0x4c>
	__asm volatile
 800da4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4e:	b672      	cpsid	i
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	b662      	cpsie	i
 800da5e:	603b      	str	r3, [r7, #0]
}
 800da60:	bf00      	nop
 800da62:	e7fe      	b.n	800da62 <xTaskIncrementTick+0x4a>
 800da64:	4b40      	ldr	r3, [pc, #256]	; (800db68 <xTaskIncrementTick+0x150>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	60fb      	str	r3, [r7, #12]
 800da6a:	4b40      	ldr	r3, [pc, #256]	; (800db6c <xTaskIncrementTick+0x154>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a3e      	ldr	r2, [pc, #248]	; (800db68 <xTaskIncrementTick+0x150>)
 800da70:	6013      	str	r3, [r2, #0]
 800da72:	4a3e      	ldr	r2, [pc, #248]	; (800db6c <xTaskIncrementTick+0x154>)
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	6013      	str	r3, [r2, #0]
 800da78:	4b3d      	ldr	r3, [pc, #244]	; (800db70 <xTaskIncrementTick+0x158>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	3301      	adds	r3, #1
 800da7e:	4a3c      	ldr	r2, [pc, #240]	; (800db70 <xTaskIncrementTick+0x158>)
 800da80:	6013      	str	r3, [r2, #0]
 800da82:	f000 fab5 	bl	800dff0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da86:	4b3b      	ldr	r3, [pc, #236]	; (800db74 <xTaskIncrementTick+0x15c>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	693a      	ldr	r2, [r7, #16]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d348      	bcc.n	800db22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da90:	4b35      	ldr	r3, [pc, #212]	; (800db68 <xTaskIncrementTick+0x150>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d104      	bne.n	800daa4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da9a:	4b36      	ldr	r3, [pc, #216]	; (800db74 <xTaskIncrementTick+0x15c>)
 800da9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800daa0:	601a      	str	r2, [r3, #0]
					break;
 800daa2:	e03e      	b.n	800db22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daa4:	4b30      	ldr	r3, [pc, #192]	; (800db68 <xTaskIncrementTick+0x150>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d203      	bcs.n	800dac4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dabc:	4a2d      	ldr	r2, [pc, #180]	; (800db74 <xTaskIncrementTick+0x15c>)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dac2:	e02e      	b.n	800db22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	3304      	adds	r3, #4
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fe ff9a 	bl	800ca02 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d004      	beq.n	800dae0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	3318      	adds	r3, #24
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fe ff91 	bl	800ca02 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae4:	2201      	movs	r2, #1
 800dae6:	409a      	lsls	r2, r3
 800dae8:	4b23      	ldr	r3, [pc, #140]	; (800db78 <xTaskIncrementTick+0x160>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4313      	orrs	r3, r2
 800daee:	4a22      	ldr	r2, [pc, #136]	; (800db78 <xTaskIncrementTick+0x160>)
 800daf0:	6013      	str	r3, [r2, #0]
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf6:	4613      	mov	r3, r2
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	4413      	add	r3, r2
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4a1f      	ldr	r2, [pc, #124]	; (800db7c <xTaskIncrementTick+0x164>)
 800db00:	441a      	add	r2, r3
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	3304      	adds	r3, #4
 800db06:	4619      	mov	r1, r3
 800db08:	4610      	mov	r0, r2
 800db0a:	f7fe ff1d 	bl	800c948 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db12:	4b1b      	ldr	r3, [pc, #108]	; (800db80 <xTaskIncrementTick+0x168>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db18:	429a      	cmp	r2, r3
 800db1a:	d3b9      	bcc.n	800da90 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800db1c:	2301      	movs	r3, #1
 800db1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db20:	e7b6      	b.n	800da90 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db22:	4b17      	ldr	r3, [pc, #92]	; (800db80 <xTaskIncrementTick+0x168>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db28:	4914      	ldr	r1, [pc, #80]	; (800db7c <xTaskIncrementTick+0x164>)
 800db2a:	4613      	mov	r3, r2
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	4413      	add	r3, r2
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	440b      	add	r3, r1
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b01      	cmp	r3, #1
 800db38:	d907      	bls.n	800db4a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800db3a:	2301      	movs	r3, #1
 800db3c:	617b      	str	r3, [r7, #20]
 800db3e:	e004      	b.n	800db4a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800db40:	4b10      	ldr	r3, [pc, #64]	; (800db84 <xTaskIncrementTick+0x16c>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	3301      	adds	r3, #1
 800db46:	4a0f      	ldr	r2, [pc, #60]	; (800db84 <xTaskIncrementTick+0x16c>)
 800db48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800db4a:	4b0f      	ldr	r3, [pc, #60]	; (800db88 <xTaskIncrementTick+0x170>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d001      	beq.n	800db56 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800db52:	2301      	movs	r3, #1
 800db54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800db56:	697b      	ldr	r3, [r7, #20]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3718      	adds	r7, #24
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	20001408 	.word	0x20001408
 800db64:	200013e4 	.word	0x200013e4
 800db68:	20001398 	.word	0x20001398
 800db6c:	2000139c 	.word	0x2000139c
 800db70:	200013f8 	.word	0x200013f8
 800db74:	20001400 	.word	0x20001400
 800db78:	200013e8 	.word	0x200013e8
 800db7c:	200012e4 	.word	0x200012e4
 800db80:	200012e0 	.word	0x200012e0
 800db84:	200013f0 	.word	0x200013f0
 800db88:	200013f4 	.word	0x200013f4

0800db8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db8c:	b480      	push	{r7}
 800db8e:	b087      	sub	sp, #28
 800db90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db92:	4b2a      	ldr	r3, [pc, #168]	; (800dc3c <vTaskSwitchContext+0xb0>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d003      	beq.n	800dba2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db9a:	4b29      	ldr	r3, [pc, #164]	; (800dc40 <vTaskSwitchContext+0xb4>)
 800db9c:	2201      	movs	r2, #1
 800db9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dba0:	e046      	b.n	800dc30 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800dba2:	4b27      	ldr	r3, [pc, #156]	; (800dc40 <vTaskSwitchContext+0xb4>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dba8:	4b26      	ldr	r3, [pc, #152]	; (800dc44 <vTaskSwitchContext+0xb8>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	fab3 f383 	clz	r3, r3
 800dbb4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dbb6:	7afb      	ldrb	r3, [r7, #11]
 800dbb8:	f1c3 031f 	rsb	r3, r3, #31
 800dbbc:	617b      	str	r3, [r7, #20]
 800dbbe:	4922      	ldr	r1, [pc, #136]	; (800dc48 <vTaskSwitchContext+0xbc>)
 800dbc0:	697a      	ldr	r2, [r7, #20]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	440b      	add	r3, r1
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d10c      	bne.n	800dbec <vTaskSwitchContext+0x60>
	__asm volatile
 800dbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd6:	b672      	cpsid	i
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	b662      	cpsie	i
 800dbe6:	607b      	str	r3, [r7, #4]
}
 800dbe8:	bf00      	nop
 800dbea:	e7fe      	b.n	800dbea <vTaskSwitchContext+0x5e>
 800dbec:	697a      	ldr	r2, [r7, #20]
 800dbee:	4613      	mov	r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	4413      	add	r3, r2
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	4a14      	ldr	r2, [pc, #80]	; (800dc48 <vTaskSwitchContext+0xbc>)
 800dbf8:	4413      	add	r3, r2
 800dbfa:	613b      	str	r3, [r7, #16]
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	685a      	ldr	r2, [r3, #4]
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	605a      	str	r2, [r3, #4]
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	685a      	ldr	r2, [r3, #4]
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	3308      	adds	r3, #8
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d104      	bne.n	800dc1c <vTaskSwitchContext+0x90>
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	685a      	ldr	r2, [r3, #4]
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	605a      	str	r2, [r3, #4]
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	4a0a      	ldr	r2, [pc, #40]	; (800dc4c <vTaskSwitchContext+0xc0>)
 800dc24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc26:	4b09      	ldr	r3, [pc, #36]	; (800dc4c <vTaskSwitchContext+0xc0>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	334c      	adds	r3, #76	; 0x4c
 800dc2c:	4a08      	ldr	r2, [pc, #32]	; (800dc50 <vTaskSwitchContext+0xc4>)
 800dc2e:	6013      	str	r3, [r2, #0]
}
 800dc30:	bf00      	nop
 800dc32:	371c      	adds	r7, #28
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	20001408 	.word	0x20001408
 800dc40:	200013f4 	.word	0x200013f4
 800dc44:	200013e8 	.word	0x200013e8
 800dc48:	200012e4 	.word	0x200012e4
 800dc4c:	200012e0 	.word	0x200012e0
 800dc50:	20000058 	.word	0x20000058

0800dc54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d10c      	bne.n	800dc7e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800dc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc68:	b672      	cpsid	i
 800dc6a:	f383 8811 	msr	BASEPRI, r3
 800dc6e:	f3bf 8f6f 	isb	sy
 800dc72:	f3bf 8f4f 	dsb	sy
 800dc76:	b662      	cpsie	i
 800dc78:	60fb      	str	r3, [r7, #12]
}
 800dc7a:	bf00      	nop
 800dc7c:	e7fe      	b.n	800dc7c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc7e:	4b07      	ldr	r3, [pc, #28]	; (800dc9c <vTaskPlaceOnEventList+0x48>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	3318      	adds	r3, #24
 800dc84:	4619      	mov	r1, r3
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7fe fe82 	bl	800c990 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc8c:	2101      	movs	r1, #1
 800dc8e:	6838      	ldr	r0, [r7, #0]
 800dc90:	f000 fa76 	bl	800e180 <prvAddCurrentTaskToDelayedList>
}
 800dc94:	bf00      	nop
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	200012e0 	.word	0x200012e0

0800dca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d10c      	bne.n	800dcd0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800dcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcba:	b672      	cpsid	i
 800dcbc:	f383 8811 	msr	BASEPRI, r3
 800dcc0:	f3bf 8f6f 	isb	sy
 800dcc4:	f3bf 8f4f 	dsb	sy
 800dcc8:	b662      	cpsie	i
 800dcca:	60fb      	str	r3, [r7, #12]
}
 800dccc:	bf00      	nop
 800dcce:	e7fe      	b.n	800dcce <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	3318      	adds	r3, #24
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fe fe94 	bl	800ca02 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcda:	4b1d      	ldr	r3, [pc, #116]	; (800dd50 <xTaskRemoveFromEventList+0xb0>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d11c      	bne.n	800dd1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	3304      	adds	r3, #4
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fe fe8b 	bl	800ca02 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	409a      	lsls	r2, r3
 800dcf4:	4b17      	ldr	r3, [pc, #92]	; (800dd54 <xTaskRemoveFromEventList+0xb4>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	4a16      	ldr	r2, [pc, #88]	; (800dd54 <xTaskRemoveFromEventList+0xb4>)
 800dcfc:	6013      	str	r3, [r2, #0]
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd02:	4613      	mov	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4413      	add	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4a13      	ldr	r2, [pc, #76]	; (800dd58 <xTaskRemoveFromEventList+0xb8>)
 800dd0c:	441a      	add	r2, r3
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	3304      	adds	r3, #4
 800dd12:	4619      	mov	r1, r3
 800dd14:	4610      	mov	r0, r2
 800dd16:	f7fe fe17 	bl	800c948 <vListInsertEnd>
 800dd1a:	e005      	b.n	800dd28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	3318      	adds	r3, #24
 800dd20:	4619      	mov	r1, r3
 800dd22:	480e      	ldr	r0, [pc, #56]	; (800dd5c <xTaskRemoveFromEventList+0xbc>)
 800dd24:	f7fe fe10 	bl	800c948 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd2c:	4b0c      	ldr	r3, [pc, #48]	; (800dd60 <xTaskRemoveFromEventList+0xc0>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d905      	bls.n	800dd42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd36:	2301      	movs	r3, #1
 800dd38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dd3a:	4b0a      	ldr	r3, [pc, #40]	; (800dd64 <xTaskRemoveFromEventList+0xc4>)
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	601a      	str	r2, [r3, #0]
 800dd40:	e001      	b.n	800dd46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800dd42:	2300      	movs	r3, #0
 800dd44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dd46:	697b      	ldr	r3, [r7, #20]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3718      	adds	r7, #24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	20001408 	.word	0x20001408
 800dd54:	200013e8 	.word	0x200013e8
 800dd58:	200012e4 	.word	0x200012e4
 800dd5c:	200013a0 	.word	0x200013a0
 800dd60:	200012e0 	.word	0x200012e0
 800dd64:	200013f4 	.word	0x200013f4

0800dd68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd70:	4b06      	ldr	r3, [pc, #24]	; (800dd8c <vTaskInternalSetTimeOutState+0x24>)
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd78:	4b05      	ldr	r3, [pc, #20]	; (800dd90 <vTaskInternalSetTimeOutState+0x28>)
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	605a      	str	r2, [r3, #4]
}
 800dd80:	bf00      	nop
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	200013f8 	.word	0x200013f8
 800dd90:	200013e4 	.word	0x200013e4

0800dd94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b088      	sub	sp, #32
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10c      	bne.n	800ddbe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda8:	b672      	cpsid	i
 800ddaa:	f383 8811 	msr	BASEPRI, r3
 800ddae:	f3bf 8f6f 	isb	sy
 800ddb2:	f3bf 8f4f 	dsb	sy
 800ddb6:	b662      	cpsie	i
 800ddb8:	613b      	str	r3, [r7, #16]
}
 800ddba:	bf00      	nop
 800ddbc:	e7fe      	b.n	800ddbc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10c      	bne.n	800ddde <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ddc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc8:	b672      	cpsid	i
 800ddca:	f383 8811 	msr	BASEPRI, r3
 800ddce:	f3bf 8f6f 	isb	sy
 800ddd2:	f3bf 8f4f 	dsb	sy
 800ddd6:	b662      	cpsie	i
 800ddd8:	60fb      	str	r3, [r7, #12]
}
 800ddda:	bf00      	nop
 800dddc:	e7fe      	b.n	800dddc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ddde:	f000 fb45 	bl	800e46c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dde2:	4b1d      	ldr	r3, [pc, #116]	; (800de58 <xTaskCheckForTimeOut+0xc4>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	69ba      	ldr	r2, [r7, #24]
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddfa:	d102      	bne.n	800de02 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	61fb      	str	r3, [r7, #28]
 800de00:	e023      	b.n	800de4a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	4b15      	ldr	r3, [pc, #84]	; (800de5c <xTaskCheckForTimeOut+0xc8>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d007      	beq.n	800de1e <xTaskCheckForTimeOut+0x8a>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	69ba      	ldr	r2, [r7, #24]
 800de14:	429a      	cmp	r2, r3
 800de16:	d302      	bcc.n	800de1e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800de18:	2301      	movs	r3, #1
 800de1a:	61fb      	str	r3, [r7, #28]
 800de1c:	e015      	b.n	800de4a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	697a      	ldr	r2, [r7, #20]
 800de24:	429a      	cmp	r2, r3
 800de26:	d20b      	bcs.n	800de40 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	1ad2      	subs	r2, r2, r3
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7ff ff97 	bl	800dd68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de3a:	2300      	movs	r3, #0
 800de3c:	61fb      	str	r3, [r7, #28]
 800de3e:	e004      	b.n	800de4a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	2200      	movs	r2, #0
 800de44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de46:	2301      	movs	r3, #1
 800de48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de4a:	f000 fb43 	bl	800e4d4 <vPortExitCritical>

	return xReturn;
 800de4e:	69fb      	ldr	r3, [r7, #28]
}
 800de50:	4618      	mov	r0, r3
 800de52:	3720      	adds	r7, #32
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	200013e4 	.word	0x200013e4
 800de5c:	200013f8 	.word	0x200013f8

0800de60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de60:	b480      	push	{r7}
 800de62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800de64:	4b03      	ldr	r3, [pc, #12]	; (800de74 <vTaskMissedYield+0x14>)
 800de66:	2201      	movs	r2, #1
 800de68:	601a      	str	r2, [r3, #0]
}
 800de6a:	bf00      	nop
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr
 800de74:	200013f4 	.word	0x200013f4

0800de78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de80:	f000 f852 	bl	800df28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de84:	4b06      	ldr	r3, [pc, #24]	; (800dea0 <prvIdleTask+0x28>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d9f9      	bls.n	800de80 <prvIdleTask+0x8>
			{
				taskYIELD();
 800de8c:	4b05      	ldr	r3, [pc, #20]	; (800dea4 <prvIdleTask+0x2c>)
 800de8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de92:	601a      	str	r2, [r3, #0]
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800de9c:	e7f0      	b.n	800de80 <prvIdleTask+0x8>
 800de9e:	bf00      	nop
 800dea0:	200012e4 	.word	0x200012e4
 800dea4:	e000ed04 	.word	0xe000ed04

0800dea8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800deae:	2300      	movs	r3, #0
 800deb0:	607b      	str	r3, [r7, #4]
 800deb2:	e00c      	b.n	800dece <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	4613      	mov	r3, r2
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	4a12      	ldr	r2, [pc, #72]	; (800df08 <prvInitialiseTaskLists+0x60>)
 800dec0:	4413      	add	r3, r2
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fe fd13 	bl	800c8ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	3301      	adds	r3, #1
 800decc:	607b      	str	r3, [r7, #4]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2b06      	cmp	r3, #6
 800ded2:	d9ef      	bls.n	800deb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ded4:	480d      	ldr	r0, [pc, #52]	; (800df0c <prvInitialiseTaskLists+0x64>)
 800ded6:	f7fe fd0a 	bl	800c8ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800deda:	480d      	ldr	r0, [pc, #52]	; (800df10 <prvInitialiseTaskLists+0x68>)
 800dedc:	f7fe fd07 	bl	800c8ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dee0:	480c      	ldr	r0, [pc, #48]	; (800df14 <prvInitialiseTaskLists+0x6c>)
 800dee2:	f7fe fd04 	bl	800c8ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dee6:	480c      	ldr	r0, [pc, #48]	; (800df18 <prvInitialiseTaskLists+0x70>)
 800dee8:	f7fe fd01 	bl	800c8ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800deec:	480b      	ldr	r0, [pc, #44]	; (800df1c <prvInitialiseTaskLists+0x74>)
 800deee:	f7fe fcfe 	bl	800c8ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800def2:	4b0b      	ldr	r3, [pc, #44]	; (800df20 <prvInitialiseTaskLists+0x78>)
 800def4:	4a05      	ldr	r2, [pc, #20]	; (800df0c <prvInitialiseTaskLists+0x64>)
 800def6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800def8:	4b0a      	ldr	r3, [pc, #40]	; (800df24 <prvInitialiseTaskLists+0x7c>)
 800defa:	4a05      	ldr	r2, [pc, #20]	; (800df10 <prvInitialiseTaskLists+0x68>)
 800defc:	601a      	str	r2, [r3, #0]
}
 800defe:	bf00      	nop
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	200012e4 	.word	0x200012e4
 800df0c:	20001370 	.word	0x20001370
 800df10:	20001384 	.word	0x20001384
 800df14:	200013a0 	.word	0x200013a0
 800df18:	200013b4 	.word	0x200013b4
 800df1c:	200013cc 	.word	0x200013cc
 800df20:	20001398 	.word	0x20001398
 800df24:	2000139c 	.word	0x2000139c

0800df28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df2e:	e019      	b.n	800df64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df30:	f000 fa9c 	bl	800e46c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df34:	4b10      	ldr	r3, [pc, #64]	; (800df78 <prvCheckTasksWaitingTermination+0x50>)
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3304      	adds	r3, #4
 800df40:	4618      	mov	r0, r3
 800df42:	f7fe fd5e 	bl	800ca02 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df46:	4b0d      	ldr	r3, [pc, #52]	; (800df7c <prvCheckTasksWaitingTermination+0x54>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	3b01      	subs	r3, #1
 800df4c:	4a0b      	ldr	r2, [pc, #44]	; (800df7c <prvCheckTasksWaitingTermination+0x54>)
 800df4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df50:	4b0b      	ldr	r3, [pc, #44]	; (800df80 <prvCheckTasksWaitingTermination+0x58>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	3b01      	subs	r3, #1
 800df56:	4a0a      	ldr	r2, [pc, #40]	; (800df80 <prvCheckTasksWaitingTermination+0x58>)
 800df58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df5a:	f000 fabb 	bl	800e4d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 f810 	bl	800df84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df64:	4b06      	ldr	r3, [pc, #24]	; (800df80 <prvCheckTasksWaitingTermination+0x58>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d1e1      	bne.n	800df30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df6c:	bf00      	nop
 800df6e:	bf00      	nop
 800df70:	3708      	adds	r7, #8
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	200013b4 	.word	0x200013b4
 800df7c:	200013e0 	.word	0x200013e0
 800df80:	200013c8 	.word	0x200013c8

0800df84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	334c      	adds	r3, #76	; 0x4c
 800df90:	4618      	mov	r0, r3
 800df92:	f000 fe1b 	bl	800ebcc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d108      	bne.n	800dfb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f000 fc13 	bl	800e7d0 <vPortFree>
				vPortFree( pxTCB );
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 fc10 	bl	800e7d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dfb0:	e01a      	b.n	800dfe8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d103      	bne.n	800dfc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 fc07 	bl	800e7d0 <vPortFree>
	}
 800dfc2:	e011      	b.n	800dfe8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800dfca:	2b02      	cmp	r3, #2
 800dfcc:	d00c      	beq.n	800dfe8 <prvDeleteTCB+0x64>
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	b672      	cpsid	i
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	b662      	cpsie	i
 800dfe2:	60fb      	str	r3, [r7, #12]
}
 800dfe4:	bf00      	nop
 800dfe6:	e7fe      	b.n	800dfe6 <prvDeleteTCB+0x62>
	}
 800dfe8:	bf00      	nop
 800dfea:	3710      	adds	r7, #16
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dff6:	4b0c      	ldr	r3, [pc, #48]	; (800e028 <prvResetNextTaskUnblockTime+0x38>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d104      	bne.n	800e00a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e000:	4b0a      	ldr	r3, [pc, #40]	; (800e02c <prvResetNextTaskUnblockTime+0x3c>)
 800e002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e006:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e008:	e008      	b.n	800e01c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e00a:	4b07      	ldr	r3, [pc, #28]	; (800e028 <prvResetNextTaskUnblockTime+0x38>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	4a04      	ldr	r2, [pc, #16]	; (800e02c <prvResetNextTaskUnblockTime+0x3c>)
 800e01a:	6013      	str	r3, [r2, #0]
}
 800e01c:	bf00      	nop
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr
 800e028:	20001398 	.word	0x20001398
 800e02c:	20001400 	.word	0x20001400

0800e030 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e036:	4b0b      	ldr	r3, [pc, #44]	; (800e064 <xTaskGetSchedulerState+0x34>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d102      	bne.n	800e044 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e03e:	2301      	movs	r3, #1
 800e040:	607b      	str	r3, [r7, #4]
 800e042:	e008      	b.n	800e056 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e044:	4b08      	ldr	r3, [pc, #32]	; (800e068 <xTaskGetSchedulerState+0x38>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d102      	bne.n	800e052 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e04c:	2302      	movs	r3, #2
 800e04e:	607b      	str	r3, [r7, #4]
 800e050:	e001      	b.n	800e056 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e052:	2300      	movs	r3, #0
 800e054:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e056:	687b      	ldr	r3, [r7, #4]
	}
 800e058:	4618      	mov	r0, r3
 800e05a:	370c      	adds	r7, #12
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr
 800e064:	200013ec 	.word	0x200013ec
 800e068:	20001408 	.word	0x20001408

0800e06c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b086      	sub	sp, #24
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e078:	2300      	movs	r3, #0
 800e07a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d072      	beq.n	800e168 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e082:	4b3c      	ldr	r3, [pc, #240]	; (800e174 <xTaskPriorityDisinherit+0x108>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	693a      	ldr	r2, [r7, #16]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d00c      	beq.n	800e0a6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e090:	b672      	cpsid	i
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	b662      	cpsie	i
 800e0a0:	60fb      	str	r3, [r7, #12]
}
 800e0a2:	bf00      	nop
 800e0a4:	e7fe      	b.n	800e0a4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10c      	bne.n	800e0c8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b2:	b672      	cpsid	i
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	b662      	cpsie	i
 800e0c2:	60bb      	str	r3, [r7, #8]
}
 800e0c4:	bf00      	nop
 800e0c6:	e7fe      	b.n	800e0c6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0cc:	1e5a      	subs	r2, r3, #1
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d044      	beq.n	800e168 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d140      	bne.n	800e168 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	3304      	adds	r3, #4
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fe fc89 	bl	800ca02 <uxListRemove>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d115      	bne.n	800e122 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0fa:	491f      	ldr	r1, [pc, #124]	; (800e178 <xTaskPriorityDisinherit+0x10c>)
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	4413      	add	r3, r2
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	440b      	add	r3, r1
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10a      	bne.n	800e122 <xTaskPriorityDisinherit+0xb6>
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e110:	2201      	movs	r2, #1
 800e112:	fa02 f303 	lsl.w	r3, r2, r3
 800e116:	43da      	mvns	r2, r3
 800e118:	4b18      	ldr	r3, [pc, #96]	; (800e17c <xTaskPriorityDisinherit+0x110>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4013      	ands	r3, r2
 800e11e:	4a17      	ldr	r2, [pc, #92]	; (800e17c <xTaskPriorityDisinherit+0x110>)
 800e120:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12e:	f1c3 0207 	rsb	r2, r3, #7
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e13a:	2201      	movs	r2, #1
 800e13c:	409a      	lsls	r2, r3
 800e13e:	4b0f      	ldr	r3, [pc, #60]	; (800e17c <xTaskPriorityDisinherit+0x110>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4313      	orrs	r3, r2
 800e144:	4a0d      	ldr	r2, [pc, #52]	; (800e17c <xTaskPriorityDisinherit+0x110>)
 800e146:	6013      	str	r3, [r2, #0]
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e14c:	4613      	mov	r3, r2
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	4413      	add	r3, r2
 800e152:	009b      	lsls	r3, r3, #2
 800e154:	4a08      	ldr	r2, [pc, #32]	; (800e178 <xTaskPriorityDisinherit+0x10c>)
 800e156:	441a      	add	r2, r3
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	3304      	adds	r3, #4
 800e15c:	4619      	mov	r1, r3
 800e15e:	4610      	mov	r0, r2
 800e160:	f7fe fbf2 	bl	800c948 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e164:	2301      	movs	r3, #1
 800e166:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e168:	697b      	ldr	r3, [r7, #20]
	}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3718      	adds	r7, #24
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	200012e0 	.word	0x200012e0
 800e178:	200012e4 	.word	0x200012e4
 800e17c:	200013e8 	.word	0x200013e8

0800e180 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e18a:	4b29      	ldr	r3, [pc, #164]	; (800e230 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e190:	4b28      	ldr	r3, [pc, #160]	; (800e234 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	3304      	adds	r3, #4
 800e196:	4618      	mov	r0, r3
 800e198:	f7fe fc33 	bl	800ca02 <uxListRemove>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d10b      	bne.n	800e1ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e1a2:	4b24      	ldr	r3, [pc, #144]	; (800e234 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ae:	43da      	mvns	r2, r3
 800e1b0:	4b21      	ldr	r3, [pc, #132]	; (800e238 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	4a20      	ldr	r2, [pc, #128]	; (800e238 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e1b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1c0:	d10a      	bne.n	800e1d8 <prvAddCurrentTaskToDelayedList+0x58>
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d007      	beq.n	800e1d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1c8:	4b1a      	ldr	r3, [pc, #104]	; (800e234 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	481a      	ldr	r0, [pc, #104]	; (800e23c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e1d2:	f7fe fbb9 	bl	800c948 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e1d6:	e026      	b.n	800e226 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4413      	add	r3, r2
 800e1de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e1e0:	4b14      	ldr	r3, [pc, #80]	; (800e234 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	68ba      	ldr	r2, [r7, #8]
 800e1e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d209      	bcs.n	800e204 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1f0:	4b13      	ldr	r3, [pc, #76]	; (800e240 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	4b0f      	ldr	r3, [pc, #60]	; (800e234 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	3304      	adds	r3, #4
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	f7fe fbc7 	bl	800c990 <vListInsert>
}
 800e202:	e010      	b.n	800e226 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e204:	4b0f      	ldr	r3, [pc, #60]	; (800e244 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	4b0a      	ldr	r3, [pc, #40]	; (800e234 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3304      	adds	r3, #4
 800e20e:	4619      	mov	r1, r3
 800e210:	4610      	mov	r0, r2
 800e212:	f7fe fbbd 	bl	800c990 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e216:	4b0c      	ldr	r3, [pc, #48]	; (800e248 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	68ba      	ldr	r2, [r7, #8]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d202      	bcs.n	800e226 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e220:	4a09      	ldr	r2, [pc, #36]	; (800e248 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	6013      	str	r3, [r2, #0]
}
 800e226:	bf00      	nop
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	200013e4 	.word	0x200013e4
 800e234:	200012e0 	.word	0x200012e0
 800e238:	200013e8 	.word	0x200013e8
 800e23c:	200013cc 	.word	0x200013cc
 800e240:	2000139c 	.word	0x2000139c
 800e244:	20001398 	.word	0x20001398
 800e248:	20001400 	.word	0x20001400

0800e24c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	3b04      	subs	r3, #4
 800e25c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	3b04      	subs	r3, #4
 800e26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	f023 0201 	bic.w	r2, r3, #1
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	3b04      	subs	r3, #4
 800e27a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e27c:	4a0c      	ldr	r2, [pc, #48]	; (800e2b0 <pxPortInitialiseStack+0x64>)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3b14      	subs	r3, #20
 800e286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	3b04      	subs	r3, #4
 800e292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f06f 0202 	mvn.w	r2, #2
 800e29a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	3b20      	subs	r3, #32
 800e2a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3714      	adds	r7, #20
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr
 800e2b0:	0800e2b5 	.word	0x0800e2b5

0800e2b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e2be:	4b14      	ldr	r3, [pc, #80]	; (800e310 <prvTaskExitError+0x5c>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2c6:	d00c      	beq.n	800e2e2 <prvTaskExitError+0x2e>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	b672      	cpsid	i
 800e2ce:	f383 8811 	msr	BASEPRI, r3
 800e2d2:	f3bf 8f6f 	isb	sy
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	b662      	cpsie	i
 800e2dc:	60fb      	str	r3, [r7, #12]
}
 800e2de:	bf00      	nop
 800e2e0:	e7fe      	b.n	800e2e0 <prvTaskExitError+0x2c>
	__asm volatile
 800e2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e6:	b672      	cpsid	i
 800e2e8:	f383 8811 	msr	BASEPRI, r3
 800e2ec:	f3bf 8f6f 	isb	sy
 800e2f0:	f3bf 8f4f 	dsb	sy
 800e2f4:	b662      	cpsie	i
 800e2f6:	60bb      	str	r3, [r7, #8]
}
 800e2f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e2fa:	bf00      	nop
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0fc      	beq.n	800e2fc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e302:	bf00      	nop
 800e304:	bf00      	nop
 800e306:	3714      	adds	r7, #20
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	20000054 	.word	0x20000054
	...

0800e320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e320:	4b07      	ldr	r3, [pc, #28]	; (800e340 <pxCurrentTCBConst2>)
 800e322:	6819      	ldr	r1, [r3, #0]
 800e324:	6808      	ldr	r0, [r1, #0]
 800e326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e32a:	f380 8809 	msr	PSP, r0
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f04f 0000 	mov.w	r0, #0
 800e336:	f380 8811 	msr	BASEPRI, r0
 800e33a:	4770      	bx	lr
 800e33c:	f3af 8000 	nop.w

0800e340 <pxCurrentTCBConst2>:
 800e340:	200012e0 	.word	0x200012e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e344:	bf00      	nop
 800e346:	bf00      	nop

0800e348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e348:	4808      	ldr	r0, [pc, #32]	; (800e36c <prvPortStartFirstTask+0x24>)
 800e34a:	6800      	ldr	r0, [r0, #0]
 800e34c:	6800      	ldr	r0, [r0, #0]
 800e34e:	f380 8808 	msr	MSP, r0
 800e352:	f04f 0000 	mov.w	r0, #0
 800e356:	f380 8814 	msr	CONTROL, r0
 800e35a:	b662      	cpsie	i
 800e35c:	b661      	cpsie	f
 800e35e:	f3bf 8f4f 	dsb	sy
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	df00      	svc	0
 800e368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e36a:	bf00      	nop
 800e36c:	e000ed08 	.word	0xe000ed08

0800e370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e376:	4b37      	ldr	r3, [pc, #220]	; (800e454 <xPortStartScheduler+0xe4>)
 800e378:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	22ff      	movs	r2, #255	; 0xff
 800e386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e390:	78fb      	ldrb	r3, [r7, #3]
 800e392:	b2db      	uxtb	r3, r3
 800e394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e398:	b2da      	uxtb	r2, r3
 800e39a:	4b2f      	ldr	r3, [pc, #188]	; (800e458 <xPortStartScheduler+0xe8>)
 800e39c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e39e:	4b2f      	ldr	r3, [pc, #188]	; (800e45c <xPortStartScheduler+0xec>)
 800e3a0:	2207      	movs	r2, #7
 800e3a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3a4:	e009      	b.n	800e3ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e3a6:	4b2d      	ldr	r3, [pc, #180]	; (800e45c <xPortStartScheduler+0xec>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	3b01      	subs	r3, #1
 800e3ac:	4a2b      	ldr	r2, [pc, #172]	; (800e45c <xPortStartScheduler+0xec>)
 800e3ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e3b0:	78fb      	ldrb	r3, [r7, #3]
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	005b      	lsls	r3, r3, #1
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3ba:	78fb      	ldrb	r3, [r7, #3]
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3c2:	2b80      	cmp	r3, #128	; 0x80
 800e3c4:	d0ef      	beq.n	800e3a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e3c6:	4b25      	ldr	r3, [pc, #148]	; (800e45c <xPortStartScheduler+0xec>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f1c3 0307 	rsb	r3, r3, #7
 800e3ce:	2b04      	cmp	r3, #4
 800e3d0:	d00c      	beq.n	800e3ec <xPortStartScheduler+0x7c>
	__asm volatile
 800e3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d6:	b672      	cpsid	i
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	b662      	cpsie	i
 800e3e6:	60bb      	str	r3, [r7, #8]
}
 800e3e8:	bf00      	nop
 800e3ea:	e7fe      	b.n	800e3ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e3ec:	4b1b      	ldr	r3, [pc, #108]	; (800e45c <xPortStartScheduler+0xec>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	021b      	lsls	r3, r3, #8
 800e3f2:	4a1a      	ldr	r2, [pc, #104]	; (800e45c <xPortStartScheduler+0xec>)
 800e3f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e3f6:	4b19      	ldr	r3, [pc, #100]	; (800e45c <xPortStartScheduler+0xec>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e3fe:	4a17      	ldr	r2, [pc, #92]	; (800e45c <xPortStartScheduler+0xec>)
 800e400:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	b2da      	uxtb	r2, r3
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e40a:	4b15      	ldr	r3, [pc, #84]	; (800e460 <xPortStartScheduler+0xf0>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a14      	ldr	r2, [pc, #80]	; (800e460 <xPortStartScheduler+0xf0>)
 800e410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e414:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e416:	4b12      	ldr	r3, [pc, #72]	; (800e460 <xPortStartScheduler+0xf0>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4a11      	ldr	r2, [pc, #68]	; (800e460 <xPortStartScheduler+0xf0>)
 800e41c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e420:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e422:	f000 f8dd 	bl	800e5e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e426:	4b0f      	ldr	r3, [pc, #60]	; (800e464 <xPortStartScheduler+0xf4>)
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e42c:	f000 f8fc 	bl	800e628 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e430:	4b0d      	ldr	r3, [pc, #52]	; (800e468 <xPortStartScheduler+0xf8>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4a0c      	ldr	r2, [pc, #48]	; (800e468 <xPortStartScheduler+0xf8>)
 800e436:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e43a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e43c:	f7ff ff84 	bl	800e348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e440:	f7ff fba4 	bl	800db8c <vTaskSwitchContext>
	prvTaskExitError();
 800e444:	f7ff ff36 	bl	800e2b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	e000e400 	.word	0xe000e400
 800e458:	2000140c 	.word	0x2000140c
 800e45c:	20001410 	.word	0x20001410
 800e460:	e000ed20 	.word	0xe000ed20
 800e464:	20000054 	.word	0x20000054
 800e468:	e000ef34 	.word	0xe000ef34

0800e46c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
	__asm volatile
 800e472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e476:	b672      	cpsid	i
 800e478:	f383 8811 	msr	BASEPRI, r3
 800e47c:	f3bf 8f6f 	isb	sy
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	b662      	cpsie	i
 800e486:	607b      	str	r3, [r7, #4]
}
 800e488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e48a:	4b10      	ldr	r3, [pc, #64]	; (800e4cc <vPortEnterCritical+0x60>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	3301      	adds	r3, #1
 800e490:	4a0e      	ldr	r2, [pc, #56]	; (800e4cc <vPortEnterCritical+0x60>)
 800e492:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e494:	4b0d      	ldr	r3, [pc, #52]	; (800e4cc <vPortEnterCritical+0x60>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d111      	bne.n	800e4c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e49c:	4b0c      	ldr	r3, [pc, #48]	; (800e4d0 <vPortEnterCritical+0x64>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00c      	beq.n	800e4c0 <vPortEnterCritical+0x54>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4aa:	b672      	cpsid	i
 800e4ac:	f383 8811 	msr	BASEPRI, r3
 800e4b0:	f3bf 8f6f 	isb	sy
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	b662      	cpsie	i
 800e4ba:	603b      	str	r3, [r7, #0]
}
 800e4bc:	bf00      	nop
 800e4be:	e7fe      	b.n	800e4be <vPortEnterCritical+0x52>
	}
}
 800e4c0:	bf00      	nop
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr
 800e4cc:	20000054 	.word	0x20000054
 800e4d0:	e000ed04 	.word	0xe000ed04

0800e4d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e4da:	4b13      	ldr	r3, [pc, #76]	; (800e528 <vPortExitCritical+0x54>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d10c      	bne.n	800e4fc <vPortExitCritical+0x28>
	__asm volatile
 800e4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e6:	b672      	cpsid	i
 800e4e8:	f383 8811 	msr	BASEPRI, r3
 800e4ec:	f3bf 8f6f 	isb	sy
 800e4f0:	f3bf 8f4f 	dsb	sy
 800e4f4:	b662      	cpsie	i
 800e4f6:	607b      	str	r3, [r7, #4]
}
 800e4f8:	bf00      	nop
 800e4fa:	e7fe      	b.n	800e4fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e4fc:	4b0a      	ldr	r3, [pc, #40]	; (800e528 <vPortExitCritical+0x54>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	3b01      	subs	r3, #1
 800e502:	4a09      	ldr	r2, [pc, #36]	; (800e528 <vPortExitCritical+0x54>)
 800e504:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e506:	4b08      	ldr	r3, [pc, #32]	; (800e528 <vPortExitCritical+0x54>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d105      	bne.n	800e51a <vPortExitCritical+0x46>
 800e50e:	2300      	movs	r3, #0
 800e510:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e518:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e51a:	bf00      	nop
 800e51c:	370c      	adds	r7, #12
 800e51e:	46bd      	mov	sp, r7
 800e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop
 800e528:	20000054 	.word	0x20000054
 800e52c:	00000000 	.word	0x00000000

0800e530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e530:	f3ef 8009 	mrs	r0, PSP
 800e534:	f3bf 8f6f 	isb	sy
 800e538:	4b15      	ldr	r3, [pc, #84]	; (800e590 <pxCurrentTCBConst>)
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	f01e 0f10 	tst.w	lr, #16
 800e540:	bf08      	it	eq
 800e542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54a:	6010      	str	r0, [r2, #0]
 800e54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e550:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e554:	b672      	cpsid	i
 800e556:	f380 8811 	msr	BASEPRI, r0
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	f3bf 8f6f 	isb	sy
 800e562:	b662      	cpsie	i
 800e564:	f7ff fb12 	bl	800db8c <vTaskSwitchContext>
 800e568:	f04f 0000 	mov.w	r0, #0
 800e56c:	f380 8811 	msr	BASEPRI, r0
 800e570:	bc09      	pop	{r0, r3}
 800e572:	6819      	ldr	r1, [r3, #0]
 800e574:	6808      	ldr	r0, [r1, #0]
 800e576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e57a:	f01e 0f10 	tst.w	lr, #16
 800e57e:	bf08      	it	eq
 800e580:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e584:	f380 8809 	msr	PSP, r0
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	4770      	bx	lr
 800e58e:	bf00      	nop

0800e590 <pxCurrentTCBConst>:
 800e590:	200012e0 	.word	0x200012e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e594:	bf00      	nop
 800e596:	bf00      	nop

0800e598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
	__asm volatile
 800e59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a2:	b672      	cpsid	i
 800e5a4:	f383 8811 	msr	BASEPRI, r3
 800e5a8:	f3bf 8f6f 	isb	sy
 800e5ac:	f3bf 8f4f 	dsb	sy
 800e5b0:	b662      	cpsie	i
 800e5b2:	607b      	str	r3, [r7, #4]
}
 800e5b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e5b6:	f7ff fa2f 	bl	800da18 <xTaskIncrementTick>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d003      	beq.n	800e5c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5c0:	4b06      	ldr	r3, [pc, #24]	; (800e5dc <SysTick_Handler+0x44>)
 800e5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5c6:	601a      	str	r2, [r3, #0]
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	f383 8811 	msr	BASEPRI, r3
}
 800e5d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e5d4:	bf00      	nop
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	e000ed04 	.word	0xe000ed04

0800e5e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e5e4:	4b0b      	ldr	r3, [pc, #44]	; (800e614 <vPortSetupTimerInterrupt+0x34>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e5ea:	4b0b      	ldr	r3, [pc, #44]	; (800e618 <vPortSetupTimerInterrupt+0x38>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5f0:	4b0a      	ldr	r3, [pc, #40]	; (800e61c <vPortSetupTimerInterrupt+0x3c>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a0a      	ldr	r2, [pc, #40]	; (800e620 <vPortSetupTimerInterrupt+0x40>)
 800e5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e5fa:	099b      	lsrs	r3, r3, #6
 800e5fc:	4a09      	ldr	r2, [pc, #36]	; (800e624 <vPortSetupTimerInterrupt+0x44>)
 800e5fe:	3b01      	subs	r3, #1
 800e600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e602:	4b04      	ldr	r3, [pc, #16]	; (800e614 <vPortSetupTimerInterrupt+0x34>)
 800e604:	2207      	movs	r2, #7
 800e606:	601a      	str	r2, [r3, #0]
}
 800e608:	bf00      	nop
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	e000e010 	.word	0xe000e010
 800e618:	e000e018 	.word	0xe000e018
 800e61c:	20000048 	.word	0x20000048
 800e620:	10624dd3 	.word	0x10624dd3
 800e624:	e000e014 	.word	0xe000e014

0800e628 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e628:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e638 <vPortEnableVFP+0x10>
 800e62c:	6801      	ldr	r1, [r0, #0]
 800e62e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e632:	6001      	str	r1, [r0, #0]
 800e634:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e636:	bf00      	nop
 800e638:	e000ed88 	.word	0xe000ed88

0800e63c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b08a      	sub	sp, #40	; 0x28
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e644:	2300      	movs	r3, #0
 800e646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e648:	f7ff f92a 	bl	800d8a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e64c:	4b5b      	ldr	r3, [pc, #364]	; (800e7bc <pvPortMalloc+0x180>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d101      	bne.n	800e658 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e654:	f000 f91a 	bl	800e88c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e658:	4b59      	ldr	r3, [pc, #356]	; (800e7c0 <pvPortMalloc+0x184>)
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4013      	ands	r3, r2
 800e660:	2b00      	cmp	r3, #0
 800e662:	f040 8092 	bne.w	800e78a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d01f      	beq.n	800e6ac <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e66c:	2208      	movs	r2, #8
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4413      	add	r3, r2
 800e672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f003 0307 	and.w	r3, r3, #7
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d016      	beq.n	800e6ac <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f023 0307 	bic.w	r3, r3, #7
 800e684:	3308      	adds	r3, #8
 800e686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f003 0307 	and.w	r3, r3, #7
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d00c      	beq.n	800e6ac <pvPortMalloc+0x70>
	__asm volatile
 800e692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e696:	b672      	cpsid	i
 800e698:	f383 8811 	msr	BASEPRI, r3
 800e69c:	f3bf 8f6f 	isb	sy
 800e6a0:	f3bf 8f4f 	dsb	sy
 800e6a4:	b662      	cpsie	i
 800e6a6:	617b      	str	r3, [r7, #20]
}
 800e6a8:	bf00      	nop
 800e6aa:	e7fe      	b.n	800e6aa <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d06b      	beq.n	800e78a <pvPortMalloc+0x14e>
 800e6b2:	4b44      	ldr	r3, [pc, #272]	; (800e7c4 <pvPortMalloc+0x188>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d866      	bhi.n	800e78a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e6bc:	4b42      	ldr	r3, [pc, #264]	; (800e7c8 <pvPortMalloc+0x18c>)
 800e6be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e6c0:	4b41      	ldr	r3, [pc, #260]	; (800e7c8 <pvPortMalloc+0x18c>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6c6:	e004      	b.n	800e6d2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d903      	bls.n	800e6e4 <pvPortMalloc+0xa8>
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d1f1      	bne.n	800e6c8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e6e4:	4b35      	ldr	r3, [pc, #212]	; (800e7bc <pvPortMalloc+0x180>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d04d      	beq.n	800e78a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e6ee:	6a3b      	ldr	r3, [r7, #32]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2208      	movs	r2, #8
 800e6f4:	4413      	add	r3, r2
 800e6f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	6a3b      	ldr	r3, [r7, #32]
 800e6fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e702:	685a      	ldr	r2, [r3, #4]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	1ad2      	subs	r2, r2, r3
 800e708:	2308      	movs	r3, #8
 800e70a:	005b      	lsls	r3, r3, #1
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d921      	bls.n	800e754 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	4413      	add	r3, r2
 800e716:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	f003 0307 	and.w	r3, r3, #7
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00c      	beq.n	800e73c <pvPortMalloc+0x100>
	__asm volatile
 800e722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e726:	b672      	cpsid	i
 800e728:	f383 8811 	msr	BASEPRI, r3
 800e72c:	f3bf 8f6f 	isb	sy
 800e730:	f3bf 8f4f 	dsb	sy
 800e734:	b662      	cpsie	i
 800e736:	613b      	str	r3, [r7, #16]
}
 800e738:	bf00      	nop
 800e73a:	e7fe      	b.n	800e73a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73e:	685a      	ldr	r2, [r3, #4]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	1ad2      	subs	r2, r2, r3
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e74e:	69b8      	ldr	r0, [r7, #24]
 800e750:	f000 f8fe 	bl	800e950 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e754:	4b1b      	ldr	r3, [pc, #108]	; (800e7c4 <pvPortMalloc+0x188>)
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	4a19      	ldr	r2, [pc, #100]	; (800e7c4 <pvPortMalloc+0x188>)
 800e760:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e762:	4b18      	ldr	r3, [pc, #96]	; (800e7c4 <pvPortMalloc+0x188>)
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	4b19      	ldr	r3, [pc, #100]	; (800e7cc <pvPortMalloc+0x190>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d203      	bcs.n	800e776 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e76e:	4b15      	ldr	r3, [pc, #84]	; (800e7c4 <pvPortMalloc+0x188>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	4a16      	ldr	r2, [pc, #88]	; (800e7cc <pvPortMalloc+0x190>)
 800e774:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e778:	685a      	ldr	r2, [r3, #4]
 800e77a:	4b11      	ldr	r3, [pc, #68]	; (800e7c0 <pvPortMalloc+0x184>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	431a      	orrs	r2, r3
 800e780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e782:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e786:	2200      	movs	r2, #0
 800e788:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e78a:	f7ff f897 	bl	800d8bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	f003 0307 	and.w	r3, r3, #7
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00c      	beq.n	800e7b2 <pvPortMalloc+0x176>
	__asm volatile
 800e798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79c:	b672      	cpsid	i
 800e79e:	f383 8811 	msr	BASEPRI, r3
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	b662      	cpsie	i
 800e7ac:	60fb      	str	r3, [r7, #12]
}
 800e7ae:	bf00      	nop
 800e7b0:	e7fe      	b.n	800e7b0 <pvPortMalloc+0x174>
	return pvReturn;
 800e7b2:	69fb      	ldr	r3, [r7, #28]
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3728      	adds	r7, #40	; 0x28
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	2000501c 	.word	0x2000501c
 800e7c0:	20005028 	.word	0x20005028
 800e7c4:	20005020 	.word	0x20005020
 800e7c8:	20005014 	.word	0x20005014
 800e7cc:	20005024 	.word	0x20005024

0800e7d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b086      	sub	sp, #24
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d04c      	beq.n	800e87c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e7e2:	2308      	movs	r3, #8
 800e7e4:	425b      	negs	r3, r3
 800e7e6:	697a      	ldr	r2, [r7, #20]
 800e7e8:	4413      	add	r3, r2
 800e7ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	685a      	ldr	r2, [r3, #4]
 800e7f4:	4b23      	ldr	r3, [pc, #140]	; (800e884 <vPortFree+0xb4>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4013      	ands	r3, r2
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d10c      	bne.n	800e818 <vPortFree+0x48>
	__asm volatile
 800e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e802:	b672      	cpsid	i
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	b662      	cpsie	i
 800e812:	60fb      	str	r3, [r7, #12]
}
 800e814:	bf00      	nop
 800e816:	e7fe      	b.n	800e816 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00c      	beq.n	800e83a <vPortFree+0x6a>
	__asm volatile
 800e820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e824:	b672      	cpsid	i
 800e826:	f383 8811 	msr	BASEPRI, r3
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	b662      	cpsie	i
 800e834:	60bb      	str	r3, [r7, #8]
}
 800e836:	bf00      	nop
 800e838:	e7fe      	b.n	800e838 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	685a      	ldr	r2, [r3, #4]
 800e83e:	4b11      	ldr	r3, [pc, #68]	; (800e884 <vPortFree+0xb4>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4013      	ands	r3, r2
 800e844:	2b00      	cmp	r3, #0
 800e846:	d019      	beq.n	800e87c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d115      	bne.n	800e87c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	685a      	ldr	r2, [r3, #4]
 800e854:	4b0b      	ldr	r3, [pc, #44]	; (800e884 <vPortFree+0xb4>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	43db      	mvns	r3, r3
 800e85a:	401a      	ands	r2, r3
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e860:	f7ff f81e 	bl	800d8a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	685a      	ldr	r2, [r3, #4]
 800e868:	4b07      	ldr	r3, [pc, #28]	; (800e888 <vPortFree+0xb8>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4413      	add	r3, r2
 800e86e:	4a06      	ldr	r2, [pc, #24]	; (800e888 <vPortFree+0xb8>)
 800e870:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e872:	6938      	ldr	r0, [r7, #16]
 800e874:	f000 f86c 	bl	800e950 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e878:	f7ff f820 	bl	800d8bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e87c:	bf00      	nop
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	20005028 	.word	0x20005028
 800e888:	20005020 	.word	0x20005020

0800e88c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e892:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e896:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e898:	4b27      	ldr	r3, [pc, #156]	; (800e938 <prvHeapInit+0xac>)
 800e89a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f003 0307 	and.w	r3, r3, #7
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d00c      	beq.n	800e8c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	3307      	adds	r3, #7
 800e8aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f023 0307 	bic.w	r3, r3, #7
 800e8b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e8b4:	68ba      	ldr	r2, [r7, #8]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	1ad3      	subs	r3, r2, r3
 800e8ba:	4a1f      	ldr	r2, [pc, #124]	; (800e938 <prvHeapInit+0xac>)
 800e8bc:	4413      	add	r3, r2
 800e8be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e8c4:	4a1d      	ldr	r2, [pc, #116]	; (800e93c <prvHeapInit+0xb0>)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e8ca:	4b1c      	ldr	r3, [pc, #112]	; (800e93c <prvHeapInit+0xb0>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	68ba      	ldr	r2, [r7, #8]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e8d8:	2208      	movs	r2, #8
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	1a9b      	subs	r3, r3, r2
 800e8de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f023 0307 	bic.w	r3, r3, #7
 800e8e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	4a15      	ldr	r2, [pc, #84]	; (800e940 <prvHeapInit+0xb4>)
 800e8ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e8ee:	4b14      	ldr	r3, [pc, #80]	; (800e940 <prvHeapInit+0xb4>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e8f6:	4b12      	ldr	r3, [pc, #72]	; (800e940 <prvHeapInit+0xb4>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	68fa      	ldr	r2, [r7, #12]
 800e906:	1ad2      	subs	r2, r2, r3
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e90c:	4b0c      	ldr	r3, [pc, #48]	; (800e940 <prvHeapInit+0xb4>)
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	4a0a      	ldr	r2, [pc, #40]	; (800e944 <prvHeapInit+0xb8>)
 800e91a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	4a09      	ldr	r2, [pc, #36]	; (800e948 <prvHeapInit+0xbc>)
 800e922:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e924:	4b09      	ldr	r3, [pc, #36]	; (800e94c <prvHeapInit+0xc0>)
 800e926:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e92a:	601a      	str	r2, [r3, #0]
}
 800e92c:	bf00      	nop
 800e92e:	3714      	adds	r7, #20
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr
 800e938:	20001414 	.word	0x20001414
 800e93c:	20005014 	.word	0x20005014
 800e940:	2000501c 	.word	0x2000501c
 800e944:	20005024 	.word	0x20005024
 800e948:	20005020 	.word	0x20005020
 800e94c:	20005028 	.word	0x20005028

0800e950 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e950:	b480      	push	{r7}
 800e952:	b085      	sub	sp, #20
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e958:	4b28      	ldr	r3, [pc, #160]	; (800e9fc <prvInsertBlockIntoFreeList+0xac>)
 800e95a:	60fb      	str	r3, [r7, #12]
 800e95c:	e002      	b.n	800e964 <prvInsertBlockIntoFreeList+0x14>
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	60fb      	str	r3, [r7, #12]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d8f7      	bhi.n	800e95e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	68ba      	ldr	r2, [r7, #8]
 800e978:	4413      	add	r3, r2
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d108      	bne.n	800e992 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	685a      	ldr	r2, [r3, #4]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	441a      	add	r2, r3
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	68ba      	ldr	r2, [r7, #8]
 800e99c:	441a      	add	r2, r3
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d118      	bne.n	800e9d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	4b15      	ldr	r3, [pc, #84]	; (800ea00 <prvInsertBlockIntoFreeList+0xb0>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d00d      	beq.n	800e9ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	685a      	ldr	r2, [r3, #4]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	441a      	add	r2, r3
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	601a      	str	r2, [r3, #0]
 800e9cc:	e008      	b.n	800e9e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ea00 <prvInsertBlockIntoFreeList+0xb0>)
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	e003      	b.n	800e9e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d002      	beq.n	800e9ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e9ee:	bf00      	nop
 800e9f0:	3714      	adds	r7, #20
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	20005014 	.word	0x20005014
 800ea00:	2000501c 	.word	0x2000501c

0800ea04 <__errno>:
 800ea04:	4b01      	ldr	r3, [pc, #4]	; (800ea0c <__errno+0x8>)
 800ea06:	6818      	ldr	r0, [r3, #0]
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	20000058 	.word	0x20000058

0800ea10 <__libc_init_array>:
 800ea10:	b570      	push	{r4, r5, r6, lr}
 800ea12:	4d0d      	ldr	r5, [pc, #52]	; (800ea48 <__libc_init_array+0x38>)
 800ea14:	4c0d      	ldr	r4, [pc, #52]	; (800ea4c <__libc_init_array+0x3c>)
 800ea16:	1b64      	subs	r4, r4, r5
 800ea18:	10a4      	asrs	r4, r4, #2
 800ea1a:	2600      	movs	r6, #0
 800ea1c:	42a6      	cmp	r6, r4
 800ea1e:	d109      	bne.n	800ea34 <__libc_init_array+0x24>
 800ea20:	4d0b      	ldr	r5, [pc, #44]	; (800ea50 <__libc_init_array+0x40>)
 800ea22:	4c0c      	ldr	r4, [pc, #48]	; (800ea54 <__libc_init_array+0x44>)
 800ea24:	f001 fe22 	bl	801066c <_init>
 800ea28:	1b64      	subs	r4, r4, r5
 800ea2a:	10a4      	asrs	r4, r4, #2
 800ea2c:	2600      	movs	r6, #0
 800ea2e:	42a6      	cmp	r6, r4
 800ea30:	d105      	bne.n	800ea3e <__libc_init_array+0x2e>
 800ea32:	bd70      	pop	{r4, r5, r6, pc}
 800ea34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea38:	4798      	blx	r3
 800ea3a:	3601      	adds	r6, #1
 800ea3c:	e7ee      	b.n	800ea1c <__libc_init_array+0xc>
 800ea3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea42:	4798      	blx	r3
 800ea44:	3601      	adds	r6, #1
 800ea46:	e7f2      	b.n	800ea2e <__libc_init_array+0x1e>
 800ea48:	08012b30 	.word	0x08012b30
 800ea4c:	08012b30 	.word	0x08012b30
 800ea50:	08012b30 	.word	0x08012b30
 800ea54:	08012b34 	.word	0x08012b34

0800ea58 <__retarget_lock_acquire_recursive>:
 800ea58:	4770      	bx	lr

0800ea5a <__retarget_lock_release_recursive>:
 800ea5a:	4770      	bx	lr

0800ea5c <memcpy>:
 800ea5c:	440a      	add	r2, r1
 800ea5e:	4291      	cmp	r1, r2
 800ea60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ea64:	d100      	bne.n	800ea68 <memcpy+0xc>
 800ea66:	4770      	bx	lr
 800ea68:	b510      	push	{r4, lr}
 800ea6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea72:	4291      	cmp	r1, r2
 800ea74:	d1f9      	bne.n	800ea6a <memcpy+0xe>
 800ea76:	bd10      	pop	{r4, pc}

0800ea78 <memset>:
 800ea78:	4402      	add	r2, r0
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d100      	bne.n	800ea82 <memset+0xa>
 800ea80:	4770      	bx	lr
 800ea82:	f803 1b01 	strb.w	r1, [r3], #1
 800ea86:	e7f9      	b.n	800ea7c <memset+0x4>

0800ea88 <sbrk_aligned>:
 800ea88:	b570      	push	{r4, r5, r6, lr}
 800ea8a:	4e0e      	ldr	r6, [pc, #56]	; (800eac4 <sbrk_aligned+0x3c>)
 800ea8c:	460c      	mov	r4, r1
 800ea8e:	6831      	ldr	r1, [r6, #0]
 800ea90:	4605      	mov	r5, r0
 800ea92:	b911      	cbnz	r1, 800ea9a <sbrk_aligned+0x12>
 800ea94:	f000 f8f6 	bl	800ec84 <_sbrk_r>
 800ea98:	6030      	str	r0, [r6, #0]
 800ea9a:	4621      	mov	r1, r4
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	f000 f8f1 	bl	800ec84 <_sbrk_r>
 800eaa2:	1c43      	adds	r3, r0, #1
 800eaa4:	d00a      	beq.n	800eabc <sbrk_aligned+0x34>
 800eaa6:	1cc4      	adds	r4, r0, #3
 800eaa8:	f024 0403 	bic.w	r4, r4, #3
 800eaac:	42a0      	cmp	r0, r4
 800eaae:	d007      	beq.n	800eac0 <sbrk_aligned+0x38>
 800eab0:	1a21      	subs	r1, r4, r0
 800eab2:	4628      	mov	r0, r5
 800eab4:	f000 f8e6 	bl	800ec84 <_sbrk_r>
 800eab8:	3001      	adds	r0, #1
 800eaba:	d101      	bne.n	800eac0 <sbrk_aligned+0x38>
 800eabc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800eac0:	4620      	mov	r0, r4
 800eac2:	bd70      	pop	{r4, r5, r6, pc}
 800eac4:	20005034 	.word	0x20005034

0800eac8 <_malloc_r>:
 800eac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eacc:	1ccd      	adds	r5, r1, #3
 800eace:	f025 0503 	bic.w	r5, r5, #3
 800ead2:	3508      	adds	r5, #8
 800ead4:	2d0c      	cmp	r5, #12
 800ead6:	bf38      	it	cc
 800ead8:	250c      	movcc	r5, #12
 800eada:	2d00      	cmp	r5, #0
 800eadc:	4607      	mov	r7, r0
 800eade:	db01      	blt.n	800eae4 <_malloc_r+0x1c>
 800eae0:	42a9      	cmp	r1, r5
 800eae2:	d905      	bls.n	800eaf0 <_malloc_r+0x28>
 800eae4:	230c      	movs	r3, #12
 800eae6:	603b      	str	r3, [r7, #0]
 800eae8:	2600      	movs	r6, #0
 800eaea:	4630      	mov	r0, r6
 800eaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf0:	4e2e      	ldr	r6, [pc, #184]	; (800ebac <_malloc_r+0xe4>)
 800eaf2:	f000 f8f7 	bl	800ece4 <__malloc_lock>
 800eaf6:	6833      	ldr	r3, [r6, #0]
 800eaf8:	461c      	mov	r4, r3
 800eafa:	bb34      	cbnz	r4, 800eb4a <_malloc_r+0x82>
 800eafc:	4629      	mov	r1, r5
 800eafe:	4638      	mov	r0, r7
 800eb00:	f7ff ffc2 	bl	800ea88 <sbrk_aligned>
 800eb04:	1c43      	adds	r3, r0, #1
 800eb06:	4604      	mov	r4, r0
 800eb08:	d14d      	bne.n	800eba6 <_malloc_r+0xde>
 800eb0a:	6834      	ldr	r4, [r6, #0]
 800eb0c:	4626      	mov	r6, r4
 800eb0e:	2e00      	cmp	r6, #0
 800eb10:	d140      	bne.n	800eb94 <_malloc_r+0xcc>
 800eb12:	6823      	ldr	r3, [r4, #0]
 800eb14:	4631      	mov	r1, r6
 800eb16:	4638      	mov	r0, r7
 800eb18:	eb04 0803 	add.w	r8, r4, r3
 800eb1c:	f000 f8b2 	bl	800ec84 <_sbrk_r>
 800eb20:	4580      	cmp	r8, r0
 800eb22:	d13a      	bne.n	800eb9a <_malloc_r+0xd2>
 800eb24:	6821      	ldr	r1, [r4, #0]
 800eb26:	3503      	adds	r5, #3
 800eb28:	1a6d      	subs	r5, r5, r1
 800eb2a:	f025 0503 	bic.w	r5, r5, #3
 800eb2e:	3508      	adds	r5, #8
 800eb30:	2d0c      	cmp	r5, #12
 800eb32:	bf38      	it	cc
 800eb34:	250c      	movcc	r5, #12
 800eb36:	4629      	mov	r1, r5
 800eb38:	4638      	mov	r0, r7
 800eb3a:	f7ff ffa5 	bl	800ea88 <sbrk_aligned>
 800eb3e:	3001      	adds	r0, #1
 800eb40:	d02b      	beq.n	800eb9a <_malloc_r+0xd2>
 800eb42:	6823      	ldr	r3, [r4, #0]
 800eb44:	442b      	add	r3, r5
 800eb46:	6023      	str	r3, [r4, #0]
 800eb48:	e00e      	b.n	800eb68 <_malloc_r+0xa0>
 800eb4a:	6822      	ldr	r2, [r4, #0]
 800eb4c:	1b52      	subs	r2, r2, r5
 800eb4e:	d41e      	bmi.n	800eb8e <_malloc_r+0xc6>
 800eb50:	2a0b      	cmp	r2, #11
 800eb52:	d916      	bls.n	800eb82 <_malloc_r+0xba>
 800eb54:	1961      	adds	r1, r4, r5
 800eb56:	42a3      	cmp	r3, r4
 800eb58:	6025      	str	r5, [r4, #0]
 800eb5a:	bf18      	it	ne
 800eb5c:	6059      	strne	r1, [r3, #4]
 800eb5e:	6863      	ldr	r3, [r4, #4]
 800eb60:	bf08      	it	eq
 800eb62:	6031      	streq	r1, [r6, #0]
 800eb64:	5162      	str	r2, [r4, r5]
 800eb66:	604b      	str	r3, [r1, #4]
 800eb68:	4638      	mov	r0, r7
 800eb6a:	f104 060b 	add.w	r6, r4, #11
 800eb6e:	f000 f8bf 	bl	800ecf0 <__malloc_unlock>
 800eb72:	f026 0607 	bic.w	r6, r6, #7
 800eb76:	1d23      	adds	r3, r4, #4
 800eb78:	1af2      	subs	r2, r6, r3
 800eb7a:	d0b6      	beq.n	800eaea <_malloc_r+0x22>
 800eb7c:	1b9b      	subs	r3, r3, r6
 800eb7e:	50a3      	str	r3, [r4, r2]
 800eb80:	e7b3      	b.n	800eaea <_malloc_r+0x22>
 800eb82:	6862      	ldr	r2, [r4, #4]
 800eb84:	42a3      	cmp	r3, r4
 800eb86:	bf0c      	ite	eq
 800eb88:	6032      	streq	r2, [r6, #0]
 800eb8a:	605a      	strne	r2, [r3, #4]
 800eb8c:	e7ec      	b.n	800eb68 <_malloc_r+0xa0>
 800eb8e:	4623      	mov	r3, r4
 800eb90:	6864      	ldr	r4, [r4, #4]
 800eb92:	e7b2      	b.n	800eafa <_malloc_r+0x32>
 800eb94:	4634      	mov	r4, r6
 800eb96:	6876      	ldr	r6, [r6, #4]
 800eb98:	e7b9      	b.n	800eb0e <_malloc_r+0x46>
 800eb9a:	230c      	movs	r3, #12
 800eb9c:	603b      	str	r3, [r7, #0]
 800eb9e:	4638      	mov	r0, r7
 800eba0:	f000 f8a6 	bl	800ecf0 <__malloc_unlock>
 800eba4:	e7a1      	b.n	800eaea <_malloc_r+0x22>
 800eba6:	6025      	str	r5, [r4, #0]
 800eba8:	e7de      	b.n	800eb68 <_malloc_r+0xa0>
 800ebaa:	bf00      	nop
 800ebac:	20005030 	.word	0x20005030

0800ebb0 <cleanup_glue>:
 800ebb0:	b538      	push	{r3, r4, r5, lr}
 800ebb2:	460c      	mov	r4, r1
 800ebb4:	6809      	ldr	r1, [r1, #0]
 800ebb6:	4605      	mov	r5, r0
 800ebb8:	b109      	cbz	r1, 800ebbe <cleanup_glue+0xe>
 800ebba:	f7ff fff9 	bl	800ebb0 <cleanup_glue>
 800ebbe:	4621      	mov	r1, r4
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebc6:	f000 b899 	b.w	800ecfc <_free_r>
	...

0800ebcc <_reclaim_reent>:
 800ebcc:	4b2c      	ldr	r3, [pc, #176]	; (800ec80 <_reclaim_reent+0xb4>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4283      	cmp	r3, r0
 800ebd2:	b570      	push	{r4, r5, r6, lr}
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	d051      	beq.n	800ec7c <_reclaim_reent+0xb0>
 800ebd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ebda:	b143      	cbz	r3, 800ebee <_reclaim_reent+0x22>
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d14a      	bne.n	800ec78 <_reclaim_reent+0xac>
 800ebe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebe4:	6819      	ldr	r1, [r3, #0]
 800ebe6:	b111      	cbz	r1, 800ebee <_reclaim_reent+0x22>
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f000 f887 	bl	800ecfc <_free_r>
 800ebee:	6961      	ldr	r1, [r4, #20]
 800ebf0:	b111      	cbz	r1, 800ebf8 <_reclaim_reent+0x2c>
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f000 f882 	bl	800ecfc <_free_r>
 800ebf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ebfa:	b111      	cbz	r1, 800ec02 <_reclaim_reent+0x36>
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f000 f87d 	bl	800ecfc <_free_r>
 800ec02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec04:	b111      	cbz	r1, 800ec0c <_reclaim_reent+0x40>
 800ec06:	4620      	mov	r0, r4
 800ec08:	f000 f878 	bl	800ecfc <_free_r>
 800ec0c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ec0e:	b111      	cbz	r1, 800ec16 <_reclaim_reent+0x4a>
 800ec10:	4620      	mov	r0, r4
 800ec12:	f000 f873 	bl	800ecfc <_free_r>
 800ec16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ec18:	b111      	cbz	r1, 800ec20 <_reclaim_reent+0x54>
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f000 f86e 	bl	800ecfc <_free_r>
 800ec20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ec22:	b111      	cbz	r1, 800ec2a <_reclaim_reent+0x5e>
 800ec24:	4620      	mov	r0, r4
 800ec26:	f000 f869 	bl	800ecfc <_free_r>
 800ec2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ec2c:	b111      	cbz	r1, 800ec34 <_reclaim_reent+0x68>
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f000 f864 	bl	800ecfc <_free_r>
 800ec34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec36:	b111      	cbz	r1, 800ec3e <_reclaim_reent+0x72>
 800ec38:	4620      	mov	r0, r4
 800ec3a:	f000 f85f 	bl	800ecfc <_free_r>
 800ec3e:	69a3      	ldr	r3, [r4, #24]
 800ec40:	b1e3      	cbz	r3, 800ec7c <_reclaim_reent+0xb0>
 800ec42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ec44:	4620      	mov	r0, r4
 800ec46:	4798      	blx	r3
 800ec48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ec4a:	b1b9      	cbz	r1, 800ec7c <_reclaim_reent+0xb0>
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec52:	f7ff bfad 	b.w	800ebb0 <cleanup_glue>
 800ec56:	5949      	ldr	r1, [r1, r5]
 800ec58:	b941      	cbnz	r1, 800ec6c <_reclaim_reent+0xa0>
 800ec5a:	3504      	adds	r5, #4
 800ec5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec5e:	2d80      	cmp	r5, #128	; 0x80
 800ec60:	68d9      	ldr	r1, [r3, #12]
 800ec62:	d1f8      	bne.n	800ec56 <_reclaim_reent+0x8a>
 800ec64:	4620      	mov	r0, r4
 800ec66:	f000 f849 	bl	800ecfc <_free_r>
 800ec6a:	e7ba      	b.n	800ebe2 <_reclaim_reent+0x16>
 800ec6c:	680e      	ldr	r6, [r1, #0]
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f000 f844 	bl	800ecfc <_free_r>
 800ec74:	4631      	mov	r1, r6
 800ec76:	e7ef      	b.n	800ec58 <_reclaim_reent+0x8c>
 800ec78:	2500      	movs	r5, #0
 800ec7a:	e7ef      	b.n	800ec5c <_reclaim_reent+0x90>
 800ec7c:	bd70      	pop	{r4, r5, r6, pc}
 800ec7e:	bf00      	nop
 800ec80:	20000058 	.word	0x20000058

0800ec84 <_sbrk_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	4d06      	ldr	r5, [pc, #24]	; (800eca0 <_sbrk_r+0x1c>)
 800ec88:	2300      	movs	r3, #0
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	4608      	mov	r0, r1
 800ec8e:	602b      	str	r3, [r5, #0]
 800ec90:	f7f6 fcea 	bl	8005668 <_sbrk>
 800ec94:	1c43      	adds	r3, r0, #1
 800ec96:	d102      	bne.n	800ec9e <_sbrk_r+0x1a>
 800ec98:	682b      	ldr	r3, [r5, #0]
 800ec9a:	b103      	cbz	r3, 800ec9e <_sbrk_r+0x1a>
 800ec9c:	6023      	str	r3, [r4, #0]
 800ec9e:	bd38      	pop	{r3, r4, r5, pc}
 800eca0:	20005038 	.word	0x20005038

0800eca4 <siprintf>:
 800eca4:	b40e      	push	{r1, r2, r3}
 800eca6:	b500      	push	{lr}
 800eca8:	b09c      	sub	sp, #112	; 0x70
 800ecaa:	ab1d      	add	r3, sp, #116	; 0x74
 800ecac:	9002      	str	r0, [sp, #8]
 800ecae:	9006      	str	r0, [sp, #24]
 800ecb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ecb4:	4809      	ldr	r0, [pc, #36]	; (800ecdc <siprintf+0x38>)
 800ecb6:	9107      	str	r1, [sp, #28]
 800ecb8:	9104      	str	r1, [sp, #16]
 800ecba:	4909      	ldr	r1, [pc, #36]	; (800ece0 <siprintf+0x3c>)
 800ecbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecc0:	9105      	str	r1, [sp, #20]
 800ecc2:	6800      	ldr	r0, [r0, #0]
 800ecc4:	9301      	str	r3, [sp, #4]
 800ecc6:	a902      	add	r1, sp, #8
 800ecc8:	f000 f8c0 	bl	800ee4c <_svfiprintf_r>
 800eccc:	9b02      	ldr	r3, [sp, #8]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	701a      	strb	r2, [r3, #0]
 800ecd2:	b01c      	add	sp, #112	; 0x70
 800ecd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecd8:	b003      	add	sp, #12
 800ecda:	4770      	bx	lr
 800ecdc:	20000058 	.word	0x20000058
 800ece0:	ffff0208 	.word	0xffff0208

0800ece4 <__malloc_lock>:
 800ece4:	4801      	ldr	r0, [pc, #4]	; (800ecec <__malloc_lock+0x8>)
 800ece6:	f7ff beb7 	b.w	800ea58 <__retarget_lock_acquire_recursive>
 800ecea:	bf00      	nop
 800ecec:	2000502c 	.word	0x2000502c

0800ecf0 <__malloc_unlock>:
 800ecf0:	4801      	ldr	r0, [pc, #4]	; (800ecf8 <__malloc_unlock+0x8>)
 800ecf2:	f7ff beb2 	b.w	800ea5a <__retarget_lock_release_recursive>
 800ecf6:	bf00      	nop
 800ecf8:	2000502c 	.word	0x2000502c

0800ecfc <_free_r>:
 800ecfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecfe:	2900      	cmp	r1, #0
 800ed00:	d044      	beq.n	800ed8c <_free_r+0x90>
 800ed02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed06:	9001      	str	r0, [sp, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f1a1 0404 	sub.w	r4, r1, #4
 800ed0e:	bfb8      	it	lt
 800ed10:	18e4      	addlt	r4, r4, r3
 800ed12:	f7ff ffe7 	bl	800ece4 <__malloc_lock>
 800ed16:	4a1e      	ldr	r2, [pc, #120]	; (800ed90 <_free_r+0x94>)
 800ed18:	9801      	ldr	r0, [sp, #4]
 800ed1a:	6813      	ldr	r3, [r2, #0]
 800ed1c:	b933      	cbnz	r3, 800ed2c <_free_r+0x30>
 800ed1e:	6063      	str	r3, [r4, #4]
 800ed20:	6014      	str	r4, [r2, #0]
 800ed22:	b003      	add	sp, #12
 800ed24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed28:	f7ff bfe2 	b.w	800ecf0 <__malloc_unlock>
 800ed2c:	42a3      	cmp	r3, r4
 800ed2e:	d908      	bls.n	800ed42 <_free_r+0x46>
 800ed30:	6825      	ldr	r5, [r4, #0]
 800ed32:	1961      	adds	r1, r4, r5
 800ed34:	428b      	cmp	r3, r1
 800ed36:	bf01      	itttt	eq
 800ed38:	6819      	ldreq	r1, [r3, #0]
 800ed3a:	685b      	ldreq	r3, [r3, #4]
 800ed3c:	1949      	addeq	r1, r1, r5
 800ed3e:	6021      	streq	r1, [r4, #0]
 800ed40:	e7ed      	b.n	800ed1e <_free_r+0x22>
 800ed42:	461a      	mov	r2, r3
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	b10b      	cbz	r3, 800ed4c <_free_r+0x50>
 800ed48:	42a3      	cmp	r3, r4
 800ed4a:	d9fa      	bls.n	800ed42 <_free_r+0x46>
 800ed4c:	6811      	ldr	r1, [r2, #0]
 800ed4e:	1855      	adds	r5, r2, r1
 800ed50:	42a5      	cmp	r5, r4
 800ed52:	d10b      	bne.n	800ed6c <_free_r+0x70>
 800ed54:	6824      	ldr	r4, [r4, #0]
 800ed56:	4421      	add	r1, r4
 800ed58:	1854      	adds	r4, r2, r1
 800ed5a:	42a3      	cmp	r3, r4
 800ed5c:	6011      	str	r1, [r2, #0]
 800ed5e:	d1e0      	bne.n	800ed22 <_free_r+0x26>
 800ed60:	681c      	ldr	r4, [r3, #0]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	6053      	str	r3, [r2, #4]
 800ed66:	4421      	add	r1, r4
 800ed68:	6011      	str	r1, [r2, #0]
 800ed6a:	e7da      	b.n	800ed22 <_free_r+0x26>
 800ed6c:	d902      	bls.n	800ed74 <_free_r+0x78>
 800ed6e:	230c      	movs	r3, #12
 800ed70:	6003      	str	r3, [r0, #0]
 800ed72:	e7d6      	b.n	800ed22 <_free_r+0x26>
 800ed74:	6825      	ldr	r5, [r4, #0]
 800ed76:	1961      	adds	r1, r4, r5
 800ed78:	428b      	cmp	r3, r1
 800ed7a:	bf04      	itt	eq
 800ed7c:	6819      	ldreq	r1, [r3, #0]
 800ed7e:	685b      	ldreq	r3, [r3, #4]
 800ed80:	6063      	str	r3, [r4, #4]
 800ed82:	bf04      	itt	eq
 800ed84:	1949      	addeq	r1, r1, r5
 800ed86:	6021      	streq	r1, [r4, #0]
 800ed88:	6054      	str	r4, [r2, #4]
 800ed8a:	e7ca      	b.n	800ed22 <_free_r+0x26>
 800ed8c:	b003      	add	sp, #12
 800ed8e:	bd30      	pop	{r4, r5, pc}
 800ed90:	20005030 	.word	0x20005030

0800ed94 <__ssputs_r>:
 800ed94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed98:	688e      	ldr	r6, [r1, #8]
 800ed9a:	429e      	cmp	r6, r3
 800ed9c:	4682      	mov	sl, r0
 800ed9e:	460c      	mov	r4, r1
 800eda0:	4690      	mov	r8, r2
 800eda2:	461f      	mov	r7, r3
 800eda4:	d838      	bhi.n	800ee18 <__ssputs_r+0x84>
 800eda6:	898a      	ldrh	r2, [r1, #12]
 800eda8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800edac:	d032      	beq.n	800ee14 <__ssputs_r+0x80>
 800edae:	6825      	ldr	r5, [r4, #0]
 800edb0:	6909      	ldr	r1, [r1, #16]
 800edb2:	eba5 0901 	sub.w	r9, r5, r1
 800edb6:	6965      	ldr	r5, [r4, #20]
 800edb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800edc0:	3301      	adds	r3, #1
 800edc2:	444b      	add	r3, r9
 800edc4:	106d      	asrs	r5, r5, #1
 800edc6:	429d      	cmp	r5, r3
 800edc8:	bf38      	it	cc
 800edca:	461d      	movcc	r5, r3
 800edcc:	0553      	lsls	r3, r2, #21
 800edce:	d531      	bpl.n	800ee34 <__ssputs_r+0xa0>
 800edd0:	4629      	mov	r1, r5
 800edd2:	f7ff fe79 	bl	800eac8 <_malloc_r>
 800edd6:	4606      	mov	r6, r0
 800edd8:	b950      	cbnz	r0, 800edf0 <__ssputs_r+0x5c>
 800edda:	230c      	movs	r3, #12
 800eddc:	f8ca 3000 	str.w	r3, [sl]
 800ede0:	89a3      	ldrh	r3, [r4, #12]
 800ede2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ede6:	81a3      	strh	r3, [r4, #12]
 800ede8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edf0:	6921      	ldr	r1, [r4, #16]
 800edf2:	464a      	mov	r2, r9
 800edf4:	f7ff fe32 	bl	800ea5c <memcpy>
 800edf8:	89a3      	ldrh	r3, [r4, #12]
 800edfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800edfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee02:	81a3      	strh	r3, [r4, #12]
 800ee04:	6126      	str	r6, [r4, #16]
 800ee06:	6165      	str	r5, [r4, #20]
 800ee08:	444e      	add	r6, r9
 800ee0a:	eba5 0509 	sub.w	r5, r5, r9
 800ee0e:	6026      	str	r6, [r4, #0]
 800ee10:	60a5      	str	r5, [r4, #8]
 800ee12:	463e      	mov	r6, r7
 800ee14:	42be      	cmp	r6, r7
 800ee16:	d900      	bls.n	800ee1a <__ssputs_r+0x86>
 800ee18:	463e      	mov	r6, r7
 800ee1a:	6820      	ldr	r0, [r4, #0]
 800ee1c:	4632      	mov	r2, r6
 800ee1e:	4641      	mov	r1, r8
 800ee20:	f000 faa8 	bl	800f374 <memmove>
 800ee24:	68a3      	ldr	r3, [r4, #8]
 800ee26:	1b9b      	subs	r3, r3, r6
 800ee28:	60a3      	str	r3, [r4, #8]
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	4433      	add	r3, r6
 800ee2e:	6023      	str	r3, [r4, #0]
 800ee30:	2000      	movs	r0, #0
 800ee32:	e7db      	b.n	800edec <__ssputs_r+0x58>
 800ee34:	462a      	mov	r2, r5
 800ee36:	f000 fab7 	bl	800f3a8 <_realloc_r>
 800ee3a:	4606      	mov	r6, r0
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d1e1      	bne.n	800ee04 <__ssputs_r+0x70>
 800ee40:	6921      	ldr	r1, [r4, #16]
 800ee42:	4650      	mov	r0, sl
 800ee44:	f7ff ff5a 	bl	800ecfc <_free_r>
 800ee48:	e7c7      	b.n	800edda <__ssputs_r+0x46>
	...

0800ee4c <_svfiprintf_r>:
 800ee4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee50:	4698      	mov	r8, r3
 800ee52:	898b      	ldrh	r3, [r1, #12]
 800ee54:	061b      	lsls	r3, r3, #24
 800ee56:	b09d      	sub	sp, #116	; 0x74
 800ee58:	4607      	mov	r7, r0
 800ee5a:	460d      	mov	r5, r1
 800ee5c:	4614      	mov	r4, r2
 800ee5e:	d50e      	bpl.n	800ee7e <_svfiprintf_r+0x32>
 800ee60:	690b      	ldr	r3, [r1, #16]
 800ee62:	b963      	cbnz	r3, 800ee7e <_svfiprintf_r+0x32>
 800ee64:	2140      	movs	r1, #64	; 0x40
 800ee66:	f7ff fe2f 	bl	800eac8 <_malloc_r>
 800ee6a:	6028      	str	r0, [r5, #0]
 800ee6c:	6128      	str	r0, [r5, #16]
 800ee6e:	b920      	cbnz	r0, 800ee7a <_svfiprintf_r+0x2e>
 800ee70:	230c      	movs	r3, #12
 800ee72:	603b      	str	r3, [r7, #0]
 800ee74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee78:	e0d1      	b.n	800f01e <_svfiprintf_r+0x1d2>
 800ee7a:	2340      	movs	r3, #64	; 0x40
 800ee7c:	616b      	str	r3, [r5, #20]
 800ee7e:	2300      	movs	r3, #0
 800ee80:	9309      	str	r3, [sp, #36]	; 0x24
 800ee82:	2320      	movs	r3, #32
 800ee84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee88:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee8c:	2330      	movs	r3, #48	; 0x30
 800ee8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f038 <_svfiprintf_r+0x1ec>
 800ee92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee96:	f04f 0901 	mov.w	r9, #1
 800ee9a:	4623      	mov	r3, r4
 800ee9c:	469a      	mov	sl, r3
 800ee9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eea2:	b10a      	cbz	r2, 800eea8 <_svfiprintf_r+0x5c>
 800eea4:	2a25      	cmp	r2, #37	; 0x25
 800eea6:	d1f9      	bne.n	800ee9c <_svfiprintf_r+0x50>
 800eea8:	ebba 0b04 	subs.w	fp, sl, r4
 800eeac:	d00b      	beq.n	800eec6 <_svfiprintf_r+0x7a>
 800eeae:	465b      	mov	r3, fp
 800eeb0:	4622      	mov	r2, r4
 800eeb2:	4629      	mov	r1, r5
 800eeb4:	4638      	mov	r0, r7
 800eeb6:	f7ff ff6d 	bl	800ed94 <__ssputs_r>
 800eeba:	3001      	adds	r0, #1
 800eebc:	f000 80aa 	beq.w	800f014 <_svfiprintf_r+0x1c8>
 800eec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eec2:	445a      	add	r2, fp
 800eec4:	9209      	str	r2, [sp, #36]	; 0x24
 800eec6:	f89a 3000 	ldrb.w	r3, [sl]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	f000 80a2 	beq.w	800f014 <_svfiprintf_r+0x1c8>
 800eed0:	2300      	movs	r3, #0
 800eed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eeda:	f10a 0a01 	add.w	sl, sl, #1
 800eede:	9304      	str	r3, [sp, #16]
 800eee0:	9307      	str	r3, [sp, #28]
 800eee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eee6:	931a      	str	r3, [sp, #104]	; 0x68
 800eee8:	4654      	mov	r4, sl
 800eeea:	2205      	movs	r2, #5
 800eeec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eef0:	4851      	ldr	r0, [pc, #324]	; (800f038 <_svfiprintf_r+0x1ec>)
 800eef2:	f7f1 f98d 	bl	8000210 <memchr>
 800eef6:	9a04      	ldr	r2, [sp, #16]
 800eef8:	b9d8      	cbnz	r0, 800ef32 <_svfiprintf_r+0xe6>
 800eefa:	06d0      	lsls	r0, r2, #27
 800eefc:	bf44      	itt	mi
 800eefe:	2320      	movmi	r3, #32
 800ef00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef04:	0711      	lsls	r1, r2, #28
 800ef06:	bf44      	itt	mi
 800ef08:	232b      	movmi	r3, #43	; 0x2b
 800ef0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ef12:	2b2a      	cmp	r3, #42	; 0x2a
 800ef14:	d015      	beq.n	800ef42 <_svfiprintf_r+0xf6>
 800ef16:	9a07      	ldr	r2, [sp, #28]
 800ef18:	4654      	mov	r4, sl
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	f04f 0c0a 	mov.w	ip, #10
 800ef20:	4621      	mov	r1, r4
 800ef22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef26:	3b30      	subs	r3, #48	; 0x30
 800ef28:	2b09      	cmp	r3, #9
 800ef2a:	d94e      	bls.n	800efca <_svfiprintf_r+0x17e>
 800ef2c:	b1b0      	cbz	r0, 800ef5c <_svfiprintf_r+0x110>
 800ef2e:	9207      	str	r2, [sp, #28]
 800ef30:	e014      	b.n	800ef5c <_svfiprintf_r+0x110>
 800ef32:	eba0 0308 	sub.w	r3, r0, r8
 800ef36:	fa09 f303 	lsl.w	r3, r9, r3
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	9304      	str	r3, [sp, #16]
 800ef3e:	46a2      	mov	sl, r4
 800ef40:	e7d2      	b.n	800eee8 <_svfiprintf_r+0x9c>
 800ef42:	9b03      	ldr	r3, [sp, #12]
 800ef44:	1d19      	adds	r1, r3, #4
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	9103      	str	r1, [sp, #12]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	bfbb      	ittet	lt
 800ef4e:	425b      	neglt	r3, r3
 800ef50:	f042 0202 	orrlt.w	r2, r2, #2
 800ef54:	9307      	strge	r3, [sp, #28]
 800ef56:	9307      	strlt	r3, [sp, #28]
 800ef58:	bfb8      	it	lt
 800ef5a:	9204      	strlt	r2, [sp, #16]
 800ef5c:	7823      	ldrb	r3, [r4, #0]
 800ef5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ef60:	d10c      	bne.n	800ef7c <_svfiprintf_r+0x130>
 800ef62:	7863      	ldrb	r3, [r4, #1]
 800ef64:	2b2a      	cmp	r3, #42	; 0x2a
 800ef66:	d135      	bne.n	800efd4 <_svfiprintf_r+0x188>
 800ef68:	9b03      	ldr	r3, [sp, #12]
 800ef6a:	1d1a      	adds	r2, r3, #4
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	9203      	str	r2, [sp, #12]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	bfb8      	it	lt
 800ef74:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ef78:	3402      	adds	r4, #2
 800ef7a:	9305      	str	r3, [sp, #20]
 800ef7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f048 <_svfiprintf_r+0x1fc>
 800ef80:	7821      	ldrb	r1, [r4, #0]
 800ef82:	2203      	movs	r2, #3
 800ef84:	4650      	mov	r0, sl
 800ef86:	f7f1 f943 	bl	8000210 <memchr>
 800ef8a:	b140      	cbz	r0, 800ef9e <_svfiprintf_r+0x152>
 800ef8c:	2340      	movs	r3, #64	; 0x40
 800ef8e:	eba0 000a 	sub.w	r0, r0, sl
 800ef92:	fa03 f000 	lsl.w	r0, r3, r0
 800ef96:	9b04      	ldr	r3, [sp, #16]
 800ef98:	4303      	orrs	r3, r0
 800ef9a:	3401      	adds	r4, #1
 800ef9c:	9304      	str	r3, [sp, #16]
 800ef9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efa2:	4826      	ldr	r0, [pc, #152]	; (800f03c <_svfiprintf_r+0x1f0>)
 800efa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efa8:	2206      	movs	r2, #6
 800efaa:	f7f1 f931 	bl	8000210 <memchr>
 800efae:	2800      	cmp	r0, #0
 800efb0:	d038      	beq.n	800f024 <_svfiprintf_r+0x1d8>
 800efb2:	4b23      	ldr	r3, [pc, #140]	; (800f040 <_svfiprintf_r+0x1f4>)
 800efb4:	bb1b      	cbnz	r3, 800effe <_svfiprintf_r+0x1b2>
 800efb6:	9b03      	ldr	r3, [sp, #12]
 800efb8:	3307      	adds	r3, #7
 800efba:	f023 0307 	bic.w	r3, r3, #7
 800efbe:	3308      	adds	r3, #8
 800efc0:	9303      	str	r3, [sp, #12]
 800efc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efc4:	4433      	add	r3, r6
 800efc6:	9309      	str	r3, [sp, #36]	; 0x24
 800efc8:	e767      	b.n	800ee9a <_svfiprintf_r+0x4e>
 800efca:	fb0c 3202 	mla	r2, ip, r2, r3
 800efce:	460c      	mov	r4, r1
 800efd0:	2001      	movs	r0, #1
 800efd2:	e7a5      	b.n	800ef20 <_svfiprintf_r+0xd4>
 800efd4:	2300      	movs	r3, #0
 800efd6:	3401      	adds	r4, #1
 800efd8:	9305      	str	r3, [sp, #20]
 800efda:	4619      	mov	r1, r3
 800efdc:	f04f 0c0a 	mov.w	ip, #10
 800efe0:	4620      	mov	r0, r4
 800efe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efe6:	3a30      	subs	r2, #48	; 0x30
 800efe8:	2a09      	cmp	r2, #9
 800efea:	d903      	bls.n	800eff4 <_svfiprintf_r+0x1a8>
 800efec:	2b00      	cmp	r3, #0
 800efee:	d0c5      	beq.n	800ef7c <_svfiprintf_r+0x130>
 800eff0:	9105      	str	r1, [sp, #20]
 800eff2:	e7c3      	b.n	800ef7c <_svfiprintf_r+0x130>
 800eff4:	fb0c 2101 	mla	r1, ip, r1, r2
 800eff8:	4604      	mov	r4, r0
 800effa:	2301      	movs	r3, #1
 800effc:	e7f0      	b.n	800efe0 <_svfiprintf_r+0x194>
 800effe:	ab03      	add	r3, sp, #12
 800f000:	9300      	str	r3, [sp, #0]
 800f002:	462a      	mov	r2, r5
 800f004:	4b0f      	ldr	r3, [pc, #60]	; (800f044 <_svfiprintf_r+0x1f8>)
 800f006:	a904      	add	r1, sp, #16
 800f008:	4638      	mov	r0, r7
 800f00a:	f3af 8000 	nop.w
 800f00e:	1c42      	adds	r2, r0, #1
 800f010:	4606      	mov	r6, r0
 800f012:	d1d6      	bne.n	800efc2 <_svfiprintf_r+0x176>
 800f014:	89ab      	ldrh	r3, [r5, #12]
 800f016:	065b      	lsls	r3, r3, #25
 800f018:	f53f af2c 	bmi.w	800ee74 <_svfiprintf_r+0x28>
 800f01c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f01e:	b01d      	add	sp, #116	; 0x74
 800f020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f024:	ab03      	add	r3, sp, #12
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	462a      	mov	r2, r5
 800f02a:	4b06      	ldr	r3, [pc, #24]	; (800f044 <_svfiprintf_r+0x1f8>)
 800f02c:	a904      	add	r1, sp, #16
 800f02e:	4638      	mov	r0, r7
 800f030:	f000 f87a 	bl	800f128 <_printf_i>
 800f034:	e7eb      	b.n	800f00e <_svfiprintf_r+0x1c2>
 800f036:	bf00      	nop
 800f038:	0801291c 	.word	0x0801291c
 800f03c:	08012926 	.word	0x08012926
 800f040:	00000000 	.word	0x00000000
 800f044:	0800ed95 	.word	0x0800ed95
 800f048:	08012922 	.word	0x08012922

0800f04c <_printf_common>:
 800f04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f050:	4616      	mov	r6, r2
 800f052:	4699      	mov	r9, r3
 800f054:	688a      	ldr	r2, [r1, #8]
 800f056:	690b      	ldr	r3, [r1, #16]
 800f058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f05c:	4293      	cmp	r3, r2
 800f05e:	bfb8      	it	lt
 800f060:	4613      	movlt	r3, r2
 800f062:	6033      	str	r3, [r6, #0]
 800f064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f068:	4607      	mov	r7, r0
 800f06a:	460c      	mov	r4, r1
 800f06c:	b10a      	cbz	r2, 800f072 <_printf_common+0x26>
 800f06e:	3301      	adds	r3, #1
 800f070:	6033      	str	r3, [r6, #0]
 800f072:	6823      	ldr	r3, [r4, #0]
 800f074:	0699      	lsls	r1, r3, #26
 800f076:	bf42      	ittt	mi
 800f078:	6833      	ldrmi	r3, [r6, #0]
 800f07a:	3302      	addmi	r3, #2
 800f07c:	6033      	strmi	r3, [r6, #0]
 800f07e:	6825      	ldr	r5, [r4, #0]
 800f080:	f015 0506 	ands.w	r5, r5, #6
 800f084:	d106      	bne.n	800f094 <_printf_common+0x48>
 800f086:	f104 0a19 	add.w	sl, r4, #25
 800f08a:	68e3      	ldr	r3, [r4, #12]
 800f08c:	6832      	ldr	r2, [r6, #0]
 800f08e:	1a9b      	subs	r3, r3, r2
 800f090:	42ab      	cmp	r3, r5
 800f092:	dc26      	bgt.n	800f0e2 <_printf_common+0x96>
 800f094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f098:	1e13      	subs	r3, r2, #0
 800f09a:	6822      	ldr	r2, [r4, #0]
 800f09c:	bf18      	it	ne
 800f09e:	2301      	movne	r3, #1
 800f0a0:	0692      	lsls	r2, r2, #26
 800f0a2:	d42b      	bmi.n	800f0fc <_printf_common+0xb0>
 800f0a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0a8:	4649      	mov	r1, r9
 800f0aa:	4638      	mov	r0, r7
 800f0ac:	47c0      	blx	r8
 800f0ae:	3001      	adds	r0, #1
 800f0b0:	d01e      	beq.n	800f0f0 <_printf_common+0xa4>
 800f0b2:	6823      	ldr	r3, [r4, #0]
 800f0b4:	68e5      	ldr	r5, [r4, #12]
 800f0b6:	6832      	ldr	r2, [r6, #0]
 800f0b8:	f003 0306 	and.w	r3, r3, #6
 800f0bc:	2b04      	cmp	r3, #4
 800f0be:	bf08      	it	eq
 800f0c0:	1aad      	subeq	r5, r5, r2
 800f0c2:	68a3      	ldr	r3, [r4, #8]
 800f0c4:	6922      	ldr	r2, [r4, #16]
 800f0c6:	bf0c      	ite	eq
 800f0c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0cc:	2500      	movne	r5, #0
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	bfc4      	itt	gt
 800f0d2:	1a9b      	subgt	r3, r3, r2
 800f0d4:	18ed      	addgt	r5, r5, r3
 800f0d6:	2600      	movs	r6, #0
 800f0d8:	341a      	adds	r4, #26
 800f0da:	42b5      	cmp	r5, r6
 800f0dc:	d11a      	bne.n	800f114 <_printf_common+0xc8>
 800f0de:	2000      	movs	r0, #0
 800f0e0:	e008      	b.n	800f0f4 <_printf_common+0xa8>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	4652      	mov	r2, sl
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	4638      	mov	r0, r7
 800f0ea:	47c0      	blx	r8
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	d103      	bne.n	800f0f8 <_printf_common+0xac>
 800f0f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0f8:	3501      	adds	r5, #1
 800f0fa:	e7c6      	b.n	800f08a <_printf_common+0x3e>
 800f0fc:	18e1      	adds	r1, r4, r3
 800f0fe:	1c5a      	adds	r2, r3, #1
 800f100:	2030      	movs	r0, #48	; 0x30
 800f102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f106:	4422      	add	r2, r4
 800f108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f10c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f110:	3302      	adds	r3, #2
 800f112:	e7c7      	b.n	800f0a4 <_printf_common+0x58>
 800f114:	2301      	movs	r3, #1
 800f116:	4622      	mov	r2, r4
 800f118:	4649      	mov	r1, r9
 800f11a:	4638      	mov	r0, r7
 800f11c:	47c0      	blx	r8
 800f11e:	3001      	adds	r0, #1
 800f120:	d0e6      	beq.n	800f0f0 <_printf_common+0xa4>
 800f122:	3601      	adds	r6, #1
 800f124:	e7d9      	b.n	800f0da <_printf_common+0x8e>
	...

0800f128 <_printf_i>:
 800f128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f12c:	7e0f      	ldrb	r7, [r1, #24]
 800f12e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f130:	2f78      	cmp	r7, #120	; 0x78
 800f132:	4691      	mov	r9, r2
 800f134:	4680      	mov	r8, r0
 800f136:	460c      	mov	r4, r1
 800f138:	469a      	mov	sl, r3
 800f13a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f13e:	d807      	bhi.n	800f150 <_printf_i+0x28>
 800f140:	2f62      	cmp	r7, #98	; 0x62
 800f142:	d80a      	bhi.n	800f15a <_printf_i+0x32>
 800f144:	2f00      	cmp	r7, #0
 800f146:	f000 80d8 	beq.w	800f2fa <_printf_i+0x1d2>
 800f14a:	2f58      	cmp	r7, #88	; 0x58
 800f14c:	f000 80a3 	beq.w	800f296 <_printf_i+0x16e>
 800f150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f158:	e03a      	b.n	800f1d0 <_printf_i+0xa8>
 800f15a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f15e:	2b15      	cmp	r3, #21
 800f160:	d8f6      	bhi.n	800f150 <_printf_i+0x28>
 800f162:	a101      	add	r1, pc, #4	; (adr r1, 800f168 <_printf_i+0x40>)
 800f164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f168:	0800f1c1 	.word	0x0800f1c1
 800f16c:	0800f1d5 	.word	0x0800f1d5
 800f170:	0800f151 	.word	0x0800f151
 800f174:	0800f151 	.word	0x0800f151
 800f178:	0800f151 	.word	0x0800f151
 800f17c:	0800f151 	.word	0x0800f151
 800f180:	0800f1d5 	.word	0x0800f1d5
 800f184:	0800f151 	.word	0x0800f151
 800f188:	0800f151 	.word	0x0800f151
 800f18c:	0800f151 	.word	0x0800f151
 800f190:	0800f151 	.word	0x0800f151
 800f194:	0800f2e1 	.word	0x0800f2e1
 800f198:	0800f205 	.word	0x0800f205
 800f19c:	0800f2c3 	.word	0x0800f2c3
 800f1a0:	0800f151 	.word	0x0800f151
 800f1a4:	0800f151 	.word	0x0800f151
 800f1a8:	0800f303 	.word	0x0800f303
 800f1ac:	0800f151 	.word	0x0800f151
 800f1b0:	0800f205 	.word	0x0800f205
 800f1b4:	0800f151 	.word	0x0800f151
 800f1b8:	0800f151 	.word	0x0800f151
 800f1bc:	0800f2cb 	.word	0x0800f2cb
 800f1c0:	682b      	ldr	r3, [r5, #0]
 800f1c2:	1d1a      	adds	r2, r3, #4
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	602a      	str	r2, [r5, #0]
 800f1c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	e0a3      	b.n	800f31c <_printf_i+0x1f4>
 800f1d4:	6820      	ldr	r0, [r4, #0]
 800f1d6:	6829      	ldr	r1, [r5, #0]
 800f1d8:	0606      	lsls	r6, r0, #24
 800f1da:	f101 0304 	add.w	r3, r1, #4
 800f1de:	d50a      	bpl.n	800f1f6 <_printf_i+0xce>
 800f1e0:	680e      	ldr	r6, [r1, #0]
 800f1e2:	602b      	str	r3, [r5, #0]
 800f1e4:	2e00      	cmp	r6, #0
 800f1e6:	da03      	bge.n	800f1f0 <_printf_i+0xc8>
 800f1e8:	232d      	movs	r3, #45	; 0x2d
 800f1ea:	4276      	negs	r6, r6
 800f1ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1f0:	485e      	ldr	r0, [pc, #376]	; (800f36c <_printf_i+0x244>)
 800f1f2:	230a      	movs	r3, #10
 800f1f4:	e019      	b.n	800f22a <_printf_i+0x102>
 800f1f6:	680e      	ldr	r6, [r1, #0]
 800f1f8:	602b      	str	r3, [r5, #0]
 800f1fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f1fe:	bf18      	it	ne
 800f200:	b236      	sxthne	r6, r6
 800f202:	e7ef      	b.n	800f1e4 <_printf_i+0xbc>
 800f204:	682b      	ldr	r3, [r5, #0]
 800f206:	6820      	ldr	r0, [r4, #0]
 800f208:	1d19      	adds	r1, r3, #4
 800f20a:	6029      	str	r1, [r5, #0]
 800f20c:	0601      	lsls	r1, r0, #24
 800f20e:	d501      	bpl.n	800f214 <_printf_i+0xec>
 800f210:	681e      	ldr	r6, [r3, #0]
 800f212:	e002      	b.n	800f21a <_printf_i+0xf2>
 800f214:	0646      	lsls	r6, r0, #25
 800f216:	d5fb      	bpl.n	800f210 <_printf_i+0xe8>
 800f218:	881e      	ldrh	r6, [r3, #0]
 800f21a:	4854      	ldr	r0, [pc, #336]	; (800f36c <_printf_i+0x244>)
 800f21c:	2f6f      	cmp	r7, #111	; 0x6f
 800f21e:	bf0c      	ite	eq
 800f220:	2308      	moveq	r3, #8
 800f222:	230a      	movne	r3, #10
 800f224:	2100      	movs	r1, #0
 800f226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f22a:	6865      	ldr	r5, [r4, #4]
 800f22c:	60a5      	str	r5, [r4, #8]
 800f22e:	2d00      	cmp	r5, #0
 800f230:	bfa2      	ittt	ge
 800f232:	6821      	ldrge	r1, [r4, #0]
 800f234:	f021 0104 	bicge.w	r1, r1, #4
 800f238:	6021      	strge	r1, [r4, #0]
 800f23a:	b90e      	cbnz	r6, 800f240 <_printf_i+0x118>
 800f23c:	2d00      	cmp	r5, #0
 800f23e:	d04d      	beq.n	800f2dc <_printf_i+0x1b4>
 800f240:	4615      	mov	r5, r2
 800f242:	fbb6 f1f3 	udiv	r1, r6, r3
 800f246:	fb03 6711 	mls	r7, r3, r1, r6
 800f24a:	5dc7      	ldrb	r7, [r0, r7]
 800f24c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f250:	4637      	mov	r7, r6
 800f252:	42bb      	cmp	r3, r7
 800f254:	460e      	mov	r6, r1
 800f256:	d9f4      	bls.n	800f242 <_printf_i+0x11a>
 800f258:	2b08      	cmp	r3, #8
 800f25a:	d10b      	bne.n	800f274 <_printf_i+0x14c>
 800f25c:	6823      	ldr	r3, [r4, #0]
 800f25e:	07de      	lsls	r6, r3, #31
 800f260:	d508      	bpl.n	800f274 <_printf_i+0x14c>
 800f262:	6923      	ldr	r3, [r4, #16]
 800f264:	6861      	ldr	r1, [r4, #4]
 800f266:	4299      	cmp	r1, r3
 800f268:	bfde      	ittt	le
 800f26a:	2330      	movle	r3, #48	; 0x30
 800f26c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f270:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f274:	1b52      	subs	r2, r2, r5
 800f276:	6122      	str	r2, [r4, #16]
 800f278:	f8cd a000 	str.w	sl, [sp]
 800f27c:	464b      	mov	r3, r9
 800f27e:	aa03      	add	r2, sp, #12
 800f280:	4621      	mov	r1, r4
 800f282:	4640      	mov	r0, r8
 800f284:	f7ff fee2 	bl	800f04c <_printf_common>
 800f288:	3001      	adds	r0, #1
 800f28a:	d14c      	bne.n	800f326 <_printf_i+0x1fe>
 800f28c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f290:	b004      	add	sp, #16
 800f292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f296:	4835      	ldr	r0, [pc, #212]	; (800f36c <_printf_i+0x244>)
 800f298:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f29c:	6829      	ldr	r1, [r5, #0]
 800f29e:	6823      	ldr	r3, [r4, #0]
 800f2a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f2a4:	6029      	str	r1, [r5, #0]
 800f2a6:	061d      	lsls	r5, r3, #24
 800f2a8:	d514      	bpl.n	800f2d4 <_printf_i+0x1ac>
 800f2aa:	07df      	lsls	r7, r3, #31
 800f2ac:	bf44      	itt	mi
 800f2ae:	f043 0320 	orrmi.w	r3, r3, #32
 800f2b2:	6023      	strmi	r3, [r4, #0]
 800f2b4:	b91e      	cbnz	r6, 800f2be <_printf_i+0x196>
 800f2b6:	6823      	ldr	r3, [r4, #0]
 800f2b8:	f023 0320 	bic.w	r3, r3, #32
 800f2bc:	6023      	str	r3, [r4, #0]
 800f2be:	2310      	movs	r3, #16
 800f2c0:	e7b0      	b.n	800f224 <_printf_i+0xfc>
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	f043 0320 	orr.w	r3, r3, #32
 800f2c8:	6023      	str	r3, [r4, #0]
 800f2ca:	2378      	movs	r3, #120	; 0x78
 800f2cc:	4828      	ldr	r0, [pc, #160]	; (800f370 <_printf_i+0x248>)
 800f2ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f2d2:	e7e3      	b.n	800f29c <_printf_i+0x174>
 800f2d4:	0659      	lsls	r1, r3, #25
 800f2d6:	bf48      	it	mi
 800f2d8:	b2b6      	uxthmi	r6, r6
 800f2da:	e7e6      	b.n	800f2aa <_printf_i+0x182>
 800f2dc:	4615      	mov	r5, r2
 800f2de:	e7bb      	b.n	800f258 <_printf_i+0x130>
 800f2e0:	682b      	ldr	r3, [r5, #0]
 800f2e2:	6826      	ldr	r6, [r4, #0]
 800f2e4:	6961      	ldr	r1, [r4, #20]
 800f2e6:	1d18      	adds	r0, r3, #4
 800f2e8:	6028      	str	r0, [r5, #0]
 800f2ea:	0635      	lsls	r5, r6, #24
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	d501      	bpl.n	800f2f4 <_printf_i+0x1cc>
 800f2f0:	6019      	str	r1, [r3, #0]
 800f2f2:	e002      	b.n	800f2fa <_printf_i+0x1d2>
 800f2f4:	0670      	lsls	r0, r6, #25
 800f2f6:	d5fb      	bpl.n	800f2f0 <_printf_i+0x1c8>
 800f2f8:	8019      	strh	r1, [r3, #0]
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	6123      	str	r3, [r4, #16]
 800f2fe:	4615      	mov	r5, r2
 800f300:	e7ba      	b.n	800f278 <_printf_i+0x150>
 800f302:	682b      	ldr	r3, [r5, #0]
 800f304:	1d1a      	adds	r2, r3, #4
 800f306:	602a      	str	r2, [r5, #0]
 800f308:	681d      	ldr	r5, [r3, #0]
 800f30a:	6862      	ldr	r2, [r4, #4]
 800f30c:	2100      	movs	r1, #0
 800f30e:	4628      	mov	r0, r5
 800f310:	f7f0 ff7e 	bl	8000210 <memchr>
 800f314:	b108      	cbz	r0, 800f31a <_printf_i+0x1f2>
 800f316:	1b40      	subs	r0, r0, r5
 800f318:	6060      	str	r0, [r4, #4]
 800f31a:	6863      	ldr	r3, [r4, #4]
 800f31c:	6123      	str	r3, [r4, #16]
 800f31e:	2300      	movs	r3, #0
 800f320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f324:	e7a8      	b.n	800f278 <_printf_i+0x150>
 800f326:	6923      	ldr	r3, [r4, #16]
 800f328:	462a      	mov	r2, r5
 800f32a:	4649      	mov	r1, r9
 800f32c:	4640      	mov	r0, r8
 800f32e:	47d0      	blx	sl
 800f330:	3001      	adds	r0, #1
 800f332:	d0ab      	beq.n	800f28c <_printf_i+0x164>
 800f334:	6823      	ldr	r3, [r4, #0]
 800f336:	079b      	lsls	r3, r3, #30
 800f338:	d413      	bmi.n	800f362 <_printf_i+0x23a>
 800f33a:	68e0      	ldr	r0, [r4, #12]
 800f33c:	9b03      	ldr	r3, [sp, #12]
 800f33e:	4298      	cmp	r0, r3
 800f340:	bfb8      	it	lt
 800f342:	4618      	movlt	r0, r3
 800f344:	e7a4      	b.n	800f290 <_printf_i+0x168>
 800f346:	2301      	movs	r3, #1
 800f348:	4632      	mov	r2, r6
 800f34a:	4649      	mov	r1, r9
 800f34c:	4640      	mov	r0, r8
 800f34e:	47d0      	blx	sl
 800f350:	3001      	adds	r0, #1
 800f352:	d09b      	beq.n	800f28c <_printf_i+0x164>
 800f354:	3501      	adds	r5, #1
 800f356:	68e3      	ldr	r3, [r4, #12]
 800f358:	9903      	ldr	r1, [sp, #12]
 800f35a:	1a5b      	subs	r3, r3, r1
 800f35c:	42ab      	cmp	r3, r5
 800f35e:	dcf2      	bgt.n	800f346 <_printf_i+0x21e>
 800f360:	e7eb      	b.n	800f33a <_printf_i+0x212>
 800f362:	2500      	movs	r5, #0
 800f364:	f104 0619 	add.w	r6, r4, #25
 800f368:	e7f5      	b.n	800f356 <_printf_i+0x22e>
 800f36a:	bf00      	nop
 800f36c:	0801292d 	.word	0x0801292d
 800f370:	0801293e 	.word	0x0801293e

0800f374 <memmove>:
 800f374:	4288      	cmp	r0, r1
 800f376:	b510      	push	{r4, lr}
 800f378:	eb01 0402 	add.w	r4, r1, r2
 800f37c:	d902      	bls.n	800f384 <memmove+0x10>
 800f37e:	4284      	cmp	r4, r0
 800f380:	4623      	mov	r3, r4
 800f382:	d807      	bhi.n	800f394 <memmove+0x20>
 800f384:	1e43      	subs	r3, r0, #1
 800f386:	42a1      	cmp	r1, r4
 800f388:	d008      	beq.n	800f39c <memmove+0x28>
 800f38a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f38e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f392:	e7f8      	b.n	800f386 <memmove+0x12>
 800f394:	4402      	add	r2, r0
 800f396:	4601      	mov	r1, r0
 800f398:	428a      	cmp	r2, r1
 800f39a:	d100      	bne.n	800f39e <memmove+0x2a>
 800f39c:	bd10      	pop	{r4, pc}
 800f39e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3a6:	e7f7      	b.n	800f398 <memmove+0x24>

0800f3a8 <_realloc_r>:
 800f3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ac:	4680      	mov	r8, r0
 800f3ae:	4614      	mov	r4, r2
 800f3b0:	460e      	mov	r6, r1
 800f3b2:	b921      	cbnz	r1, 800f3be <_realloc_r+0x16>
 800f3b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b8:	4611      	mov	r1, r2
 800f3ba:	f7ff bb85 	b.w	800eac8 <_malloc_r>
 800f3be:	b92a      	cbnz	r2, 800f3cc <_realloc_r+0x24>
 800f3c0:	f7ff fc9c 	bl	800ecfc <_free_r>
 800f3c4:	4625      	mov	r5, r4
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3cc:	f000 f81b 	bl	800f406 <_malloc_usable_size_r>
 800f3d0:	4284      	cmp	r4, r0
 800f3d2:	4607      	mov	r7, r0
 800f3d4:	d802      	bhi.n	800f3dc <_realloc_r+0x34>
 800f3d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f3da:	d812      	bhi.n	800f402 <_realloc_r+0x5a>
 800f3dc:	4621      	mov	r1, r4
 800f3de:	4640      	mov	r0, r8
 800f3e0:	f7ff fb72 	bl	800eac8 <_malloc_r>
 800f3e4:	4605      	mov	r5, r0
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	d0ed      	beq.n	800f3c6 <_realloc_r+0x1e>
 800f3ea:	42bc      	cmp	r4, r7
 800f3ec:	4622      	mov	r2, r4
 800f3ee:	4631      	mov	r1, r6
 800f3f0:	bf28      	it	cs
 800f3f2:	463a      	movcs	r2, r7
 800f3f4:	f7ff fb32 	bl	800ea5c <memcpy>
 800f3f8:	4631      	mov	r1, r6
 800f3fa:	4640      	mov	r0, r8
 800f3fc:	f7ff fc7e 	bl	800ecfc <_free_r>
 800f400:	e7e1      	b.n	800f3c6 <_realloc_r+0x1e>
 800f402:	4635      	mov	r5, r6
 800f404:	e7df      	b.n	800f3c6 <_realloc_r+0x1e>

0800f406 <_malloc_usable_size_r>:
 800f406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f40a:	1f18      	subs	r0, r3, #4
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	bfbc      	itt	lt
 800f410:	580b      	ldrlt	r3, [r1, r0]
 800f412:	18c0      	addlt	r0, r0, r3
 800f414:	4770      	bx	lr
	...

0800f418 <sin>:
 800f418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f41a:	ec53 2b10 	vmov	r2, r3, d0
 800f41e:	4828      	ldr	r0, [pc, #160]	; (800f4c0 <sin+0xa8>)
 800f420:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f424:	4281      	cmp	r1, r0
 800f426:	dc07      	bgt.n	800f438 <sin+0x20>
 800f428:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f4b8 <sin+0xa0>
 800f42c:	2000      	movs	r0, #0
 800f42e:	b005      	add	sp, #20
 800f430:	f85d eb04 	ldr.w	lr, [sp], #4
 800f434:	f000 bf4c 	b.w	80102d0 <__kernel_sin>
 800f438:	4822      	ldr	r0, [pc, #136]	; (800f4c4 <sin+0xac>)
 800f43a:	4281      	cmp	r1, r0
 800f43c:	dd09      	ble.n	800f452 <sin+0x3a>
 800f43e:	ee10 0a10 	vmov	r0, s0
 800f442:	4619      	mov	r1, r3
 800f444:	f7f0 ff38 	bl	80002b8 <__aeabi_dsub>
 800f448:	ec41 0b10 	vmov	d0, r0, r1
 800f44c:	b005      	add	sp, #20
 800f44e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f452:	4668      	mov	r0, sp
 800f454:	f000 f864 	bl	800f520 <__ieee754_rem_pio2>
 800f458:	f000 0003 	and.w	r0, r0, #3
 800f45c:	2801      	cmp	r0, #1
 800f45e:	d00c      	beq.n	800f47a <sin+0x62>
 800f460:	2802      	cmp	r0, #2
 800f462:	d011      	beq.n	800f488 <sin+0x70>
 800f464:	b9f0      	cbnz	r0, 800f4a4 <sin+0x8c>
 800f466:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f46a:	ed9d 0b00 	vldr	d0, [sp]
 800f46e:	2001      	movs	r0, #1
 800f470:	f000 ff2e 	bl	80102d0 <__kernel_sin>
 800f474:	ec51 0b10 	vmov	r0, r1, d0
 800f478:	e7e6      	b.n	800f448 <sin+0x30>
 800f47a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f47e:	ed9d 0b00 	vldr	d0, [sp]
 800f482:	f000 fb0d 	bl	800faa0 <__kernel_cos>
 800f486:	e7f5      	b.n	800f474 <sin+0x5c>
 800f488:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f48c:	ed9d 0b00 	vldr	d0, [sp]
 800f490:	2001      	movs	r0, #1
 800f492:	f000 ff1d 	bl	80102d0 <__kernel_sin>
 800f496:	ec53 2b10 	vmov	r2, r3, d0
 800f49a:	ee10 0a10 	vmov	r0, s0
 800f49e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f4a2:	e7d1      	b.n	800f448 <sin+0x30>
 800f4a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4a8:	ed9d 0b00 	vldr	d0, [sp]
 800f4ac:	f000 faf8 	bl	800faa0 <__kernel_cos>
 800f4b0:	e7f1      	b.n	800f496 <sin+0x7e>
 800f4b2:	bf00      	nop
 800f4b4:	f3af 8000 	nop.w
	...
 800f4c0:	3fe921fb 	.word	0x3fe921fb
 800f4c4:	7fefffff 	.word	0x7fefffff

0800f4c8 <sqrt>:
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	ed2d 8b02 	vpush	{d8}
 800f4ce:	ec55 4b10 	vmov	r4, r5, d0
 800f4d2:	f000 fa31 	bl	800f938 <__ieee754_sqrt>
 800f4d6:	4622      	mov	r2, r4
 800f4d8:	462b      	mov	r3, r5
 800f4da:	4620      	mov	r0, r4
 800f4dc:	4629      	mov	r1, r5
 800f4de:	eeb0 8a40 	vmov.f32	s16, s0
 800f4e2:	eef0 8a60 	vmov.f32	s17, s1
 800f4e6:	f7f1 fb39 	bl	8000b5c <__aeabi_dcmpun>
 800f4ea:	b990      	cbnz	r0, 800f512 <sqrt+0x4a>
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	4629      	mov	r1, r5
 800f4f4:	f7f1 fb0a 	bl	8000b0c <__aeabi_dcmplt>
 800f4f8:	b158      	cbz	r0, 800f512 <sqrt+0x4a>
 800f4fa:	f7ff fa83 	bl	800ea04 <__errno>
 800f4fe:	2321      	movs	r3, #33	; 0x21
 800f500:	6003      	str	r3, [r0, #0]
 800f502:	2200      	movs	r2, #0
 800f504:	2300      	movs	r3, #0
 800f506:	4610      	mov	r0, r2
 800f508:	4619      	mov	r1, r3
 800f50a:	f7f1 f9b7 	bl	800087c <__aeabi_ddiv>
 800f50e:	ec41 0b18 	vmov	d8, r0, r1
 800f512:	eeb0 0a48 	vmov.f32	s0, s16
 800f516:	eef0 0a68 	vmov.f32	s1, s17
 800f51a:	ecbd 8b02 	vpop	{d8}
 800f51e:	bd38      	pop	{r3, r4, r5, pc}

0800f520 <__ieee754_rem_pio2>:
 800f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f524:	ed2d 8b02 	vpush	{d8}
 800f528:	ec55 4b10 	vmov	r4, r5, d0
 800f52c:	4bca      	ldr	r3, [pc, #808]	; (800f858 <__ieee754_rem_pio2+0x338>)
 800f52e:	b08b      	sub	sp, #44	; 0x2c
 800f530:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f534:	4598      	cmp	r8, r3
 800f536:	4682      	mov	sl, r0
 800f538:	9502      	str	r5, [sp, #8]
 800f53a:	dc08      	bgt.n	800f54e <__ieee754_rem_pio2+0x2e>
 800f53c:	2200      	movs	r2, #0
 800f53e:	2300      	movs	r3, #0
 800f540:	ed80 0b00 	vstr	d0, [r0]
 800f544:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f548:	f04f 0b00 	mov.w	fp, #0
 800f54c:	e028      	b.n	800f5a0 <__ieee754_rem_pio2+0x80>
 800f54e:	4bc3      	ldr	r3, [pc, #780]	; (800f85c <__ieee754_rem_pio2+0x33c>)
 800f550:	4598      	cmp	r8, r3
 800f552:	dc78      	bgt.n	800f646 <__ieee754_rem_pio2+0x126>
 800f554:	9b02      	ldr	r3, [sp, #8]
 800f556:	4ec2      	ldr	r6, [pc, #776]	; (800f860 <__ieee754_rem_pio2+0x340>)
 800f558:	2b00      	cmp	r3, #0
 800f55a:	ee10 0a10 	vmov	r0, s0
 800f55e:	a3b0      	add	r3, pc, #704	; (adr r3, 800f820 <__ieee754_rem_pio2+0x300>)
 800f560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f564:	4629      	mov	r1, r5
 800f566:	dd39      	ble.n	800f5dc <__ieee754_rem_pio2+0xbc>
 800f568:	f7f0 fea6 	bl	80002b8 <__aeabi_dsub>
 800f56c:	45b0      	cmp	r8, r6
 800f56e:	4604      	mov	r4, r0
 800f570:	460d      	mov	r5, r1
 800f572:	d01b      	beq.n	800f5ac <__ieee754_rem_pio2+0x8c>
 800f574:	a3ac      	add	r3, pc, #688	; (adr r3, 800f828 <__ieee754_rem_pio2+0x308>)
 800f576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57a:	f7f0 fe9d 	bl	80002b8 <__aeabi_dsub>
 800f57e:	4602      	mov	r2, r0
 800f580:	460b      	mov	r3, r1
 800f582:	e9ca 2300 	strd	r2, r3, [sl]
 800f586:	4620      	mov	r0, r4
 800f588:	4629      	mov	r1, r5
 800f58a:	f7f0 fe95 	bl	80002b8 <__aeabi_dsub>
 800f58e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f828 <__ieee754_rem_pio2+0x308>)
 800f590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f594:	f7f0 fe90 	bl	80002b8 <__aeabi_dsub>
 800f598:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f59c:	f04f 0b01 	mov.w	fp, #1
 800f5a0:	4658      	mov	r0, fp
 800f5a2:	b00b      	add	sp, #44	; 0x2c
 800f5a4:	ecbd 8b02 	vpop	{d8}
 800f5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ac:	a3a0      	add	r3, pc, #640	; (adr r3, 800f830 <__ieee754_rem_pio2+0x310>)
 800f5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b2:	f7f0 fe81 	bl	80002b8 <__aeabi_dsub>
 800f5b6:	a3a0      	add	r3, pc, #640	; (adr r3, 800f838 <__ieee754_rem_pio2+0x318>)
 800f5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5bc:	4604      	mov	r4, r0
 800f5be:	460d      	mov	r5, r1
 800f5c0:	f7f0 fe7a 	bl	80002b8 <__aeabi_dsub>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	e9ca 2300 	strd	r2, r3, [sl]
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	f7f0 fe72 	bl	80002b8 <__aeabi_dsub>
 800f5d4:	a398      	add	r3, pc, #608	; (adr r3, 800f838 <__ieee754_rem_pio2+0x318>)
 800f5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5da:	e7db      	b.n	800f594 <__ieee754_rem_pio2+0x74>
 800f5dc:	f7f0 fe6e 	bl	80002bc <__adddf3>
 800f5e0:	45b0      	cmp	r8, r6
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	460d      	mov	r5, r1
 800f5e6:	d016      	beq.n	800f616 <__ieee754_rem_pio2+0xf6>
 800f5e8:	a38f      	add	r3, pc, #572	; (adr r3, 800f828 <__ieee754_rem_pio2+0x308>)
 800f5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ee:	f7f0 fe65 	bl	80002bc <__adddf3>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	e9ca 2300 	strd	r2, r3, [sl]
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	4629      	mov	r1, r5
 800f5fe:	f7f0 fe5b 	bl	80002b8 <__aeabi_dsub>
 800f602:	a389      	add	r3, pc, #548	; (adr r3, 800f828 <__ieee754_rem_pio2+0x308>)
 800f604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f608:	f7f0 fe58 	bl	80002bc <__adddf3>
 800f60c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800f610:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f614:	e7c4      	b.n	800f5a0 <__ieee754_rem_pio2+0x80>
 800f616:	a386      	add	r3, pc, #536	; (adr r3, 800f830 <__ieee754_rem_pio2+0x310>)
 800f618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61c:	f7f0 fe4e 	bl	80002bc <__adddf3>
 800f620:	a385      	add	r3, pc, #532	; (adr r3, 800f838 <__ieee754_rem_pio2+0x318>)
 800f622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f626:	4604      	mov	r4, r0
 800f628:	460d      	mov	r5, r1
 800f62a:	f7f0 fe47 	bl	80002bc <__adddf3>
 800f62e:	4602      	mov	r2, r0
 800f630:	460b      	mov	r3, r1
 800f632:	e9ca 2300 	strd	r2, r3, [sl]
 800f636:	4620      	mov	r0, r4
 800f638:	4629      	mov	r1, r5
 800f63a:	f7f0 fe3d 	bl	80002b8 <__aeabi_dsub>
 800f63e:	a37e      	add	r3, pc, #504	; (adr r3, 800f838 <__ieee754_rem_pio2+0x318>)
 800f640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f644:	e7e0      	b.n	800f608 <__ieee754_rem_pio2+0xe8>
 800f646:	4b87      	ldr	r3, [pc, #540]	; (800f864 <__ieee754_rem_pio2+0x344>)
 800f648:	4598      	cmp	r8, r3
 800f64a:	f300 80d9 	bgt.w	800f800 <__ieee754_rem_pio2+0x2e0>
 800f64e:	f000 fefd 	bl	801044c <fabs>
 800f652:	ec55 4b10 	vmov	r4, r5, d0
 800f656:	ee10 0a10 	vmov	r0, s0
 800f65a:	a379      	add	r3, pc, #484	; (adr r3, 800f840 <__ieee754_rem_pio2+0x320>)
 800f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f660:	4629      	mov	r1, r5
 800f662:	f7f0 ffe1 	bl	8000628 <__aeabi_dmul>
 800f666:	4b80      	ldr	r3, [pc, #512]	; (800f868 <__ieee754_rem_pio2+0x348>)
 800f668:	2200      	movs	r2, #0
 800f66a:	f7f0 fe27 	bl	80002bc <__adddf3>
 800f66e:	f7f1 fa8b 	bl	8000b88 <__aeabi_d2iz>
 800f672:	4683      	mov	fp, r0
 800f674:	f7f0 ff6e 	bl	8000554 <__aeabi_i2d>
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	ec43 2b18 	vmov	d8, r2, r3
 800f680:	a367      	add	r3, pc, #412	; (adr r3, 800f820 <__ieee754_rem_pio2+0x300>)
 800f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f686:	f7f0 ffcf 	bl	8000628 <__aeabi_dmul>
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	4620      	mov	r0, r4
 800f690:	4629      	mov	r1, r5
 800f692:	f7f0 fe11 	bl	80002b8 <__aeabi_dsub>
 800f696:	a364      	add	r3, pc, #400	; (adr r3, 800f828 <__ieee754_rem_pio2+0x308>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	4606      	mov	r6, r0
 800f69e:	460f      	mov	r7, r1
 800f6a0:	ec51 0b18 	vmov	r0, r1, d8
 800f6a4:	f7f0 ffc0 	bl	8000628 <__aeabi_dmul>
 800f6a8:	f1bb 0f1f 	cmp.w	fp, #31
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	460d      	mov	r5, r1
 800f6b0:	dc0d      	bgt.n	800f6ce <__ieee754_rem_pio2+0x1ae>
 800f6b2:	4b6e      	ldr	r3, [pc, #440]	; (800f86c <__ieee754_rem_pio2+0x34c>)
 800f6b4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800f6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6bc:	4543      	cmp	r3, r8
 800f6be:	d006      	beq.n	800f6ce <__ieee754_rem_pio2+0x1ae>
 800f6c0:	4622      	mov	r2, r4
 800f6c2:	462b      	mov	r3, r5
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	4639      	mov	r1, r7
 800f6c8:	f7f0 fdf6 	bl	80002b8 <__aeabi_dsub>
 800f6cc:	e00f      	b.n	800f6ee <__ieee754_rem_pio2+0x1ce>
 800f6ce:	462b      	mov	r3, r5
 800f6d0:	4622      	mov	r2, r4
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	4639      	mov	r1, r7
 800f6d6:	f7f0 fdef 	bl	80002b8 <__aeabi_dsub>
 800f6da:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f6de:	9303      	str	r3, [sp, #12]
 800f6e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f6e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f6e8:	f1b8 0f10 	cmp.w	r8, #16
 800f6ec:	dc02      	bgt.n	800f6f4 <__ieee754_rem_pio2+0x1d4>
 800f6ee:	e9ca 0100 	strd	r0, r1, [sl]
 800f6f2:	e039      	b.n	800f768 <__ieee754_rem_pio2+0x248>
 800f6f4:	a34e      	add	r3, pc, #312	; (adr r3, 800f830 <__ieee754_rem_pio2+0x310>)
 800f6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fa:	ec51 0b18 	vmov	r0, r1, d8
 800f6fe:	f7f0 ff93 	bl	8000628 <__aeabi_dmul>
 800f702:	4604      	mov	r4, r0
 800f704:	460d      	mov	r5, r1
 800f706:	4602      	mov	r2, r0
 800f708:	460b      	mov	r3, r1
 800f70a:	4630      	mov	r0, r6
 800f70c:	4639      	mov	r1, r7
 800f70e:	f7f0 fdd3 	bl	80002b8 <__aeabi_dsub>
 800f712:	4602      	mov	r2, r0
 800f714:	460b      	mov	r3, r1
 800f716:	4680      	mov	r8, r0
 800f718:	4689      	mov	r9, r1
 800f71a:	4630      	mov	r0, r6
 800f71c:	4639      	mov	r1, r7
 800f71e:	f7f0 fdcb 	bl	80002b8 <__aeabi_dsub>
 800f722:	4622      	mov	r2, r4
 800f724:	462b      	mov	r3, r5
 800f726:	f7f0 fdc7 	bl	80002b8 <__aeabi_dsub>
 800f72a:	a343      	add	r3, pc, #268	; (adr r3, 800f838 <__ieee754_rem_pio2+0x318>)
 800f72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f730:	4604      	mov	r4, r0
 800f732:	460d      	mov	r5, r1
 800f734:	ec51 0b18 	vmov	r0, r1, d8
 800f738:	f7f0 ff76 	bl	8000628 <__aeabi_dmul>
 800f73c:	4622      	mov	r2, r4
 800f73e:	462b      	mov	r3, r5
 800f740:	f7f0 fdba 	bl	80002b8 <__aeabi_dsub>
 800f744:	4602      	mov	r2, r0
 800f746:	460b      	mov	r3, r1
 800f748:	4604      	mov	r4, r0
 800f74a:	460d      	mov	r5, r1
 800f74c:	4640      	mov	r0, r8
 800f74e:	4649      	mov	r1, r9
 800f750:	f7f0 fdb2 	bl	80002b8 <__aeabi_dsub>
 800f754:	9a03      	ldr	r2, [sp, #12]
 800f756:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	2b31      	cmp	r3, #49	; 0x31
 800f75e:	dc24      	bgt.n	800f7aa <__ieee754_rem_pio2+0x28a>
 800f760:	e9ca 0100 	strd	r0, r1, [sl]
 800f764:	4646      	mov	r6, r8
 800f766:	464f      	mov	r7, r9
 800f768:	e9da 8900 	ldrd	r8, r9, [sl]
 800f76c:	4630      	mov	r0, r6
 800f76e:	4642      	mov	r2, r8
 800f770:	464b      	mov	r3, r9
 800f772:	4639      	mov	r1, r7
 800f774:	f7f0 fda0 	bl	80002b8 <__aeabi_dsub>
 800f778:	462b      	mov	r3, r5
 800f77a:	4622      	mov	r2, r4
 800f77c:	f7f0 fd9c 	bl	80002b8 <__aeabi_dsub>
 800f780:	9b02      	ldr	r3, [sp, #8]
 800f782:	2b00      	cmp	r3, #0
 800f784:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f788:	f6bf af0a 	bge.w	800f5a0 <__ieee754_rem_pio2+0x80>
 800f78c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f790:	f8ca 3004 	str.w	r3, [sl, #4]
 800f794:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f798:	f8ca 8000 	str.w	r8, [sl]
 800f79c:	f8ca 0008 	str.w	r0, [sl, #8]
 800f7a0:	f8ca 300c 	str.w	r3, [sl, #12]
 800f7a4:	f1cb 0b00 	rsb	fp, fp, #0
 800f7a8:	e6fa      	b.n	800f5a0 <__ieee754_rem_pio2+0x80>
 800f7aa:	a327      	add	r3, pc, #156	; (adr r3, 800f848 <__ieee754_rem_pio2+0x328>)
 800f7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b0:	ec51 0b18 	vmov	r0, r1, d8
 800f7b4:	f7f0 ff38 	bl	8000628 <__aeabi_dmul>
 800f7b8:	4604      	mov	r4, r0
 800f7ba:	460d      	mov	r5, r1
 800f7bc:	4602      	mov	r2, r0
 800f7be:	460b      	mov	r3, r1
 800f7c0:	4640      	mov	r0, r8
 800f7c2:	4649      	mov	r1, r9
 800f7c4:	f7f0 fd78 	bl	80002b8 <__aeabi_dsub>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	4606      	mov	r6, r0
 800f7ce:	460f      	mov	r7, r1
 800f7d0:	4640      	mov	r0, r8
 800f7d2:	4649      	mov	r1, r9
 800f7d4:	f7f0 fd70 	bl	80002b8 <__aeabi_dsub>
 800f7d8:	4622      	mov	r2, r4
 800f7da:	462b      	mov	r3, r5
 800f7dc:	f7f0 fd6c 	bl	80002b8 <__aeabi_dsub>
 800f7e0:	a31b      	add	r3, pc, #108	; (adr r3, 800f850 <__ieee754_rem_pio2+0x330>)
 800f7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	460d      	mov	r5, r1
 800f7ea:	ec51 0b18 	vmov	r0, r1, d8
 800f7ee:	f7f0 ff1b 	bl	8000628 <__aeabi_dmul>
 800f7f2:	4622      	mov	r2, r4
 800f7f4:	462b      	mov	r3, r5
 800f7f6:	f7f0 fd5f 	bl	80002b8 <__aeabi_dsub>
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	460d      	mov	r5, r1
 800f7fe:	e75f      	b.n	800f6c0 <__ieee754_rem_pio2+0x1a0>
 800f800:	4b1b      	ldr	r3, [pc, #108]	; (800f870 <__ieee754_rem_pio2+0x350>)
 800f802:	4598      	cmp	r8, r3
 800f804:	dd36      	ble.n	800f874 <__ieee754_rem_pio2+0x354>
 800f806:	ee10 2a10 	vmov	r2, s0
 800f80a:	462b      	mov	r3, r5
 800f80c:	4620      	mov	r0, r4
 800f80e:	4629      	mov	r1, r5
 800f810:	f7f0 fd52 	bl	80002b8 <__aeabi_dsub>
 800f814:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f818:	e9ca 0100 	strd	r0, r1, [sl]
 800f81c:	e694      	b.n	800f548 <__ieee754_rem_pio2+0x28>
 800f81e:	bf00      	nop
 800f820:	54400000 	.word	0x54400000
 800f824:	3ff921fb 	.word	0x3ff921fb
 800f828:	1a626331 	.word	0x1a626331
 800f82c:	3dd0b461 	.word	0x3dd0b461
 800f830:	1a600000 	.word	0x1a600000
 800f834:	3dd0b461 	.word	0x3dd0b461
 800f838:	2e037073 	.word	0x2e037073
 800f83c:	3ba3198a 	.word	0x3ba3198a
 800f840:	6dc9c883 	.word	0x6dc9c883
 800f844:	3fe45f30 	.word	0x3fe45f30
 800f848:	2e000000 	.word	0x2e000000
 800f84c:	3ba3198a 	.word	0x3ba3198a
 800f850:	252049c1 	.word	0x252049c1
 800f854:	397b839a 	.word	0x397b839a
 800f858:	3fe921fb 	.word	0x3fe921fb
 800f85c:	4002d97b 	.word	0x4002d97b
 800f860:	3ff921fb 	.word	0x3ff921fb
 800f864:	413921fb 	.word	0x413921fb
 800f868:	3fe00000 	.word	0x3fe00000
 800f86c:	08012950 	.word	0x08012950
 800f870:	7fefffff 	.word	0x7fefffff
 800f874:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f878:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f87c:	ee10 0a10 	vmov	r0, s0
 800f880:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f884:	ee10 6a10 	vmov	r6, s0
 800f888:	460f      	mov	r7, r1
 800f88a:	f7f1 f97d 	bl	8000b88 <__aeabi_d2iz>
 800f88e:	f7f0 fe61 	bl	8000554 <__aeabi_i2d>
 800f892:	4602      	mov	r2, r0
 800f894:	460b      	mov	r3, r1
 800f896:	4630      	mov	r0, r6
 800f898:	4639      	mov	r1, r7
 800f89a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f89e:	f7f0 fd0b 	bl	80002b8 <__aeabi_dsub>
 800f8a2:	4b23      	ldr	r3, [pc, #140]	; (800f930 <__ieee754_rem_pio2+0x410>)
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	f7f0 febf 	bl	8000628 <__aeabi_dmul>
 800f8aa:	460f      	mov	r7, r1
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	f7f1 f96b 	bl	8000b88 <__aeabi_d2iz>
 800f8b2:	f7f0 fe4f 	bl	8000554 <__aeabi_i2d>
 800f8b6:	4602      	mov	r2, r0
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	4639      	mov	r1, r7
 800f8be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f8c2:	f7f0 fcf9 	bl	80002b8 <__aeabi_dsub>
 800f8c6:	4b1a      	ldr	r3, [pc, #104]	; (800f930 <__ieee754_rem_pio2+0x410>)
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f7f0 fead 	bl	8000628 <__aeabi_dmul>
 800f8ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f8d2:	ad04      	add	r5, sp, #16
 800f8d4:	f04f 0803 	mov.w	r8, #3
 800f8d8:	46a9      	mov	r9, r5
 800f8da:	2600      	movs	r6, #0
 800f8dc:	2700      	movs	r7, #0
 800f8de:	4632      	mov	r2, r6
 800f8e0:	463b      	mov	r3, r7
 800f8e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f8e6:	46c3      	mov	fp, r8
 800f8e8:	3d08      	subs	r5, #8
 800f8ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f8ee:	f7f1 f903 	bl	8000af8 <__aeabi_dcmpeq>
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	d1f3      	bne.n	800f8de <__ieee754_rem_pio2+0x3be>
 800f8f6:	4b0f      	ldr	r3, [pc, #60]	; (800f934 <__ieee754_rem_pio2+0x414>)
 800f8f8:	9301      	str	r3, [sp, #4]
 800f8fa:	2302      	movs	r3, #2
 800f8fc:	9300      	str	r3, [sp, #0]
 800f8fe:	4622      	mov	r2, r4
 800f900:	465b      	mov	r3, fp
 800f902:	4651      	mov	r1, sl
 800f904:	4648      	mov	r0, r9
 800f906:	f000 f993 	bl	800fc30 <__kernel_rem_pio2>
 800f90a:	9b02      	ldr	r3, [sp, #8]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	4683      	mov	fp, r0
 800f910:	f6bf ae46 	bge.w	800f5a0 <__ieee754_rem_pio2+0x80>
 800f914:	e9da 2100 	ldrd	r2, r1, [sl]
 800f918:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f91c:	e9ca 2300 	strd	r2, r3, [sl]
 800f920:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f928:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f92c:	e73a      	b.n	800f7a4 <__ieee754_rem_pio2+0x284>
 800f92e:	bf00      	nop
 800f930:	41700000 	.word	0x41700000
 800f934:	080129d0 	.word	0x080129d0

0800f938 <__ieee754_sqrt>:
 800f938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f93c:	ec55 4b10 	vmov	r4, r5, d0
 800f940:	4e55      	ldr	r6, [pc, #340]	; (800fa98 <__ieee754_sqrt+0x160>)
 800f942:	43ae      	bics	r6, r5
 800f944:	ee10 0a10 	vmov	r0, s0
 800f948:	ee10 3a10 	vmov	r3, s0
 800f94c:	462a      	mov	r2, r5
 800f94e:	4629      	mov	r1, r5
 800f950:	d110      	bne.n	800f974 <__ieee754_sqrt+0x3c>
 800f952:	ee10 2a10 	vmov	r2, s0
 800f956:	462b      	mov	r3, r5
 800f958:	f7f0 fe66 	bl	8000628 <__aeabi_dmul>
 800f95c:	4602      	mov	r2, r0
 800f95e:	460b      	mov	r3, r1
 800f960:	4620      	mov	r0, r4
 800f962:	4629      	mov	r1, r5
 800f964:	f7f0 fcaa 	bl	80002bc <__adddf3>
 800f968:	4604      	mov	r4, r0
 800f96a:	460d      	mov	r5, r1
 800f96c:	ec45 4b10 	vmov	d0, r4, r5
 800f970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f974:	2d00      	cmp	r5, #0
 800f976:	dc10      	bgt.n	800f99a <__ieee754_sqrt+0x62>
 800f978:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f97c:	4330      	orrs	r0, r6
 800f97e:	d0f5      	beq.n	800f96c <__ieee754_sqrt+0x34>
 800f980:	b15d      	cbz	r5, 800f99a <__ieee754_sqrt+0x62>
 800f982:	ee10 2a10 	vmov	r2, s0
 800f986:	462b      	mov	r3, r5
 800f988:	ee10 0a10 	vmov	r0, s0
 800f98c:	f7f0 fc94 	bl	80002b8 <__aeabi_dsub>
 800f990:	4602      	mov	r2, r0
 800f992:	460b      	mov	r3, r1
 800f994:	f7f0 ff72 	bl	800087c <__aeabi_ddiv>
 800f998:	e7e6      	b.n	800f968 <__ieee754_sqrt+0x30>
 800f99a:	1512      	asrs	r2, r2, #20
 800f99c:	d074      	beq.n	800fa88 <__ieee754_sqrt+0x150>
 800f99e:	07d4      	lsls	r4, r2, #31
 800f9a0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f9a4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f9a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f9ac:	bf5e      	ittt	pl
 800f9ae:	0fda      	lsrpl	r2, r3, #31
 800f9b0:	005b      	lslpl	r3, r3, #1
 800f9b2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f9b6:	2400      	movs	r4, #0
 800f9b8:	0fda      	lsrs	r2, r3, #31
 800f9ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f9be:	107f      	asrs	r7, r7, #1
 800f9c0:	005b      	lsls	r3, r3, #1
 800f9c2:	2516      	movs	r5, #22
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f9ca:	1886      	adds	r6, r0, r2
 800f9cc:	428e      	cmp	r6, r1
 800f9ce:	bfde      	ittt	le
 800f9d0:	1b89      	suble	r1, r1, r6
 800f9d2:	18b0      	addle	r0, r6, r2
 800f9d4:	18a4      	addle	r4, r4, r2
 800f9d6:	0049      	lsls	r1, r1, #1
 800f9d8:	3d01      	subs	r5, #1
 800f9da:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f9de:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f9e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f9e6:	d1f0      	bne.n	800f9ca <__ieee754_sqrt+0x92>
 800f9e8:	462a      	mov	r2, r5
 800f9ea:	f04f 0e20 	mov.w	lr, #32
 800f9ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f9f2:	4281      	cmp	r1, r0
 800f9f4:	eb06 0c05 	add.w	ip, r6, r5
 800f9f8:	dc02      	bgt.n	800fa00 <__ieee754_sqrt+0xc8>
 800f9fa:	d113      	bne.n	800fa24 <__ieee754_sqrt+0xec>
 800f9fc:	459c      	cmp	ip, r3
 800f9fe:	d811      	bhi.n	800fa24 <__ieee754_sqrt+0xec>
 800fa00:	f1bc 0f00 	cmp.w	ip, #0
 800fa04:	eb0c 0506 	add.w	r5, ip, r6
 800fa08:	da43      	bge.n	800fa92 <__ieee754_sqrt+0x15a>
 800fa0a:	2d00      	cmp	r5, #0
 800fa0c:	db41      	blt.n	800fa92 <__ieee754_sqrt+0x15a>
 800fa0e:	f100 0801 	add.w	r8, r0, #1
 800fa12:	1a09      	subs	r1, r1, r0
 800fa14:	459c      	cmp	ip, r3
 800fa16:	bf88      	it	hi
 800fa18:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800fa1c:	eba3 030c 	sub.w	r3, r3, ip
 800fa20:	4432      	add	r2, r6
 800fa22:	4640      	mov	r0, r8
 800fa24:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fa28:	f1be 0e01 	subs.w	lr, lr, #1
 800fa2c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fa30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fa34:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fa38:	d1db      	bne.n	800f9f2 <__ieee754_sqrt+0xba>
 800fa3a:	430b      	orrs	r3, r1
 800fa3c:	d006      	beq.n	800fa4c <__ieee754_sqrt+0x114>
 800fa3e:	1c50      	adds	r0, r2, #1
 800fa40:	bf13      	iteet	ne
 800fa42:	3201      	addne	r2, #1
 800fa44:	3401      	addeq	r4, #1
 800fa46:	4672      	moveq	r2, lr
 800fa48:	f022 0201 	bicne.w	r2, r2, #1
 800fa4c:	1063      	asrs	r3, r4, #1
 800fa4e:	0852      	lsrs	r2, r2, #1
 800fa50:	07e1      	lsls	r1, r4, #31
 800fa52:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fa56:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fa5a:	bf48      	it	mi
 800fa5c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fa60:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fa64:	4614      	mov	r4, r2
 800fa66:	e781      	b.n	800f96c <__ieee754_sqrt+0x34>
 800fa68:	0ad9      	lsrs	r1, r3, #11
 800fa6a:	3815      	subs	r0, #21
 800fa6c:	055b      	lsls	r3, r3, #21
 800fa6e:	2900      	cmp	r1, #0
 800fa70:	d0fa      	beq.n	800fa68 <__ieee754_sqrt+0x130>
 800fa72:	02cd      	lsls	r5, r1, #11
 800fa74:	d50a      	bpl.n	800fa8c <__ieee754_sqrt+0x154>
 800fa76:	f1c2 0420 	rsb	r4, r2, #32
 800fa7a:	fa23 f404 	lsr.w	r4, r3, r4
 800fa7e:	1e55      	subs	r5, r2, #1
 800fa80:	4093      	lsls	r3, r2
 800fa82:	4321      	orrs	r1, r4
 800fa84:	1b42      	subs	r2, r0, r5
 800fa86:	e78a      	b.n	800f99e <__ieee754_sqrt+0x66>
 800fa88:	4610      	mov	r0, r2
 800fa8a:	e7f0      	b.n	800fa6e <__ieee754_sqrt+0x136>
 800fa8c:	0049      	lsls	r1, r1, #1
 800fa8e:	3201      	adds	r2, #1
 800fa90:	e7ef      	b.n	800fa72 <__ieee754_sqrt+0x13a>
 800fa92:	4680      	mov	r8, r0
 800fa94:	e7bd      	b.n	800fa12 <__ieee754_sqrt+0xda>
 800fa96:	bf00      	nop
 800fa98:	7ff00000 	.word	0x7ff00000
 800fa9c:	00000000 	.word	0x00000000

0800faa0 <__kernel_cos>:
 800faa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa4:	ec57 6b10 	vmov	r6, r7, d0
 800faa8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800faac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fab0:	ed8d 1b00 	vstr	d1, [sp]
 800fab4:	da07      	bge.n	800fac6 <__kernel_cos+0x26>
 800fab6:	ee10 0a10 	vmov	r0, s0
 800faba:	4639      	mov	r1, r7
 800fabc:	f7f1 f864 	bl	8000b88 <__aeabi_d2iz>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	f000 8088 	beq.w	800fbd6 <__kernel_cos+0x136>
 800fac6:	4632      	mov	r2, r6
 800fac8:	463b      	mov	r3, r7
 800faca:	4630      	mov	r0, r6
 800facc:	4639      	mov	r1, r7
 800face:	f7f0 fdab 	bl	8000628 <__aeabi_dmul>
 800fad2:	4b51      	ldr	r3, [pc, #324]	; (800fc18 <__kernel_cos+0x178>)
 800fad4:	2200      	movs	r2, #0
 800fad6:	4604      	mov	r4, r0
 800fad8:	460d      	mov	r5, r1
 800fada:	f7f0 fda5 	bl	8000628 <__aeabi_dmul>
 800fade:	a340      	add	r3, pc, #256	; (adr r3, 800fbe0 <__kernel_cos+0x140>)
 800fae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae4:	4682      	mov	sl, r0
 800fae6:	468b      	mov	fp, r1
 800fae8:	4620      	mov	r0, r4
 800faea:	4629      	mov	r1, r5
 800faec:	f7f0 fd9c 	bl	8000628 <__aeabi_dmul>
 800faf0:	a33d      	add	r3, pc, #244	; (adr r3, 800fbe8 <__kernel_cos+0x148>)
 800faf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf6:	f7f0 fbe1 	bl	80002bc <__adddf3>
 800fafa:	4622      	mov	r2, r4
 800fafc:	462b      	mov	r3, r5
 800fafe:	f7f0 fd93 	bl	8000628 <__aeabi_dmul>
 800fb02:	a33b      	add	r3, pc, #236	; (adr r3, 800fbf0 <__kernel_cos+0x150>)
 800fb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb08:	f7f0 fbd6 	bl	80002b8 <__aeabi_dsub>
 800fb0c:	4622      	mov	r2, r4
 800fb0e:	462b      	mov	r3, r5
 800fb10:	f7f0 fd8a 	bl	8000628 <__aeabi_dmul>
 800fb14:	a338      	add	r3, pc, #224	; (adr r3, 800fbf8 <__kernel_cos+0x158>)
 800fb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1a:	f7f0 fbcf 	bl	80002bc <__adddf3>
 800fb1e:	4622      	mov	r2, r4
 800fb20:	462b      	mov	r3, r5
 800fb22:	f7f0 fd81 	bl	8000628 <__aeabi_dmul>
 800fb26:	a336      	add	r3, pc, #216	; (adr r3, 800fc00 <__kernel_cos+0x160>)
 800fb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2c:	f7f0 fbc4 	bl	80002b8 <__aeabi_dsub>
 800fb30:	4622      	mov	r2, r4
 800fb32:	462b      	mov	r3, r5
 800fb34:	f7f0 fd78 	bl	8000628 <__aeabi_dmul>
 800fb38:	a333      	add	r3, pc, #204	; (adr r3, 800fc08 <__kernel_cos+0x168>)
 800fb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3e:	f7f0 fbbd 	bl	80002bc <__adddf3>
 800fb42:	4622      	mov	r2, r4
 800fb44:	462b      	mov	r3, r5
 800fb46:	f7f0 fd6f 	bl	8000628 <__aeabi_dmul>
 800fb4a:	4622      	mov	r2, r4
 800fb4c:	462b      	mov	r3, r5
 800fb4e:	f7f0 fd6b 	bl	8000628 <__aeabi_dmul>
 800fb52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb56:	4604      	mov	r4, r0
 800fb58:	460d      	mov	r5, r1
 800fb5a:	4630      	mov	r0, r6
 800fb5c:	4639      	mov	r1, r7
 800fb5e:	f7f0 fd63 	bl	8000628 <__aeabi_dmul>
 800fb62:	460b      	mov	r3, r1
 800fb64:	4602      	mov	r2, r0
 800fb66:	4629      	mov	r1, r5
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f7f0 fba5 	bl	80002b8 <__aeabi_dsub>
 800fb6e:	4b2b      	ldr	r3, [pc, #172]	; (800fc1c <__kernel_cos+0x17c>)
 800fb70:	4598      	cmp	r8, r3
 800fb72:	4606      	mov	r6, r0
 800fb74:	460f      	mov	r7, r1
 800fb76:	dc10      	bgt.n	800fb9a <__kernel_cos+0xfa>
 800fb78:	4602      	mov	r2, r0
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	4650      	mov	r0, sl
 800fb7e:	4659      	mov	r1, fp
 800fb80:	f7f0 fb9a 	bl	80002b8 <__aeabi_dsub>
 800fb84:	460b      	mov	r3, r1
 800fb86:	4926      	ldr	r1, [pc, #152]	; (800fc20 <__kernel_cos+0x180>)
 800fb88:	4602      	mov	r2, r0
 800fb8a:	2000      	movs	r0, #0
 800fb8c:	f7f0 fb94 	bl	80002b8 <__aeabi_dsub>
 800fb90:	ec41 0b10 	vmov	d0, r0, r1
 800fb94:	b003      	add	sp, #12
 800fb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb9a:	4b22      	ldr	r3, [pc, #136]	; (800fc24 <__kernel_cos+0x184>)
 800fb9c:	4920      	ldr	r1, [pc, #128]	; (800fc20 <__kernel_cos+0x180>)
 800fb9e:	4598      	cmp	r8, r3
 800fba0:	bfcc      	ite	gt
 800fba2:	4d21      	ldrgt	r5, [pc, #132]	; (800fc28 <__kernel_cos+0x188>)
 800fba4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fba8:	2400      	movs	r4, #0
 800fbaa:	4622      	mov	r2, r4
 800fbac:	462b      	mov	r3, r5
 800fbae:	2000      	movs	r0, #0
 800fbb0:	f7f0 fb82 	bl	80002b8 <__aeabi_dsub>
 800fbb4:	4622      	mov	r2, r4
 800fbb6:	4680      	mov	r8, r0
 800fbb8:	4689      	mov	r9, r1
 800fbba:	462b      	mov	r3, r5
 800fbbc:	4650      	mov	r0, sl
 800fbbe:	4659      	mov	r1, fp
 800fbc0:	f7f0 fb7a 	bl	80002b8 <__aeabi_dsub>
 800fbc4:	4632      	mov	r2, r6
 800fbc6:	463b      	mov	r3, r7
 800fbc8:	f7f0 fb76 	bl	80002b8 <__aeabi_dsub>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	460b      	mov	r3, r1
 800fbd0:	4640      	mov	r0, r8
 800fbd2:	4649      	mov	r1, r9
 800fbd4:	e7da      	b.n	800fb8c <__kernel_cos+0xec>
 800fbd6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fc10 <__kernel_cos+0x170>
 800fbda:	e7db      	b.n	800fb94 <__kernel_cos+0xf4>
 800fbdc:	f3af 8000 	nop.w
 800fbe0:	be8838d4 	.word	0xbe8838d4
 800fbe4:	bda8fae9 	.word	0xbda8fae9
 800fbe8:	bdb4b1c4 	.word	0xbdb4b1c4
 800fbec:	3e21ee9e 	.word	0x3e21ee9e
 800fbf0:	809c52ad 	.word	0x809c52ad
 800fbf4:	3e927e4f 	.word	0x3e927e4f
 800fbf8:	19cb1590 	.word	0x19cb1590
 800fbfc:	3efa01a0 	.word	0x3efa01a0
 800fc00:	16c15177 	.word	0x16c15177
 800fc04:	3f56c16c 	.word	0x3f56c16c
 800fc08:	5555554c 	.word	0x5555554c
 800fc0c:	3fa55555 	.word	0x3fa55555
 800fc10:	00000000 	.word	0x00000000
 800fc14:	3ff00000 	.word	0x3ff00000
 800fc18:	3fe00000 	.word	0x3fe00000
 800fc1c:	3fd33332 	.word	0x3fd33332
 800fc20:	3ff00000 	.word	0x3ff00000
 800fc24:	3fe90000 	.word	0x3fe90000
 800fc28:	3fd20000 	.word	0x3fd20000
 800fc2c:	00000000 	.word	0x00000000

0800fc30 <__kernel_rem_pio2>:
 800fc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc34:	ed2d 8b02 	vpush	{d8}
 800fc38:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800fc3c:	f112 0f14 	cmn.w	r2, #20
 800fc40:	9308      	str	r3, [sp, #32]
 800fc42:	9101      	str	r1, [sp, #4]
 800fc44:	4bc4      	ldr	r3, [pc, #784]	; (800ff58 <__kernel_rem_pio2+0x328>)
 800fc46:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fc48:	900b      	str	r0, [sp, #44]	; 0x2c
 800fc4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc4e:	9302      	str	r3, [sp, #8]
 800fc50:	9b08      	ldr	r3, [sp, #32]
 800fc52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800fc56:	bfa8      	it	ge
 800fc58:	1ed4      	subge	r4, r2, #3
 800fc5a:	9306      	str	r3, [sp, #24]
 800fc5c:	bfb2      	itee	lt
 800fc5e:	2400      	movlt	r4, #0
 800fc60:	2318      	movge	r3, #24
 800fc62:	fb94 f4f3 	sdivge	r4, r4, r3
 800fc66:	f06f 0317 	mvn.w	r3, #23
 800fc6a:	fb04 3303 	mla	r3, r4, r3, r3
 800fc6e:	eb03 0a02 	add.w	sl, r3, r2
 800fc72:	9b02      	ldr	r3, [sp, #8]
 800fc74:	9a06      	ldr	r2, [sp, #24]
 800fc76:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ff48 <__kernel_rem_pio2+0x318>
 800fc7a:	eb03 0802 	add.w	r8, r3, r2
 800fc7e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fc80:	1aa7      	subs	r7, r4, r2
 800fc82:	ae22      	add	r6, sp, #136	; 0x88
 800fc84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fc88:	2500      	movs	r5, #0
 800fc8a:	4545      	cmp	r5, r8
 800fc8c:	dd13      	ble.n	800fcb6 <__kernel_rem_pio2+0x86>
 800fc8e:	9b08      	ldr	r3, [sp, #32]
 800fc90:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ff48 <__kernel_rem_pio2+0x318>
 800fc94:	aa22      	add	r2, sp, #136	; 0x88
 800fc96:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fc9a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800fc9e:	f04f 0800 	mov.w	r8, #0
 800fca2:	9b02      	ldr	r3, [sp, #8]
 800fca4:	4598      	cmp	r8, r3
 800fca6:	dc2f      	bgt.n	800fd08 <__kernel_rem_pio2+0xd8>
 800fca8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fcac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800fcb0:	462f      	mov	r7, r5
 800fcb2:	2600      	movs	r6, #0
 800fcb4:	e01b      	b.n	800fcee <__kernel_rem_pio2+0xbe>
 800fcb6:	42ef      	cmn	r7, r5
 800fcb8:	d407      	bmi.n	800fcca <__kernel_rem_pio2+0x9a>
 800fcba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fcbe:	f7f0 fc49 	bl	8000554 <__aeabi_i2d>
 800fcc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fcc6:	3501      	adds	r5, #1
 800fcc8:	e7df      	b.n	800fc8a <__kernel_rem_pio2+0x5a>
 800fcca:	ec51 0b18 	vmov	r0, r1, d8
 800fcce:	e7f8      	b.n	800fcc2 <__kernel_rem_pio2+0x92>
 800fcd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fcd8:	f7f0 fca6 	bl	8000628 <__aeabi_dmul>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fce4:	f7f0 faea 	bl	80002bc <__adddf3>
 800fce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcec:	3601      	adds	r6, #1
 800fcee:	9b06      	ldr	r3, [sp, #24]
 800fcf0:	429e      	cmp	r6, r3
 800fcf2:	f1a7 0708 	sub.w	r7, r7, #8
 800fcf6:	ddeb      	ble.n	800fcd0 <__kernel_rem_pio2+0xa0>
 800fcf8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fcfc:	f108 0801 	add.w	r8, r8, #1
 800fd00:	ecab 7b02 	vstmia	fp!, {d7}
 800fd04:	3508      	adds	r5, #8
 800fd06:	e7cc      	b.n	800fca2 <__kernel_rem_pio2+0x72>
 800fd08:	9b02      	ldr	r3, [sp, #8]
 800fd0a:	aa0e      	add	r2, sp, #56	; 0x38
 800fd0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd10:	930d      	str	r3, [sp, #52]	; 0x34
 800fd12:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fd14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fd18:	9c02      	ldr	r4, [sp, #8]
 800fd1a:	930c      	str	r3, [sp, #48]	; 0x30
 800fd1c:	00e3      	lsls	r3, r4, #3
 800fd1e:	930a      	str	r3, [sp, #40]	; 0x28
 800fd20:	ab9a      	add	r3, sp, #616	; 0x268
 800fd22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd26:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fd2a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fd2e:	ab72      	add	r3, sp, #456	; 0x1c8
 800fd30:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fd34:	46c3      	mov	fp, r8
 800fd36:	46a1      	mov	r9, r4
 800fd38:	f1b9 0f00 	cmp.w	r9, #0
 800fd3c:	f1a5 0508 	sub.w	r5, r5, #8
 800fd40:	dc77      	bgt.n	800fe32 <__kernel_rem_pio2+0x202>
 800fd42:	ec47 6b10 	vmov	d0, r6, r7
 800fd46:	4650      	mov	r0, sl
 800fd48:	f000 fc0a 	bl	8010560 <scalbn>
 800fd4c:	ec57 6b10 	vmov	r6, r7, d0
 800fd50:	2200      	movs	r2, #0
 800fd52:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fd56:	ee10 0a10 	vmov	r0, s0
 800fd5a:	4639      	mov	r1, r7
 800fd5c:	f7f0 fc64 	bl	8000628 <__aeabi_dmul>
 800fd60:	ec41 0b10 	vmov	d0, r0, r1
 800fd64:	f000 fb7c 	bl	8010460 <floor>
 800fd68:	4b7c      	ldr	r3, [pc, #496]	; (800ff5c <__kernel_rem_pio2+0x32c>)
 800fd6a:	ec51 0b10 	vmov	r0, r1, d0
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f7f0 fc5a 	bl	8000628 <__aeabi_dmul>
 800fd74:	4602      	mov	r2, r0
 800fd76:	460b      	mov	r3, r1
 800fd78:	4630      	mov	r0, r6
 800fd7a:	4639      	mov	r1, r7
 800fd7c:	f7f0 fa9c 	bl	80002b8 <__aeabi_dsub>
 800fd80:	460f      	mov	r7, r1
 800fd82:	4606      	mov	r6, r0
 800fd84:	f7f0 ff00 	bl	8000b88 <__aeabi_d2iz>
 800fd88:	9004      	str	r0, [sp, #16]
 800fd8a:	f7f0 fbe3 	bl	8000554 <__aeabi_i2d>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	4630      	mov	r0, r6
 800fd94:	4639      	mov	r1, r7
 800fd96:	f7f0 fa8f 	bl	80002b8 <__aeabi_dsub>
 800fd9a:	f1ba 0f00 	cmp.w	sl, #0
 800fd9e:	4606      	mov	r6, r0
 800fda0:	460f      	mov	r7, r1
 800fda2:	dd6d      	ble.n	800fe80 <__kernel_rem_pio2+0x250>
 800fda4:	1e62      	subs	r2, r4, #1
 800fda6:	ab0e      	add	r3, sp, #56	; 0x38
 800fda8:	9d04      	ldr	r5, [sp, #16]
 800fdaa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fdae:	f1ca 0118 	rsb	r1, sl, #24
 800fdb2:	fa40 f301 	asr.w	r3, r0, r1
 800fdb6:	441d      	add	r5, r3
 800fdb8:	408b      	lsls	r3, r1
 800fdba:	1ac0      	subs	r0, r0, r3
 800fdbc:	ab0e      	add	r3, sp, #56	; 0x38
 800fdbe:	9504      	str	r5, [sp, #16]
 800fdc0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800fdc4:	f1ca 0317 	rsb	r3, sl, #23
 800fdc8:	fa40 fb03 	asr.w	fp, r0, r3
 800fdcc:	f1bb 0f00 	cmp.w	fp, #0
 800fdd0:	dd65      	ble.n	800fe9e <__kernel_rem_pio2+0x26e>
 800fdd2:	9b04      	ldr	r3, [sp, #16]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	9304      	str	r3, [sp, #16]
 800fdda:	4615      	mov	r5, r2
 800fddc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fde0:	4294      	cmp	r4, r2
 800fde2:	f300 809c 	bgt.w	800ff1e <__kernel_rem_pio2+0x2ee>
 800fde6:	f1ba 0f00 	cmp.w	sl, #0
 800fdea:	dd07      	ble.n	800fdfc <__kernel_rem_pio2+0x1cc>
 800fdec:	f1ba 0f01 	cmp.w	sl, #1
 800fdf0:	f000 80c0 	beq.w	800ff74 <__kernel_rem_pio2+0x344>
 800fdf4:	f1ba 0f02 	cmp.w	sl, #2
 800fdf8:	f000 80c6 	beq.w	800ff88 <__kernel_rem_pio2+0x358>
 800fdfc:	f1bb 0f02 	cmp.w	fp, #2
 800fe00:	d14d      	bne.n	800fe9e <__kernel_rem_pio2+0x26e>
 800fe02:	4632      	mov	r2, r6
 800fe04:	463b      	mov	r3, r7
 800fe06:	4956      	ldr	r1, [pc, #344]	; (800ff60 <__kernel_rem_pio2+0x330>)
 800fe08:	2000      	movs	r0, #0
 800fe0a:	f7f0 fa55 	bl	80002b8 <__aeabi_dsub>
 800fe0e:	4606      	mov	r6, r0
 800fe10:	460f      	mov	r7, r1
 800fe12:	2d00      	cmp	r5, #0
 800fe14:	d043      	beq.n	800fe9e <__kernel_rem_pio2+0x26e>
 800fe16:	4650      	mov	r0, sl
 800fe18:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ff50 <__kernel_rem_pio2+0x320>
 800fe1c:	f000 fba0 	bl	8010560 <scalbn>
 800fe20:	4630      	mov	r0, r6
 800fe22:	4639      	mov	r1, r7
 800fe24:	ec53 2b10 	vmov	r2, r3, d0
 800fe28:	f7f0 fa46 	bl	80002b8 <__aeabi_dsub>
 800fe2c:	4606      	mov	r6, r0
 800fe2e:	460f      	mov	r7, r1
 800fe30:	e035      	b.n	800fe9e <__kernel_rem_pio2+0x26e>
 800fe32:	4b4c      	ldr	r3, [pc, #304]	; (800ff64 <__kernel_rem_pio2+0x334>)
 800fe34:	2200      	movs	r2, #0
 800fe36:	4630      	mov	r0, r6
 800fe38:	4639      	mov	r1, r7
 800fe3a:	f7f0 fbf5 	bl	8000628 <__aeabi_dmul>
 800fe3e:	f7f0 fea3 	bl	8000b88 <__aeabi_d2iz>
 800fe42:	f7f0 fb87 	bl	8000554 <__aeabi_i2d>
 800fe46:	4602      	mov	r2, r0
 800fe48:	460b      	mov	r3, r1
 800fe4a:	ec43 2b18 	vmov	d8, r2, r3
 800fe4e:	4b46      	ldr	r3, [pc, #280]	; (800ff68 <__kernel_rem_pio2+0x338>)
 800fe50:	2200      	movs	r2, #0
 800fe52:	f7f0 fbe9 	bl	8000628 <__aeabi_dmul>
 800fe56:	4602      	mov	r2, r0
 800fe58:	460b      	mov	r3, r1
 800fe5a:	4630      	mov	r0, r6
 800fe5c:	4639      	mov	r1, r7
 800fe5e:	f7f0 fa2b 	bl	80002b8 <__aeabi_dsub>
 800fe62:	f7f0 fe91 	bl	8000b88 <__aeabi_d2iz>
 800fe66:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe6a:	f84b 0b04 	str.w	r0, [fp], #4
 800fe6e:	ec51 0b18 	vmov	r0, r1, d8
 800fe72:	f7f0 fa23 	bl	80002bc <__adddf3>
 800fe76:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fe7a:	4606      	mov	r6, r0
 800fe7c:	460f      	mov	r7, r1
 800fe7e:	e75b      	b.n	800fd38 <__kernel_rem_pio2+0x108>
 800fe80:	d106      	bne.n	800fe90 <__kernel_rem_pio2+0x260>
 800fe82:	1e63      	subs	r3, r4, #1
 800fe84:	aa0e      	add	r2, sp, #56	; 0x38
 800fe86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fe8a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800fe8e:	e79d      	b.n	800fdcc <__kernel_rem_pio2+0x19c>
 800fe90:	4b36      	ldr	r3, [pc, #216]	; (800ff6c <__kernel_rem_pio2+0x33c>)
 800fe92:	2200      	movs	r2, #0
 800fe94:	f7f0 fe4e 	bl	8000b34 <__aeabi_dcmpge>
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	d13d      	bne.n	800ff18 <__kernel_rem_pio2+0x2e8>
 800fe9c:	4683      	mov	fp, r0
 800fe9e:	2200      	movs	r2, #0
 800fea0:	2300      	movs	r3, #0
 800fea2:	4630      	mov	r0, r6
 800fea4:	4639      	mov	r1, r7
 800fea6:	f7f0 fe27 	bl	8000af8 <__aeabi_dcmpeq>
 800feaa:	2800      	cmp	r0, #0
 800feac:	f000 80c0 	beq.w	8010030 <__kernel_rem_pio2+0x400>
 800feb0:	1e65      	subs	r5, r4, #1
 800feb2:	462b      	mov	r3, r5
 800feb4:	2200      	movs	r2, #0
 800feb6:	9902      	ldr	r1, [sp, #8]
 800feb8:	428b      	cmp	r3, r1
 800feba:	da6c      	bge.n	800ff96 <__kernel_rem_pio2+0x366>
 800febc:	2a00      	cmp	r2, #0
 800febe:	f000 8089 	beq.w	800ffd4 <__kernel_rem_pio2+0x3a4>
 800fec2:	ab0e      	add	r3, sp, #56	; 0x38
 800fec4:	f1aa 0a18 	sub.w	sl, sl, #24
 800fec8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	f000 80ad 	beq.w	801002c <__kernel_rem_pio2+0x3fc>
 800fed2:	4650      	mov	r0, sl
 800fed4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ff50 <__kernel_rem_pio2+0x320>
 800fed8:	f000 fb42 	bl	8010560 <scalbn>
 800fedc:	ab9a      	add	r3, sp, #616	; 0x268
 800fede:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fee2:	ec57 6b10 	vmov	r6, r7, d0
 800fee6:	00ec      	lsls	r4, r5, #3
 800fee8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800feec:	46aa      	mov	sl, r5
 800feee:	f1ba 0f00 	cmp.w	sl, #0
 800fef2:	f280 80d6 	bge.w	80100a2 <__kernel_rem_pio2+0x472>
 800fef6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ff48 <__kernel_rem_pio2+0x318>
 800fefa:	462e      	mov	r6, r5
 800fefc:	2e00      	cmp	r6, #0
 800fefe:	f2c0 8104 	blt.w	801010a <__kernel_rem_pio2+0x4da>
 800ff02:	ab72      	add	r3, sp, #456	; 0x1c8
 800ff04:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ff08:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ff70 <__kernel_rem_pio2+0x340>
 800ff0c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ff10:	f04f 0800 	mov.w	r8, #0
 800ff14:	1baf      	subs	r7, r5, r6
 800ff16:	e0ea      	b.n	80100ee <__kernel_rem_pio2+0x4be>
 800ff18:	f04f 0b02 	mov.w	fp, #2
 800ff1c:	e759      	b.n	800fdd2 <__kernel_rem_pio2+0x1a2>
 800ff1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff22:	b955      	cbnz	r5, 800ff3a <__kernel_rem_pio2+0x30a>
 800ff24:	b123      	cbz	r3, 800ff30 <__kernel_rem_pio2+0x300>
 800ff26:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ff2a:	f8c8 3000 	str.w	r3, [r8]
 800ff2e:	2301      	movs	r3, #1
 800ff30:	3201      	adds	r2, #1
 800ff32:	f108 0804 	add.w	r8, r8, #4
 800ff36:	461d      	mov	r5, r3
 800ff38:	e752      	b.n	800fde0 <__kernel_rem_pio2+0x1b0>
 800ff3a:	1acb      	subs	r3, r1, r3
 800ff3c:	f8c8 3000 	str.w	r3, [r8]
 800ff40:	462b      	mov	r3, r5
 800ff42:	e7f5      	b.n	800ff30 <__kernel_rem_pio2+0x300>
 800ff44:	f3af 8000 	nop.w
	...
 800ff54:	3ff00000 	.word	0x3ff00000
 800ff58:	08012b18 	.word	0x08012b18
 800ff5c:	40200000 	.word	0x40200000
 800ff60:	3ff00000 	.word	0x3ff00000
 800ff64:	3e700000 	.word	0x3e700000
 800ff68:	41700000 	.word	0x41700000
 800ff6c:	3fe00000 	.word	0x3fe00000
 800ff70:	08012ad8 	.word	0x08012ad8
 800ff74:	1e62      	subs	r2, r4, #1
 800ff76:	ab0e      	add	r3, sp, #56	; 0x38
 800ff78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff7c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ff80:	a90e      	add	r1, sp, #56	; 0x38
 800ff82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ff86:	e739      	b.n	800fdfc <__kernel_rem_pio2+0x1cc>
 800ff88:	1e62      	subs	r2, r4, #1
 800ff8a:	ab0e      	add	r3, sp, #56	; 0x38
 800ff8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ff94:	e7f4      	b.n	800ff80 <__kernel_rem_pio2+0x350>
 800ff96:	a90e      	add	r1, sp, #56	; 0x38
 800ff98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	430a      	orrs	r2, r1
 800ffa0:	e789      	b.n	800feb6 <__kernel_rem_pio2+0x286>
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ffa8:	2900      	cmp	r1, #0
 800ffaa:	d0fa      	beq.n	800ffa2 <__kernel_rem_pio2+0x372>
 800ffac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ffb2:	446a      	add	r2, sp
 800ffb4:	3a98      	subs	r2, #152	; 0x98
 800ffb6:	920a      	str	r2, [sp, #40]	; 0x28
 800ffb8:	9a08      	ldr	r2, [sp, #32]
 800ffba:	18e3      	adds	r3, r4, r3
 800ffbc:	18a5      	adds	r5, r4, r2
 800ffbe:	aa22      	add	r2, sp, #136	; 0x88
 800ffc0:	f104 0801 	add.w	r8, r4, #1
 800ffc4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ffc8:	9304      	str	r3, [sp, #16]
 800ffca:	9b04      	ldr	r3, [sp, #16]
 800ffcc:	4543      	cmp	r3, r8
 800ffce:	da04      	bge.n	800ffda <__kernel_rem_pio2+0x3aa>
 800ffd0:	461c      	mov	r4, r3
 800ffd2:	e6a3      	b.n	800fd1c <__kernel_rem_pio2+0xec>
 800ffd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	e7e4      	b.n	800ffa4 <__kernel_rem_pio2+0x374>
 800ffda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ffdc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ffe0:	f7f0 fab8 	bl	8000554 <__aeabi_i2d>
 800ffe4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ffe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffea:	46ab      	mov	fp, r5
 800ffec:	461c      	mov	r4, r3
 800ffee:	f04f 0900 	mov.w	r9, #0
 800fff2:	2600      	movs	r6, #0
 800fff4:	2700      	movs	r7, #0
 800fff6:	9b06      	ldr	r3, [sp, #24]
 800fff8:	4599      	cmp	r9, r3
 800fffa:	dd06      	ble.n	801000a <__kernel_rem_pio2+0x3da>
 800fffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fffe:	e8e3 6702 	strd	r6, r7, [r3], #8
 8010002:	f108 0801 	add.w	r8, r8, #1
 8010006:	930a      	str	r3, [sp, #40]	; 0x28
 8010008:	e7df      	b.n	800ffca <__kernel_rem_pio2+0x39a>
 801000a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801000e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010012:	f7f0 fb09 	bl	8000628 <__aeabi_dmul>
 8010016:	4602      	mov	r2, r0
 8010018:	460b      	mov	r3, r1
 801001a:	4630      	mov	r0, r6
 801001c:	4639      	mov	r1, r7
 801001e:	f7f0 f94d 	bl	80002bc <__adddf3>
 8010022:	f109 0901 	add.w	r9, r9, #1
 8010026:	4606      	mov	r6, r0
 8010028:	460f      	mov	r7, r1
 801002a:	e7e4      	b.n	800fff6 <__kernel_rem_pio2+0x3c6>
 801002c:	3d01      	subs	r5, #1
 801002e:	e748      	b.n	800fec2 <__kernel_rem_pio2+0x292>
 8010030:	ec47 6b10 	vmov	d0, r6, r7
 8010034:	f1ca 0000 	rsb	r0, sl, #0
 8010038:	f000 fa92 	bl	8010560 <scalbn>
 801003c:	ec57 6b10 	vmov	r6, r7, d0
 8010040:	4ba0      	ldr	r3, [pc, #640]	; (80102c4 <__kernel_rem_pio2+0x694>)
 8010042:	ee10 0a10 	vmov	r0, s0
 8010046:	2200      	movs	r2, #0
 8010048:	4639      	mov	r1, r7
 801004a:	f7f0 fd73 	bl	8000b34 <__aeabi_dcmpge>
 801004e:	b1f8      	cbz	r0, 8010090 <__kernel_rem_pio2+0x460>
 8010050:	4b9d      	ldr	r3, [pc, #628]	; (80102c8 <__kernel_rem_pio2+0x698>)
 8010052:	2200      	movs	r2, #0
 8010054:	4630      	mov	r0, r6
 8010056:	4639      	mov	r1, r7
 8010058:	f7f0 fae6 	bl	8000628 <__aeabi_dmul>
 801005c:	f7f0 fd94 	bl	8000b88 <__aeabi_d2iz>
 8010060:	4680      	mov	r8, r0
 8010062:	f7f0 fa77 	bl	8000554 <__aeabi_i2d>
 8010066:	4b97      	ldr	r3, [pc, #604]	; (80102c4 <__kernel_rem_pio2+0x694>)
 8010068:	2200      	movs	r2, #0
 801006a:	f7f0 fadd 	bl	8000628 <__aeabi_dmul>
 801006e:	460b      	mov	r3, r1
 8010070:	4602      	mov	r2, r0
 8010072:	4639      	mov	r1, r7
 8010074:	4630      	mov	r0, r6
 8010076:	f7f0 f91f 	bl	80002b8 <__aeabi_dsub>
 801007a:	f7f0 fd85 	bl	8000b88 <__aeabi_d2iz>
 801007e:	1c65      	adds	r5, r4, #1
 8010080:	ab0e      	add	r3, sp, #56	; 0x38
 8010082:	f10a 0a18 	add.w	sl, sl, #24
 8010086:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801008a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801008e:	e720      	b.n	800fed2 <__kernel_rem_pio2+0x2a2>
 8010090:	4630      	mov	r0, r6
 8010092:	4639      	mov	r1, r7
 8010094:	f7f0 fd78 	bl	8000b88 <__aeabi_d2iz>
 8010098:	ab0e      	add	r3, sp, #56	; 0x38
 801009a:	4625      	mov	r5, r4
 801009c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80100a0:	e717      	b.n	800fed2 <__kernel_rem_pio2+0x2a2>
 80100a2:	ab0e      	add	r3, sp, #56	; 0x38
 80100a4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80100a8:	f7f0 fa54 	bl	8000554 <__aeabi_i2d>
 80100ac:	4632      	mov	r2, r6
 80100ae:	463b      	mov	r3, r7
 80100b0:	f7f0 faba 	bl	8000628 <__aeabi_dmul>
 80100b4:	4b84      	ldr	r3, [pc, #528]	; (80102c8 <__kernel_rem_pio2+0x698>)
 80100b6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80100ba:	2200      	movs	r2, #0
 80100bc:	4630      	mov	r0, r6
 80100be:	4639      	mov	r1, r7
 80100c0:	f7f0 fab2 	bl	8000628 <__aeabi_dmul>
 80100c4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80100c8:	4606      	mov	r6, r0
 80100ca:	460f      	mov	r7, r1
 80100cc:	e70f      	b.n	800feee <__kernel_rem_pio2+0x2be>
 80100ce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80100d2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80100d6:	f7f0 faa7 	bl	8000628 <__aeabi_dmul>
 80100da:	4602      	mov	r2, r0
 80100dc:	460b      	mov	r3, r1
 80100de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100e2:	f7f0 f8eb 	bl	80002bc <__adddf3>
 80100e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80100ea:	f108 0801 	add.w	r8, r8, #1
 80100ee:	9b02      	ldr	r3, [sp, #8]
 80100f0:	4598      	cmp	r8, r3
 80100f2:	dc01      	bgt.n	80100f8 <__kernel_rem_pio2+0x4c8>
 80100f4:	45b8      	cmp	r8, r7
 80100f6:	ddea      	ble.n	80100ce <__kernel_rem_pio2+0x49e>
 80100f8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80100fc:	ab4a      	add	r3, sp, #296	; 0x128
 80100fe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010102:	ed87 7b00 	vstr	d7, [r7]
 8010106:	3e01      	subs	r6, #1
 8010108:	e6f8      	b.n	800fefc <__kernel_rem_pio2+0x2cc>
 801010a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801010c:	2b02      	cmp	r3, #2
 801010e:	dc0b      	bgt.n	8010128 <__kernel_rem_pio2+0x4f8>
 8010110:	2b00      	cmp	r3, #0
 8010112:	dc35      	bgt.n	8010180 <__kernel_rem_pio2+0x550>
 8010114:	d059      	beq.n	80101ca <__kernel_rem_pio2+0x59a>
 8010116:	9b04      	ldr	r3, [sp, #16]
 8010118:	f003 0007 	and.w	r0, r3, #7
 801011c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010120:	ecbd 8b02 	vpop	{d8}
 8010124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010128:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801012a:	2b03      	cmp	r3, #3
 801012c:	d1f3      	bne.n	8010116 <__kernel_rem_pio2+0x4e6>
 801012e:	ab4a      	add	r3, sp, #296	; 0x128
 8010130:	4423      	add	r3, r4
 8010132:	9306      	str	r3, [sp, #24]
 8010134:	461c      	mov	r4, r3
 8010136:	469a      	mov	sl, r3
 8010138:	9502      	str	r5, [sp, #8]
 801013a:	9b02      	ldr	r3, [sp, #8]
 801013c:	2b00      	cmp	r3, #0
 801013e:	f1aa 0a08 	sub.w	sl, sl, #8
 8010142:	dc6b      	bgt.n	801021c <__kernel_rem_pio2+0x5ec>
 8010144:	46aa      	mov	sl, r5
 8010146:	f1ba 0f01 	cmp.w	sl, #1
 801014a:	f1a4 0408 	sub.w	r4, r4, #8
 801014e:	f300 8085 	bgt.w	801025c <__kernel_rem_pio2+0x62c>
 8010152:	9c06      	ldr	r4, [sp, #24]
 8010154:	2000      	movs	r0, #0
 8010156:	3408      	adds	r4, #8
 8010158:	2100      	movs	r1, #0
 801015a:	2d01      	cmp	r5, #1
 801015c:	f300 809d 	bgt.w	801029a <__kernel_rem_pio2+0x66a>
 8010160:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010164:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010168:	f1bb 0f00 	cmp.w	fp, #0
 801016c:	f040 809b 	bne.w	80102a6 <__kernel_rem_pio2+0x676>
 8010170:	9b01      	ldr	r3, [sp, #4]
 8010172:	e9c3 5600 	strd	r5, r6, [r3]
 8010176:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801017a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801017e:	e7ca      	b.n	8010116 <__kernel_rem_pio2+0x4e6>
 8010180:	3408      	adds	r4, #8
 8010182:	ab4a      	add	r3, sp, #296	; 0x128
 8010184:	441c      	add	r4, r3
 8010186:	462e      	mov	r6, r5
 8010188:	2000      	movs	r0, #0
 801018a:	2100      	movs	r1, #0
 801018c:	2e00      	cmp	r6, #0
 801018e:	da36      	bge.n	80101fe <__kernel_rem_pio2+0x5ce>
 8010190:	f1bb 0f00 	cmp.w	fp, #0
 8010194:	d039      	beq.n	801020a <__kernel_rem_pio2+0x5da>
 8010196:	4602      	mov	r2, r0
 8010198:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801019c:	9c01      	ldr	r4, [sp, #4]
 801019e:	e9c4 2300 	strd	r2, r3, [r4]
 80101a2:	4602      	mov	r2, r0
 80101a4:	460b      	mov	r3, r1
 80101a6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80101aa:	f7f0 f885 	bl	80002b8 <__aeabi_dsub>
 80101ae:	ae4c      	add	r6, sp, #304	; 0x130
 80101b0:	2401      	movs	r4, #1
 80101b2:	42a5      	cmp	r5, r4
 80101b4:	da2c      	bge.n	8010210 <__kernel_rem_pio2+0x5e0>
 80101b6:	f1bb 0f00 	cmp.w	fp, #0
 80101ba:	d002      	beq.n	80101c2 <__kernel_rem_pio2+0x592>
 80101bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101c0:	4619      	mov	r1, r3
 80101c2:	9b01      	ldr	r3, [sp, #4]
 80101c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80101c8:	e7a5      	b.n	8010116 <__kernel_rem_pio2+0x4e6>
 80101ca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80101ce:	eb0d 0403 	add.w	r4, sp, r3
 80101d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80101d6:	2000      	movs	r0, #0
 80101d8:	2100      	movs	r1, #0
 80101da:	2d00      	cmp	r5, #0
 80101dc:	da09      	bge.n	80101f2 <__kernel_rem_pio2+0x5c2>
 80101de:	f1bb 0f00 	cmp.w	fp, #0
 80101e2:	d002      	beq.n	80101ea <__kernel_rem_pio2+0x5ba>
 80101e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101e8:	4619      	mov	r1, r3
 80101ea:	9b01      	ldr	r3, [sp, #4]
 80101ec:	e9c3 0100 	strd	r0, r1, [r3]
 80101f0:	e791      	b.n	8010116 <__kernel_rem_pio2+0x4e6>
 80101f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80101f6:	f7f0 f861 	bl	80002bc <__adddf3>
 80101fa:	3d01      	subs	r5, #1
 80101fc:	e7ed      	b.n	80101da <__kernel_rem_pio2+0x5aa>
 80101fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010202:	f7f0 f85b 	bl	80002bc <__adddf3>
 8010206:	3e01      	subs	r6, #1
 8010208:	e7c0      	b.n	801018c <__kernel_rem_pio2+0x55c>
 801020a:	4602      	mov	r2, r0
 801020c:	460b      	mov	r3, r1
 801020e:	e7c5      	b.n	801019c <__kernel_rem_pio2+0x56c>
 8010210:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010214:	f7f0 f852 	bl	80002bc <__adddf3>
 8010218:	3401      	adds	r4, #1
 801021a:	e7ca      	b.n	80101b2 <__kernel_rem_pio2+0x582>
 801021c:	e9da 8900 	ldrd	r8, r9, [sl]
 8010220:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010224:	9b02      	ldr	r3, [sp, #8]
 8010226:	3b01      	subs	r3, #1
 8010228:	9302      	str	r3, [sp, #8]
 801022a:	4632      	mov	r2, r6
 801022c:	463b      	mov	r3, r7
 801022e:	4640      	mov	r0, r8
 8010230:	4649      	mov	r1, r9
 8010232:	f7f0 f843 	bl	80002bc <__adddf3>
 8010236:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801023a:	4602      	mov	r2, r0
 801023c:	460b      	mov	r3, r1
 801023e:	4640      	mov	r0, r8
 8010240:	4649      	mov	r1, r9
 8010242:	f7f0 f839 	bl	80002b8 <__aeabi_dsub>
 8010246:	4632      	mov	r2, r6
 8010248:	463b      	mov	r3, r7
 801024a:	f7f0 f837 	bl	80002bc <__adddf3>
 801024e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8010252:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010256:	ed8a 7b00 	vstr	d7, [sl]
 801025a:	e76e      	b.n	801013a <__kernel_rem_pio2+0x50a>
 801025c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010260:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010264:	4640      	mov	r0, r8
 8010266:	4632      	mov	r2, r6
 8010268:	463b      	mov	r3, r7
 801026a:	4649      	mov	r1, r9
 801026c:	f7f0 f826 	bl	80002bc <__adddf3>
 8010270:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010274:	4602      	mov	r2, r0
 8010276:	460b      	mov	r3, r1
 8010278:	4640      	mov	r0, r8
 801027a:	4649      	mov	r1, r9
 801027c:	f7f0 f81c 	bl	80002b8 <__aeabi_dsub>
 8010280:	4632      	mov	r2, r6
 8010282:	463b      	mov	r3, r7
 8010284:	f7f0 f81a 	bl	80002bc <__adddf3>
 8010288:	ed9d 7b02 	vldr	d7, [sp, #8]
 801028c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010290:	ed84 7b00 	vstr	d7, [r4]
 8010294:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010298:	e755      	b.n	8010146 <__kernel_rem_pio2+0x516>
 801029a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801029e:	f7f0 f80d 	bl	80002bc <__adddf3>
 80102a2:	3d01      	subs	r5, #1
 80102a4:	e759      	b.n	801015a <__kernel_rem_pio2+0x52a>
 80102a6:	9b01      	ldr	r3, [sp, #4]
 80102a8:	9a01      	ldr	r2, [sp, #4]
 80102aa:	601d      	str	r5, [r3, #0]
 80102ac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80102b0:	605c      	str	r4, [r3, #4]
 80102b2:	609f      	str	r7, [r3, #8]
 80102b4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80102b8:	60d3      	str	r3, [r2, #12]
 80102ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102be:	6110      	str	r0, [r2, #16]
 80102c0:	6153      	str	r3, [r2, #20]
 80102c2:	e728      	b.n	8010116 <__kernel_rem_pio2+0x4e6>
 80102c4:	41700000 	.word	0x41700000
 80102c8:	3e700000 	.word	0x3e700000
 80102cc:	00000000 	.word	0x00000000

080102d0 <__kernel_sin>:
 80102d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102d4:	ed2d 8b04 	vpush	{d8-d9}
 80102d8:	eeb0 8a41 	vmov.f32	s16, s2
 80102dc:	eef0 8a61 	vmov.f32	s17, s3
 80102e0:	ec55 4b10 	vmov	r4, r5, d0
 80102e4:	b083      	sub	sp, #12
 80102e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80102ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80102ee:	9001      	str	r0, [sp, #4]
 80102f0:	da06      	bge.n	8010300 <__kernel_sin+0x30>
 80102f2:	ee10 0a10 	vmov	r0, s0
 80102f6:	4629      	mov	r1, r5
 80102f8:	f7f0 fc46 	bl	8000b88 <__aeabi_d2iz>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	d051      	beq.n	80103a4 <__kernel_sin+0xd4>
 8010300:	4622      	mov	r2, r4
 8010302:	462b      	mov	r3, r5
 8010304:	4620      	mov	r0, r4
 8010306:	4629      	mov	r1, r5
 8010308:	f7f0 f98e 	bl	8000628 <__aeabi_dmul>
 801030c:	4682      	mov	sl, r0
 801030e:	468b      	mov	fp, r1
 8010310:	4602      	mov	r2, r0
 8010312:	460b      	mov	r3, r1
 8010314:	4620      	mov	r0, r4
 8010316:	4629      	mov	r1, r5
 8010318:	f7f0 f986 	bl	8000628 <__aeabi_dmul>
 801031c:	a341      	add	r3, pc, #260	; (adr r3, 8010424 <__kernel_sin+0x154>)
 801031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010322:	4680      	mov	r8, r0
 8010324:	4689      	mov	r9, r1
 8010326:	4650      	mov	r0, sl
 8010328:	4659      	mov	r1, fp
 801032a:	f7f0 f97d 	bl	8000628 <__aeabi_dmul>
 801032e:	a33f      	add	r3, pc, #252	; (adr r3, 801042c <__kernel_sin+0x15c>)
 8010330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010334:	f7ef ffc0 	bl	80002b8 <__aeabi_dsub>
 8010338:	4652      	mov	r2, sl
 801033a:	465b      	mov	r3, fp
 801033c:	f7f0 f974 	bl	8000628 <__aeabi_dmul>
 8010340:	a33c      	add	r3, pc, #240	; (adr r3, 8010434 <__kernel_sin+0x164>)
 8010342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010346:	f7ef ffb9 	bl	80002bc <__adddf3>
 801034a:	4652      	mov	r2, sl
 801034c:	465b      	mov	r3, fp
 801034e:	f7f0 f96b 	bl	8000628 <__aeabi_dmul>
 8010352:	a33a      	add	r3, pc, #232	; (adr r3, 801043c <__kernel_sin+0x16c>)
 8010354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010358:	f7ef ffae 	bl	80002b8 <__aeabi_dsub>
 801035c:	4652      	mov	r2, sl
 801035e:	465b      	mov	r3, fp
 8010360:	f7f0 f962 	bl	8000628 <__aeabi_dmul>
 8010364:	a337      	add	r3, pc, #220	; (adr r3, 8010444 <__kernel_sin+0x174>)
 8010366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036a:	f7ef ffa7 	bl	80002bc <__adddf3>
 801036e:	9b01      	ldr	r3, [sp, #4]
 8010370:	4606      	mov	r6, r0
 8010372:	460f      	mov	r7, r1
 8010374:	b9eb      	cbnz	r3, 80103b2 <__kernel_sin+0xe2>
 8010376:	4602      	mov	r2, r0
 8010378:	460b      	mov	r3, r1
 801037a:	4650      	mov	r0, sl
 801037c:	4659      	mov	r1, fp
 801037e:	f7f0 f953 	bl	8000628 <__aeabi_dmul>
 8010382:	a325      	add	r3, pc, #148	; (adr r3, 8010418 <__kernel_sin+0x148>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	f7ef ff96 	bl	80002b8 <__aeabi_dsub>
 801038c:	4642      	mov	r2, r8
 801038e:	464b      	mov	r3, r9
 8010390:	f7f0 f94a 	bl	8000628 <__aeabi_dmul>
 8010394:	4602      	mov	r2, r0
 8010396:	460b      	mov	r3, r1
 8010398:	4620      	mov	r0, r4
 801039a:	4629      	mov	r1, r5
 801039c:	f7ef ff8e 	bl	80002bc <__adddf3>
 80103a0:	4604      	mov	r4, r0
 80103a2:	460d      	mov	r5, r1
 80103a4:	ec45 4b10 	vmov	d0, r4, r5
 80103a8:	b003      	add	sp, #12
 80103aa:	ecbd 8b04 	vpop	{d8-d9}
 80103ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b2:	4b1b      	ldr	r3, [pc, #108]	; (8010420 <__kernel_sin+0x150>)
 80103b4:	ec51 0b18 	vmov	r0, r1, d8
 80103b8:	2200      	movs	r2, #0
 80103ba:	f7f0 f935 	bl	8000628 <__aeabi_dmul>
 80103be:	4632      	mov	r2, r6
 80103c0:	ec41 0b19 	vmov	d9, r0, r1
 80103c4:	463b      	mov	r3, r7
 80103c6:	4640      	mov	r0, r8
 80103c8:	4649      	mov	r1, r9
 80103ca:	f7f0 f92d 	bl	8000628 <__aeabi_dmul>
 80103ce:	4602      	mov	r2, r0
 80103d0:	460b      	mov	r3, r1
 80103d2:	ec51 0b19 	vmov	r0, r1, d9
 80103d6:	f7ef ff6f 	bl	80002b8 <__aeabi_dsub>
 80103da:	4652      	mov	r2, sl
 80103dc:	465b      	mov	r3, fp
 80103de:	f7f0 f923 	bl	8000628 <__aeabi_dmul>
 80103e2:	ec53 2b18 	vmov	r2, r3, d8
 80103e6:	f7ef ff67 	bl	80002b8 <__aeabi_dsub>
 80103ea:	a30b      	add	r3, pc, #44	; (adr r3, 8010418 <__kernel_sin+0x148>)
 80103ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f0:	4606      	mov	r6, r0
 80103f2:	460f      	mov	r7, r1
 80103f4:	4640      	mov	r0, r8
 80103f6:	4649      	mov	r1, r9
 80103f8:	f7f0 f916 	bl	8000628 <__aeabi_dmul>
 80103fc:	4602      	mov	r2, r0
 80103fe:	460b      	mov	r3, r1
 8010400:	4630      	mov	r0, r6
 8010402:	4639      	mov	r1, r7
 8010404:	f7ef ff5a 	bl	80002bc <__adddf3>
 8010408:	4602      	mov	r2, r0
 801040a:	460b      	mov	r3, r1
 801040c:	4620      	mov	r0, r4
 801040e:	4629      	mov	r1, r5
 8010410:	f7ef ff52 	bl	80002b8 <__aeabi_dsub>
 8010414:	e7c4      	b.n	80103a0 <__kernel_sin+0xd0>
 8010416:	bf00      	nop
 8010418:	55555549 	.word	0x55555549
 801041c:	3fc55555 	.word	0x3fc55555
 8010420:	3fe00000 	.word	0x3fe00000
 8010424:	5acfd57c 	.word	0x5acfd57c
 8010428:	3de5d93a 	.word	0x3de5d93a
 801042c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010430:	3e5ae5e6 	.word	0x3e5ae5e6
 8010434:	57b1fe7d 	.word	0x57b1fe7d
 8010438:	3ec71de3 	.word	0x3ec71de3
 801043c:	19c161d5 	.word	0x19c161d5
 8010440:	3f2a01a0 	.word	0x3f2a01a0
 8010444:	1110f8a6 	.word	0x1110f8a6
 8010448:	3f811111 	.word	0x3f811111

0801044c <fabs>:
 801044c:	ec51 0b10 	vmov	r0, r1, d0
 8010450:	ee10 2a10 	vmov	r2, s0
 8010454:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010458:	ec43 2b10 	vmov	d0, r2, r3
 801045c:	4770      	bx	lr
	...

08010460 <floor>:
 8010460:	ec51 0b10 	vmov	r0, r1, d0
 8010464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010468:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801046c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010470:	2e13      	cmp	r6, #19
 8010472:	ee10 5a10 	vmov	r5, s0
 8010476:	ee10 8a10 	vmov	r8, s0
 801047a:	460c      	mov	r4, r1
 801047c:	dc32      	bgt.n	80104e4 <floor+0x84>
 801047e:	2e00      	cmp	r6, #0
 8010480:	da14      	bge.n	80104ac <floor+0x4c>
 8010482:	a333      	add	r3, pc, #204	; (adr r3, 8010550 <floor+0xf0>)
 8010484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010488:	f7ef ff18 	bl	80002bc <__adddf3>
 801048c:	2200      	movs	r2, #0
 801048e:	2300      	movs	r3, #0
 8010490:	f7f0 fb5a 	bl	8000b48 <__aeabi_dcmpgt>
 8010494:	b138      	cbz	r0, 80104a6 <floor+0x46>
 8010496:	2c00      	cmp	r4, #0
 8010498:	da57      	bge.n	801054a <floor+0xea>
 801049a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801049e:	431d      	orrs	r5, r3
 80104a0:	d001      	beq.n	80104a6 <floor+0x46>
 80104a2:	4c2d      	ldr	r4, [pc, #180]	; (8010558 <floor+0xf8>)
 80104a4:	2500      	movs	r5, #0
 80104a6:	4621      	mov	r1, r4
 80104a8:	4628      	mov	r0, r5
 80104aa:	e025      	b.n	80104f8 <floor+0x98>
 80104ac:	4f2b      	ldr	r7, [pc, #172]	; (801055c <floor+0xfc>)
 80104ae:	4137      	asrs	r7, r6
 80104b0:	ea01 0307 	and.w	r3, r1, r7
 80104b4:	4303      	orrs	r3, r0
 80104b6:	d01f      	beq.n	80104f8 <floor+0x98>
 80104b8:	a325      	add	r3, pc, #148	; (adr r3, 8010550 <floor+0xf0>)
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	f7ef fefd 	bl	80002bc <__adddf3>
 80104c2:	2200      	movs	r2, #0
 80104c4:	2300      	movs	r3, #0
 80104c6:	f7f0 fb3f 	bl	8000b48 <__aeabi_dcmpgt>
 80104ca:	2800      	cmp	r0, #0
 80104cc:	d0eb      	beq.n	80104a6 <floor+0x46>
 80104ce:	2c00      	cmp	r4, #0
 80104d0:	bfbe      	ittt	lt
 80104d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80104d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80104da:	19a4      	addlt	r4, r4, r6
 80104dc:	ea24 0407 	bic.w	r4, r4, r7
 80104e0:	2500      	movs	r5, #0
 80104e2:	e7e0      	b.n	80104a6 <floor+0x46>
 80104e4:	2e33      	cmp	r6, #51	; 0x33
 80104e6:	dd0b      	ble.n	8010500 <floor+0xa0>
 80104e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80104ec:	d104      	bne.n	80104f8 <floor+0x98>
 80104ee:	ee10 2a10 	vmov	r2, s0
 80104f2:	460b      	mov	r3, r1
 80104f4:	f7ef fee2 	bl	80002bc <__adddf3>
 80104f8:	ec41 0b10 	vmov	d0, r0, r1
 80104fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010500:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010508:	fa23 f707 	lsr.w	r7, r3, r7
 801050c:	4207      	tst	r7, r0
 801050e:	d0f3      	beq.n	80104f8 <floor+0x98>
 8010510:	a30f      	add	r3, pc, #60	; (adr r3, 8010550 <floor+0xf0>)
 8010512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010516:	f7ef fed1 	bl	80002bc <__adddf3>
 801051a:	2200      	movs	r2, #0
 801051c:	2300      	movs	r3, #0
 801051e:	f7f0 fb13 	bl	8000b48 <__aeabi_dcmpgt>
 8010522:	2800      	cmp	r0, #0
 8010524:	d0bf      	beq.n	80104a6 <floor+0x46>
 8010526:	2c00      	cmp	r4, #0
 8010528:	da02      	bge.n	8010530 <floor+0xd0>
 801052a:	2e14      	cmp	r6, #20
 801052c:	d103      	bne.n	8010536 <floor+0xd6>
 801052e:	3401      	adds	r4, #1
 8010530:	ea25 0507 	bic.w	r5, r5, r7
 8010534:	e7b7      	b.n	80104a6 <floor+0x46>
 8010536:	2301      	movs	r3, #1
 8010538:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801053c:	fa03 f606 	lsl.w	r6, r3, r6
 8010540:	4435      	add	r5, r6
 8010542:	4545      	cmp	r5, r8
 8010544:	bf38      	it	cc
 8010546:	18e4      	addcc	r4, r4, r3
 8010548:	e7f2      	b.n	8010530 <floor+0xd0>
 801054a:	2500      	movs	r5, #0
 801054c:	462c      	mov	r4, r5
 801054e:	e7aa      	b.n	80104a6 <floor+0x46>
 8010550:	8800759c 	.word	0x8800759c
 8010554:	7e37e43c 	.word	0x7e37e43c
 8010558:	bff00000 	.word	0xbff00000
 801055c:	000fffff 	.word	0x000fffff

08010560 <scalbn>:
 8010560:	b570      	push	{r4, r5, r6, lr}
 8010562:	ec55 4b10 	vmov	r4, r5, d0
 8010566:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801056a:	4606      	mov	r6, r0
 801056c:	462b      	mov	r3, r5
 801056e:	b99a      	cbnz	r2, 8010598 <scalbn+0x38>
 8010570:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010574:	4323      	orrs	r3, r4
 8010576:	d036      	beq.n	80105e6 <scalbn+0x86>
 8010578:	4b39      	ldr	r3, [pc, #228]	; (8010660 <scalbn+0x100>)
 801057a:	4629      	mov	r1, r5
 801057c:	ee10 0a10 	vmov	r0, s0
 8010580:	2200      	movs	r2, #0
 8010582:	f7f0 f851 	bl	8000628 <__aeabi_dmul>
 8010586:	4b37      	ldr	r3, [pc, #220]	; (8010664 <scalbn+0x104>)
 8010588:	429e      	cmp	r6, r3
 801058a:	4604      	mov	r4, r0
 801058c:	460d      	mov	r5, r1
 801058e:	da10      	bge.n	80105b2 <scalbn+0x52>
 8010590:	a32b      	add	r3, pc, #172	; (adr r3, 8010640 <scalbn+0xe0>)
 8010592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010596:	e03a      	b.n	801060e <scalbn+0xae>
 8010598:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801059c:	428a      	cmp	r2, r1
 801059e:	d10c      	bne.n	80105ba <scalbn+0x5a>
 80105a0:	ee10 2a10 	vmov	r2, s0
 80105a4:	4620      	mov	r0, r4
 80105a6:	4629      	mov	r1, r5
 80105a8:	f7ef fe88 	bl	80002bc <__adddf3>
 80105ac:	4604      	mov	r4, r0
 80105ae:	460d      	mov	r5, r1
 80105b0:	e019      	b.n	80105e6 <scalbn+0x86>
 80105b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80105b6:	460b      	mov	r3, r1
 80105b8:	3a36      	subs	r2, #54	; 0x36
 80105ba:	4432      	add	r2, r6
 80105bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80105c0:	428a      	cmp	r2, r1
 80105c2:	dd08      	ble.n	80105d6 <scalbn+0x76>
 80105c4:	2d00      	cmp	r5, #0
 80105c6:	a120      	add	r1, pc, #128	; (adr r1, 8010648 <scalbn+0xe8>)
 80105c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105cc:	da1c      	bge.n	8010608 <scalbn+0xa8>
 80105ce:	a120      	add	r1, pc, #128	; (adr r1, 8010650 <scalbn+0xf0>)
 80105d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105d4:	e018      	b.n	8010608 <scalbn+0xa8>
 80105d6:	2a00      	cmp	r2, #0
 80105d8:	dd08      	ble.n	80105ec <scalbn+0x8c>
 80105da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80105de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80105e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80105e6:	ec45 4b10 	vmov	d0, r4, r5
 80105ea:	bd70      	pop	{r4, r5, r6, pc}
 80105ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80105f0:	da19      	bge.n	8010626 <scalbn+0xc6>
 80105f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80105f6:	429e      	cmp	r6, r3
 80105f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80105fc:	dd0a      	ble.n	8010614 <scalbn+0xb4>
 80105fe:	a112      	add	r1, pc, #72	; (adr r1, 8010648 <scalbn+0xe8>)
 8010600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d1e2      	bne.n	80105ce <scalbn+0x6e>
 8010608:	a30f      	add	r3, pc, #60	; (adr r3, 8010648 <scalbn+0xe8>)
 801060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060e:	f7f0 f80b 	bl	8000628 <__aeabi_dmul>
 8010612:	e7cb      	b.n	80105ac <scalbn+0x4c>
 8010614:	a10a      	add	r1, pc, #40	; (adr r1, 8010640 <scalbn+0xe0>)
 8010616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d0b8      	beq.n	8010590 <scalbn+0x30>
 801061e:	a10e      	add	r1, pc, #56	; (adr r1, 8010658 <scalbn+0xf8>)
 8010620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010624:	e7b4      	b.n	8010590 <scalbn+0x30>
 8010626:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801062a:	3236      	adds	r2, #54	; 0x36
 801062c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010630:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010634:	4620      	mov	r0, r4
 8010636:	4b0c      	ldr	r3, [pc, #48]	; (8010668 <scalbn+0x108>)
 8010638:	2200      	movs	r2, #0
 801063a:	e7e8      	b.n	801060e <scalbn+0xae>
 801063c:	f3af 8000 	nop.w
 8010640:	c2f8f359 	.word	0xc2f8f359
 8010644:	01a56e1f 	.word	0x01a56e1f
 8010648:	8800759c 	.word	0x8800759c
 801064c:	7e37e43c 	.word	0x7e37e43c
 8010650:	8800759c 	.word	0x8800759c
 8010654:	fe37e43c 	.word	0xfe37e43c
 8010658:	c2f8f359 	.word	0xc2f8f359
 801065c:	81a56e1f 	.word	0x81a56e1f
 8010660:	43500000 	.word	0x43500000
 8010664:	ffff3cb0 	.word	0xffff3cb0
 8010668:	3c900000 	.word	0x3c900000

0801066c <_init>:
 801066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801066e:	bf00      	nop
 8010670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010672:	bc08      	pop	{r3}
 8010674:	469e      	mov	lr, r3
 8010676:	4770      	bx	lr

08010678 <_fini>:
 8010678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067a:	bf00      	nop
 801067c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801067e:	bc08      	pop	{r3}
 8010680:	469e      	mov	lr, r3
 8010682:	4770      	bx	lr
